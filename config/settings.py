"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.9

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from str2bool import str2bool
from django.contrib import messages
from config.jazzmin_settings import JAZZMIN_SETTINGS as JAZZMIN_SETTINGS_FILE
load_dotenv(".env")  # take environment variables from .env.
# load_dotenv(".env.local")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



ACR_CLOUD_API_KEY = os.getenv("ACR_CLOUD_API_KEY")
ACR_CLOUD_API_SECRET = os.getenv("ACR_CLOUD_API_SECRET")
ACR_CLOUD_API_URL = os.getenv("ACR_CLOUD_API_URL")

SOUNDCHARTS_APP_ID = os.getenv("SOUNDCHARTS_APP_ID")
SOUNDCHARTS_API_KEY = os.getenv("SOUNDCHARTS_API_KEY")
SOUNDCHARTS_API_URL = os.getenv(
    "SOUNDCHARTS_API_URL", "https://customer.api.soundcharts.com"
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "--django-secret-key--")

# Enable/Disable DEBUG Mode
DEBUG = str2bool(os.environ.get("DEBUG"))
# print(' DEBUG -> ' + str(DEBUG) )

# Hosts Settings
ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:5085",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:5085",
    "https://musicchartsai.it",
]

# Used by DEBUG-Toolbar
INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "config.admin_apps.AdminConfig",  # Custom admin with ordering
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "apps.pages",
    "apps.dyn_dt",
    "apps.dyn_api",
    "apps.users",
    "apps.charts",
    "apps.tasks",
    "apps.soundcharts",
    "apps.acrcloud",
    "apps.documentation",
    "django_celery_results",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_spectacular",
    "django_api_gen",
    "debug_toolbar",
    "mathfilters",
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "config.urls"

UI_TEMPLATES = os.path.join(BASE_DIR, "templates")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [UI_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DB_ENGINE = os.getenv("DB_ENGINE", None)
DB_USERNAME = os.getenv("DB_USERNAME", None)
DB_PASS = os.getenv("DB_PASS", None)
DB_HOST = os.getenv("DB_HOST", None)
DB_PORT = os.getenv("DB_PORT", None)
DB_NAME = os.getenv("DB_NAME", None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends." + DB_ENGINE,
            "NAME": DB_NAME,
            "USER": DB_USERNAME,
            "PASSWORD": DB_PASS,
            "HOST": DB_HOST,
            "PORT": DB_PORT,
        },
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# File upload settings for ACRCloud
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Site URL for webhooks (update this for production)
SITE_URL = os.environ.get('SITE_URL', 'http://localhost:8000')

# ACRCloud Mock Service for Development
ACRCLOUD_USE_MOCK = os.environ.get('ACRCLOUD_USE_MOCK', 'True').lower() == 'true'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ### Async Tasks (Celery) Settings ###

CELERY_SCRIPTS_DIR = os.path.join(BASE_DIR, "tasks_scripts")

CELERY_LOGS_URL = "/tasks_logs/"
CELERY_LOGS_DIR = os.path.join(BASE_DIR, "tasks_logs")

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "redis://localhost:6379")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "redis://localhost:6379")

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_CACHE_BACKEND = "django-cache"
CELERY_RESULT_BACKEND = "django-db"
CELERY_RESULT_EXTENDED = True
CELERY_RESULT_EXPIRES = 60 * 60 * 24 * 30  # Results expire after 1 month
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# Celery Beat Configuration for Periodic Tasks
CELERY_BEAT_SCHEDULE = {
    'process-chart-sync-schedules': {
        'task': 'apps.soundcharts.tasks.process_scheduled_chart_syncs',
        'schedule': 300.0,  # Run every 5 minutes
    },
}
########################################


LOGIN_REDIRECT_URL = "/"
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = os.environ.get("EMAIL_PORT", 587)
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", True)
EMAIL_HOST_USER = os.environ.get(
    "EMAIL_HOST_USER",
)
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}
########################################

# HTTPS
SECURE_SSL_REDIRECT = os.environ.get("SECURE_SSL_REDIRECT", False)
SESSION_COOKIE_SECURE = os.environ.get("SESSION_COOKIE_SECURE", False)
CSRF_COOKIE_SECURE = os.environ.get("CSRF_COOKIE_SECURE", False)
SESSION_COOKIE_HTTPONLY = os.environ.get("SESSION_COOKIE_HTTPONLY", False)

MESSAGE_TAGS = {
    messages.INFO: "text-blue-800 border border-blue-300 bg-blue-50 dark:text-blue-400 dark:border-blue-800",
    messages.SUCCESS: "text-green-800 border border-green-300 bg-green-50 dark:text-green-400 dark:border-green-800",
    messages.WARNING: "text-yellow-800 border border-yellow-300 bg-yellow-50 dark:text-yellow-300 dark:border-yellow-800",
    messages.ERROR: "text-red-800 border border-red-300 bg-red-50 dark:text-red-400 dark:border-red-800",
}


# ### DYNAMIC_DATATB Settings ###
DYNAMIC_DATATB = {
    # SLUG -> Import_PATH
    "product": "apps.pages.models.Product",
}
########################################

# Syntax: URI -> Import_PATH
DYNAMIC_API = {
    # SLUG -> Import_PATH
    "product": "apps.pages.models.Product",
    "artist": "apps.soundcharts.models.Artist",
    "track": "apps.soundcharts.models.Track",
    "album": "apps.soundcharts.models.Album",
    "genre": "apps.soundcharts.models.Genre",
    "platform": "apps.soundcharts.models.Platform",
    "chart": "apps.soundcharts.models.Chart",
    "chart_ranking": "apps.soundcharts.models.ChartRanking",
    "chart_ranking_entry": "apps.soundcharts.models.ChartRankingEntry",
    "venue": "apps.soundcharts.models.Venue",
    "metadata_fetch_task": "apps.soundcharts.models.MetadataFetchTask",
    "task_result": "apps.soundcharts.models.TaskResult",
}
########################################

# Logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}


# JAZZMIN_SETTINGS = JAZZMIN_SETTINGS_FILE
# Generated by Django 5.2.5 on 2025-08-27 11:14

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('soundcharts', '0012_alter_chartranking_chart_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='MetadataFetchTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('metadata', 'Track Metadata'), ('audience', 'Track Audience'), ('bulk_metadata', 'Bulk Metadata'), ('bulk_audience', 'Bulk Audience')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('track_uuids', models.JSONField(default=list, help_text='List of track UUIDs to process')),
                ('total_tracks', models.IntegerField(default=0, help_text='Total number of tracks to process')),
                ('processed_tracks', models.IntegerField(default=0, help_text='Number of tracks processed')),
                ('successful_tracks', models.IntegerField(default=0, help_text='Number of tracks successfully processed')),
                ('failed_tracks', models.IntegerField(default=0, help_text='Number of tracks that failed')),
                ('celery_task_id', models.CharField(blank=True, help_text='Celery task ID', max_length=255)),
                ('error_message', models.TextField(blank=True, help_text='Error message if task failed')),
                ('retry_count', models.IntegerField(default=0, help_text='Number of retry attempts')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Metadata Fetch Task',
                'verbose_name_plural': 'Metadata Fetch Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='track',
            name='audience_fetched_at',
            field=models.DateTimeField(blank=True, help_text='When audience data was last fetched', null=True),
        ),
        migrations.AddField(
            model_name='track',
            name='duration',
            field=models.IntegerField(blank=True, help_text='Track duration in seconds', null=True),
        ),
        migrations.AddField(
            model_name='track',
            name='genre',
            field=models.CharField(blank=True, help_text='Primary genre', max_length=255),
        ),
        migrations.AddField(
            model_name='track',
            name='isrc',
            field=models.CharField(blank=True, help_text='International Standard Recording Code', max_length=255),
        ),
        migrations.AddField(
            model_name='track',
            name='label',
            field=models.CharField(blank=True, help_text='Record label', max_length=255),
        ),
        migrations.AddField(
            model_name='track',
            name='metadata_fetched_at',
            field=models.DateTimeField(blank=True, help_text='When metadata was last fetched', null=True),
        ),
        migrations.AddField(
            model_name='track',
            name='release_date',
            field=models.DateField(blank=True, help_text='Track release date', null=True),
        ),
        migrations.AddField(
            model_name='track',
            name='slug',
            field=models.CharField(blank=True, help_text='Soundcharts track slug', max_length=255),
        ),
        migrations.CreateModel(
            name='TrackAudience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_listeners', models.BigIntegerField(blank=True, help_text='Total number of listeners', null=True)),
                ('unique_listeners', models.BigIntegerField(blank=True, help_text='Unique listeners', null=True)),
                ('repeat_listeners', models.BigIntegerField(blank=True, help_text='Repeat listeners', null=True)),
                ('age_13_17', models.IntegerField(blank=True, help_text='Listeners aged 13-17', null=True)),
                ('age_18_24', models.IntegerField(blank=True, help_text='Listeners aged 18-24', null=True)),
                ('age_25_34', models.IntegerField(blank=True, help_text='Listeners aged 25-34', null=True)),
                ('age_35_44', models.IntegerField(blank=True, help_text='Listeners aged 35-44', null=True)),
                ('age_45_54', models.IntegerField(blank=True, help_text='Listeners aged 45-54', null=True)),
                ('age_55_64', models.IntegerField(blank=True, help_text='Listeners aged 55-64', null=True)),
                ('age_65_plus', models.IntegerField(blank=True, help_text='Listeners aged 65+', null=True)),
                ('top_countries', models.JSONField(default=list, help_text='Top countries by listeners')),
                ('top_cities', models.JSONField(default=list, help_text='Top cities by listeners')),
                ('api_data', models.JSONField(default=dict, help_text='Raw API response data')),
                ('fetched_at', models.DateTimeField(auto_now_add=True, help_text='When this data was fetched')),
                ('platform', models.ForeignKey(help_text='Platform for this audience data', on_delete=django.db.models.deletion.CASCADE, to='soundcharts.platform')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audience_data', to='soundcharts.track')),
            ],
            options={
                'verbose_name': 'Track Audience',
                'verbose_name_plural': 'Track Audiences',
                'ordering': ['-fetched_at'],
                'unique_together': {('track', 'platform')},
            },
        ),
    ]

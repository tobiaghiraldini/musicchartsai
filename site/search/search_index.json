{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MusicChartsAI Documentation","text":"<p>Welcome to the comprehensive documentation for MusicChartsAI - a powerful music analytics platform that integrates with Soundcharts and ACRCloud APIs to provide detailed music chart analysis, audience insights, and fraud detection capabilities.</p>"},{"location":"#what-is-musicchartsai","title":"\ud83c\udfb5 What is MusicChartsAI?","text":"<p>MusicChartsAI is a Django-based web application that provides:</p> <ul> <li>Music Chart Analytics: Real-time tracking of music charts across multiple platforms</li> <li>Audience Insights: Time-series analysis of track audience data</li> <li>Fraud Detection: ACRCloud-powered audio analysis and copyright detection</li> <li>Dynamic Data Management: Flexible tables and API endpoints for data manipulation</li> <li>Background Task Processing: Automated data synchronization using Celery</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get up and running with MusicChartsAI in minutes:</p> <ol> <li>Installation - Set up your development environment</li> <li>Configuration - Configure API keys and settings</li> <li>Quick Start Guide - Run your first data sync</li> </ol>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - Complete setup guide</li> <li>Configuration - Environment and API configuration</li> <li>Quick Start - First steps with the platform</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Overview - Platform capabilities and architecture</li> <li>Soundcharts Integration - Music chart data management</li> <li>ACRCloud Analysis - Audio analysis and fraud detection</li> <li>Dynamic Tables &amp; API - Flexible data management</li> <li>Chart Management - Chart synchronization and monitoring</li> <li>User Management - Authentication and authorization</li> <li>Background Tasks - Celery task processing and automation</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Overview - API architecture and authentication</li> <li>External APIs - Soundcharts and ACRCloud integration</li> <li>Internal APIs - REST API endpoints (coming soon)</li> <li>Authentication - API security and access control</li> </ul>"},{"location":"#admin-guide","title":"Admin Guide","text":"<ul> <li>Dashboard Overview - Admin interface navigation</li> <li>Data Management - Managing charts, tracks, and rankings</li> <li>Task Monitoring - Background task management</li> <li>User Administration - User management and permissions</li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<ul> <li>Production Setup - Production deployment guide</li> <li>Docker Deployment - Containerized deployment</li> <li>CI/CD Pipeline - Automated deployment</li> <li>Environment Configuration - Environment variables and settings</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Architecture - System architecture and design patterns</li> <li>Contributing - Contributing to the project</li> <li>Testing - Testing strategies and tools</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>MusicChartsAI is built on a modern Django architecture with the following key components:</p> <pre><code>graph TB\n    A[Frontend Dashboard] --&gt; B[Django Views]\n    B --&gt; C[Django Models]\n    C --&gt; D[Database]\n\n    E[Celery Workers] --&gt; F[Background Tasks]\n    F --&gt; G[Soundcharts API]\n    F --&gt; H[ACRCloud API]\n\n    I[Admin Interface] --&gt; B\n    J[REST API] --&gt; B\n\n    K[Redis] --&gt; E\n    L[File Storage] --&gt; C</code></pre>"},{"location":"#key-technologies","title":"Key Technologies","text":"<ul> <li>Backend: Django 5.2 with Python 3.13</li> <li>Frontend: Tailwind CSS with Flowbite components</li> <li>Task Processing: Celery with Redis message broker</li> <li>Database: SQLite (default), PostgreSQL/MySQL supported</li> <li>API Integration: Soundcharts API, ACRCloud API</li> <li>Charts: ApexCharts for data visualization</li> </ul>"},{"location":"#core-features","title":"\ud83d\udd27 Core Features","text":""},{"location":"#music-chart-management","title":"Music Chart Management","text":"<ul> <li>Multi-Platform Support: Spotify, Apple Music, YouTube, and more</li> <li>Automated Synchronization: Scheduled chart data updates</li> <li>Historical Data: Complete chart ranking history</li> <li>Real-time Monitoring: Live sync status and health metrics</li> </ul>"},{"location":"#audience-analytics","title":"Audience Analytics","text":"<ul> <li>Time-Series Data: Track audience growth over time</li> <li>Multi-Platform Comparison: Compare performance across platforms</li> <li>Interactive Charts: Dynamic visualizations with Chart.js</li> <li>Data Export: CSV and JSON export capabilities</li> </ul>"},{"location":"#audio-analysis","title":"Audio Analysis","text":"<ul> <li>Fraud Detection: ACRCloud-powered copyright detection</li> <li>Cover Detection: Identify cover versions of existing songs</li> <li>Lyrics Analysis: Content similarity analysis</li> <li>Risk Assessment: Automated risk scoring and classification</li> </ul>"},{"location":"#background-processing","title":"Background Processing","text":"<ul> <li>Celery Integration: Asynchronous task processing</li> <li>Task Monitoring: Real-time task status and progress</li> <li>Error Handling: Comprehensive retry mechanisms</li> <li>Scalable Architecture: Horizontal scaling support</li> </ul>"},{"location":"#dashboard-features","title":"\ud83d\udcca Dashboard Features","text":"<p>The MusicChartsAI dashboard provides comprehensive analytics:</p> <ul> <li>Weekly Rankings: Chart rankings fetched over time</li> <li>Platform Performance: Top-performing music platforms</li> <li>Track Analytics: Most popular tracks across charts</li> <li>System Health: Chart synchronization status and metrics</li> <li>Task Management: Background task monitoring and control</li> </ul>"},{"location":"#security-authentication","title":"\ud83d\udd10 Security &amp; Authentication","text":"<ul> <li>Session-based Authentication: Secure user sessions</li> <li>Role-based Access: Admin and user permission levels</li> <li>API Security: Token-based authentication for API endpoints</li> <li>Data Protection: Secure handling of sensitive API keys</li> </ul>"},{"location":"#getting-help","title":"\ud83d\ude80 Getting Help","text":"<ul> <li>Documentation: Comprehensive guides for all features</li> <li>API Reference: Complete API documentation</li> <li>Troubleshooting: Common issues and solutions</li> <li>Community: Join our Discord community for support</li> </ul>"},{"location":"#roadmap","title":"\ud83d\udcc8 Roadmap","text":""},{"location":"#upcoming-features","title":"Upcoming Features","text":"<ul> <li>Advanced Analytics: Machine learning-powered insights</li> <li>Real-time Updates: WebSocket-based live data</li> <li>Mobile App: Native mobile application</li> <li>API Marketplace: Third-party integrations</li> <li>Enterprise Features: Advanced reporting and analytics</li> </ul> <p>Ready to get started? Check out our Installation Guide to set up your MusicChartsAI instance!</p>"},{"location":"admin/dashboard-overview/","title":"Dashboard Overview","text":""},{"location":"admin/dashboard-overview/#admin-interface","title":"Admin Interface","text":"<p>Overview of the MusicChartsAI admin dashboard.</p>"},{"location":"admin/dashboard-overview/#navigation","title":"Navigation","text":"<ul> <li>Charts management</li> <li>Task monitoring</li> <li>User administration</li> <li>Data management</li> </ul> <p>Detailed admin guide coming soon.</p>"},{"location":"admin/data-management/","title":"Data Management","text":""},{"location":"admin/task-monitoring/","title":"Task Monitoring","text":""},{"location":"admin/user-administration/","title":"User Administration","text":""},{"location":"api/authentication/","title":"Authentication","text":""},{"location":"api/authentication/#api-authentication","title":"API Authentication","text":"<p>Authentication documentation coming soon.</p> <p>Coming soon.</p>"},{"location":"api/external-apis/","title":"External APIs","text":""},{"location":"api/external-apis/#soundcharts-api","title":"Soundcharts API","text":"<p>Integration with Soundcharts for music chart data.</p>"},{"location":"api/external-apis/#acrcloud-api","title":"ACRCloud API","text":"<p>Integration with ACRCloud for audio analysis.</p> <p>Detailed API documentation coming soon.</p>"},{"location":"api/internal-apis/","title":"Internal APIs","text":""},{"location":"api/internal-apis/#rest-api-endpoints","title":"REST API Endpoints","text":"<p>API documentation will be added when features are complete.</p> <p>Coming soon.</p>"},{"location":"api/overview/","title":"API Overview","text":""},{"location":"api/overview/#overview","title":"Overview","text":"<p>API documentation for MusicChartsAI platform.</p>"},{"location":"api/overview/#external-apis","title":"External APIs","text":"<ul> <li>Soundcharts API integration</li> <li>ACRCloud API integration</li> </ul>"},{"location":"api/overview/#internal-apis","title":"Internal APIs","text":"<p>Coming soon when features are complete.</p>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>Authentication documentation coming soon.</p> <p>This section will be expanded with complete API documentation.</p>"},{"location":"deployment/ci-cd-pipeline/","title":"CI/CD Pipeline","text":""},{"location":"deployment/docker-deployment/","title":"Docker Deployment","text":""},{"location":"deployment/environment-configuration/","title":"Environment Configuration","text":""},{"location":"deployment/production-setup/","title":"Production Setup","text":""},{"location":"deployment/production-setup/#deployment-guide","title":"Deployment Guide","text":"<p>Production deployment guide for MusicChartsAI.</p>"},{"location":"deployment/production-setup/#requirements","title":"Requirements","text":"<ul> <li>Linux server</li> <li>PostgreSQL database</li> <li>Redis server</li> <li>Nginx web server</li> </ul>"},{"location":"deployment/production-setup/#steps","title":"Steps","text":"<ol> <li>Server setup</li> <li>Database configuration</li> <li>Application deployment</li> <li>SSL configuration</li> </ol> <p>Detailed deployment guide coming soon.</p>"},{"location":"development/architecture/","title":"Architecture","text":""},{"location":"development/architecture/#system-architecture","title":"System Architecture","text":"<p>Overview of MusicChartsAI system architecture.</p>"},{"location":"development/architecture/#components","title":"Components","text":"<ul> <li>Django application</li> <li>Celery workers</li> <li>Redis message broker</li> <li>PostgreSQL database</li> <li>Nginx web server</li> </ul>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":"<p>Architecture diagrams and details coming soon.</p> <p>Detailed architecture documentation coming soon.</p>"},{"location":"development/contributing/","title":"Contributing","text":""},{"location":"development/testing/","title":"Testing","text":""},{"location":"development/troubleshooting/","title":"Troubleshooting","text":""},{"location":"features/acrcloud-analysis/","title":"ACRCloud Analysis","text":""},{"location":"features/acrcloud-analysis/#overview","title":"Overview","text":"<p>ACRCloud integration provides comprehensive audio analysis and fraud detection capabilities for uploaded songs.</p>"},{"location":"features/acrcloud-analysis/#features","title":"Features","text":"<ul> <li>Audio Fingerprinting: Exact match detection</li> <li>Cover Detection: Identify cover versions</li> <li>Lyrics Analysis: Content similarity analysis</li> <li>Fraud Detection: Risk assessment and scoring</li> </ul>"},{"location":"features/acrcloud-analysis/#configuration","title":"Configuration","text":"<p>See Configuration Guide for API setup.</p>"},{"location":"features/acrcloud-analysis/#usage","title":"Usage","text":"<p>See Quick Start Guide for getting started.</p> <p>This section will be expanded with detailed implementation information.</p>"},{"location":"features/background-tasks/","title":"Background Tasks System","text":""},{"location":"features/background-tasks/#overview","title":"Overview","text":"<p>The Background Tasks System in MusicChartsAI provides comprehensive asynchronous task processing using Celery. This system handles all time-consuming operations including data synchronization, API calls, file processing, and analytics calculations without blocking the main application.</p>"},{"location":"features/background-tasks/#architecture","title":"Architecture","text":""},{"location":"features/background-tasks/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    A[Django Application] --&gt; B[Celery Task Queue]\n    B --&gt; C[Redis Message Broker]\n    C --&gt; D[Celery Workers]\n    D --&gt; E[Task Execution]\n    E --&gt; F[Database Updates]\n    E --&gt; G[External API Calls]\n    E --&gt; H[File Processing]\n\n    I[Task Monitor] --&gt; B\n    J[Admin Interface] --&gt; I\n    K[API Endpoints] --&gt; I</code></pre>"},{"location":"features/background-tasks/#task-categories","title":"Task Categories","text":"<ol> <li>Data Synchronization Tasks</li> <li>Chart ranking synchronization</li> <li>Track metadata updates</li> <li>Audience data fetching</li> <li> <p>Platform data refresh</p> </li> <li> <p>Analysis Tasks</p> </li> <li>ACRCloud audio analysis</li> <li>Fraud detection processing</li> <li>Chart trend calculations</li> <li> <p>Performance analytics</p> </li> <li> <p>System Tasks</p> </li> <li>Database maintenance</li> <li>Log cleanup</li> <li>Backup operations</li> <li>Health checks</li> </ol>"},{"location":"features/background-tasks/#celery-configuration","title":"Celery Configuration","text":""},{"location":"features/background-tasks/#basic-setup","title":"Basic Setup","text":"<p>The Celery configuration is located in <code>config/celery.py</code>:</p> <pre><code>import os\nfrom celery import Celery\n\n# Set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napp = Celery('config')\n\n# Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Load task modules from all registered Django apps.\napp.autodiscover_tasks()\n</code></pre>"},{"location":"features/background-tasks/#settings-configuration","title":"Settings Configuration","text":"<p>Key Celery settings in <code>config/settings.py</code>:</p> <pre><code># Celery Configuration\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\nCELERY_RESULT_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\n\n# Task Configuration\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes\nCELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes\nCELERY_WORKER_PREFETCH_MULTIPLIER = 1\n\n# Result Configuration\nCELERY_RESULT_BACKEND = \"django-db\"\nCELERY_RESULT_EXTENDED = True\nCELERY_RESULT_EXPIRES = 60 * 60 * 24 * 30  # 30 days\n\n# Serialization\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\n\n# Concurrency Limits\nCELERY_WORKER_CONCURRENCY = 4\nCELERY_TASK_ANNOTATIONS = {\n    'apps.soundcharts.tasks.sync_chart_rankings_task': {'rate_limit': '2/m'},\n    'apps.soundcharts.tasks.fetch_track_metadata_task': {'rate_limit': '2/m'},\n    'apps.acrcloud.tasks.analyze_song_task': {'rate_limit': '1/m'},\n}\n</code></pre>"},{"location":"features/background-tasks/#task-management","title":"Task Management","text":""},{"location":"features/background-tasks/#task-scripts-directory","title":"Task Scripts Directory","text":"<p>Custom task scripts are stored in the <code>tasks_scripts/</code> directory:</p> <pre><code>tasks_scripts/\n\u251c\u2500\u2500 check-db-health.py          # Database health monitoring\n\u251c\u2500\u2500 check-disk-free.py         # Disk space monitoring\n\u251c\u2500\u2500 clean-database.py          # Database cleanup operations\n\u2514\u2500\u2500 backup-database.py         # Database backup tasks\n</code></pre>"},{"location":"features/background-tasks/#creating-custom-tasks","title":"Creating Custom Tasks","text":""},{"location":"features/background-tasks/#example-database-backup-task","title":"Example: Database Backup Task","text":"<pre><code># tasks_scripts/backup_database.py\nimport os\nimport shutil\nfrom datetime import datetime\nfrom django.conf import settings\n\ndef main():\n    \"\"\"Create a database backup with timestamp.\"\"\"\n    try:\n        # Get database file path\n        db_path = settings.DATABASES['default']['NAME']\n\n        # Create backup directory if it doesn't exist\n        backup_dir = \"db_backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        # Generate backup filename with timestamp\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        backup_filename = f\"db_backup_{timestamp}.sqlite3\"\n        backup_path = os.path.join(backup_dir, backup_filename)\n\n        # Create backup\n        shutil.copy2(db_path, backup_path)\n\n        print(f\"Database backup created: {backup_path}\")\n        return 0\n\n    except Exception as e:\n        print(f\"Backup failed: {str(e)}\")\n        return 1\n\nif __name__ == \"__main__\":\n    exit(main())\n</code></pre>"},{"location":"features/background-tasks/#example-data-cleanup-task","title":"Example: Data Cleanup Task","text":"<pre><code># tasks_scripts/cleanup_old_data.py\nfrom datetime import datetime, timedelta\nfrom django.utils import timezone\nfrom apps.soundcharts.models import ChartRanking, TrackAudienceTimeSeries\n\ndef main():\n    \"\"\"Clean up old data to maintain database performance.\"\"\"\n    try:\n        # Calculate cutoff date (90 days ago)\n        cutoff_date = timezone.now() - timedelta(days=90)\n\n        # Clean up old chart rankings\n        old_rankings = ChartRanking.objects.filter(\n            fetched_at__lt=cutoff_date\n        )\n        rankings_count = old_rankings.count()\n        old_rankings.delete()\n\n        # Clean up old audience data\n        old_audience = TrackAudienceTimeSeries.objects.filter(\n            fetched_at__lt=cutoff_date\n        )\n        audience_count = old_audience.count()\n        old_audience.delete()\n\n        print(f\"Cleaned up {rankings_count} old chart rankings\")\n        print(f\"Cleaned up {audience_count} old audience records\")\n        return 0\n\n    except Exception as e:\n        print(f\"Cleanup failed: {str(e)}\")\n        return 1\n\nif __name__ == \"__main__\":\n    exit(main())\n</code></pre>"},{"location":"features/background-tasks/#core-task-implementations","title":"Core Task Implementations","text":""},{"location":"features/background-tasks/#chart-synchronization-tasks","title":"Chart Synchronization Tasks","text":""},{"location":"features/background-tasks/#main-sync-task","title":"Main Sync Task","text":"<pre><code># apps/soundcharts/tasks.py\nfrom celery import shared_task\nfrom django.utils import timezone\nfrom .models import ChartSyncSchedule, ChartSyncExecution\nfrom .services import SoundchartsService\n\n@shared_task(bind=True, max_retries=3)\ndef sync_chart_rankings_task(self, schedule_id, execution_id):\n    \"\"\"Sync chart rankings for a specific schedule.\"\"\"\n    try:\n        # Get schedule and execution records\n        schedule = ChartSyncSchedule.objects.get(id=schedule_id)\n        execution = ChartSyncExecution.objects.get(id=execution_id)\n\n        # Update execution status\n        execution.status = 'running'\n        execution.started_at = timezone.now()\n        execution.save()\n\n        # Initialize service\n        service = SoundchartsService()\n\n        # Determine missing periods\n        missing_periods = schedule.get_missing_periods()\n\n        # Process each missing period\n        rankings_created = 0\n        tracks_created = 0\n\n        for period in missing_periods:\n            result = service.fetch_chart_rankings(\n                chart_id=schedule.chart.soundcharts_id,\n                start_date=period['start'],\n                end_date=period['end']\n            )\n\n            rankings_created += result['rankings_created']\n            tracks_created += result['tracks_created']\n\n        # Mark execution as completed\n        execution.mark_completed(\n            rankings_created=rankings_created,\n            tracks_created=tracks_created\n        )\n\n        # Update schedule\n        schedule.last_sync_at = timezone.now()\n        schedule.calculate_next_sync()\n        schedule.total_executions += 1\n        schedule.successful_executions += 1\n        schedule.save()\n\n        return {\n            'status': 'success',\n            'rankings_created': rankings_created,\n            'tracks_created': tracks_created\n        }\n\n    except Exception as exc:\n        # Handle retries\n        execution.mark_failed(str(exc))\n        schedule.failed_executions += 1\n        schedule.save()\n\n        # Retry with exponential backoff\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n</code></pre>"},{"location":"features/background-tasks/#scheduled-sync-processor","title":"Scheduled Sync Processor","text":"<pre><code>@shared_task\ndef process_scheduled_chart_syncs():\n    \"\"\"Process all due chart sync schedules.\"\"\"\n    from django.utils import timezone\n\n    # Find due schedules\n    due_schedules = ChartSyncSchedule.objects.filter(\n        is_active=True,\n        next_sync_at__lte=timezone.now()\n    )\n\n    for schedule in due_schedules:\n        # Create execution record\n        execution = ChartSyncExecution.objects.create(\n            schedule=schedule,\n            status='pending'\n        )\n\n        # Queue sync task\n        sync_chart_rankings_task.delay(schedule.id, execution.id)\n\n        # Update next sync time\n        schedule.calculate_next_sync()\n        schedule.save()\n\n    return f\"Processed {due_schedules.count()} due schedules\"\n</code></pre>"},{"location":"features/background-tasks/#acrcloud-analysis-tasks","title":"ACRCloud Analysis Tasks","text":""},{"location":"features/background-tasks/#audio-analysis-task","title":"Audio Analysis Task","text":"<pre><code># apps/acrcloud/tasks.py\nfrom celery import shared_task\nfrom .models import Song, Analysis\nfrom .services import ACRCloudService\n\n@shared_task(bind=True, max_retries=3)\ndef analyze_song_task(self, song_id):\n    \"\"\"Analyze uploaded song using ACRCloud API.\"\"\"\n    try:\n        song = Song.objects.get(id=song_id)\n\n        # Create analysis record\n        analysis = Analysis.objects.create(\n            song=song,\n            status='processing'\n        )\n\n        # Initialize service\n        service = ACRCloudService()\n\n        # Perform analysis\n        result = service.analyze_audio(song.audio_file.path)\n\n        # Update analysis record\n        analysis.status = 'completed'\n        analysis.raw_response = result\n        analysis.save()\n\n        # Generate analysis report\n        service.generate_analysis_report(analysis)\n\n        # Send notification\n        send_analysis_complete_notification.delay(song.id, analysis.id)\n\n        return {\n            'status': 'success',\n            'analysis_id': analysis.id,\n            'song_id': song.id\n        }\n\n    except Exception as exc:\n        # Handle retries\n        if analysis:\n            analysis.status = 'failed'\n            analysis.error_message = str(exc)\n            analysis.save()\n\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n\n@shared_task\ndef send_analysis_complete_notification(song_id, analysis_id):\n    \"\"\"Send notification when analysis is complete.\"\"\"\n    # Implementation for email/SMS notifications\n    pass\n</code></pre>"},{"location":"features/background-tasks/#metadata-fetching-tasks","title":"Metadata Fetching Tasks","text":""},{"location":"features/background-tasks/#track-metadata-task","title":"Track Metadata Task","text":"<pre><code># apps/soundcharts/tasks.py\n@shared_task(bind=True, max_retries=3)\ndef fetch_track_metadata_task(self, track_uuid):\n    \"\"\"Fetch and update track metadata from Soundcharts API.\"\"\"\n    try:\n        from .models import Track\n        from .services import SoundchartsService\n\n        track = Track.objects.get(uuid=track_uuid)\n        service = SoundchartsService()\n\n        # Fetch metadata\n        metadata = service.fetch_track_metadata(track_uuid)\n\n        # Update track\n        track.title = metadata.get('title', track.title)\n        track.artist_name = metadata.get('artist_name', track.artist_name)\n        track.album_name = metadata.get('album_name', track.album_name)\n        track.release_date = metadata.get('release_date', track.release_date)\n        track.genre = metadata.get('genre', track.genre)\n        track.metadata_updated_at = timezone.now()\n        track.save()\n\n        return {\n            'status': 'success',\n            'track_uuid': track_uuid,\n            'metadata_updated': True\n        }\n\n    except Exception as exc:\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n</code></pre>"},{"location":"features/background-tasks/#task-monitoring-and-management","title":"Task Monitoring and Management","text":""},{"location":"features/background-tasks/#admin-interface","title":"Admin Interface","text":"<p>The Django admin provides comprehensive task management:</p>"},{"location":"features/background-tasks/#task-execution-monitoring","title":"Task Execution Monitoring","text":"<ul> <li>Real-time Status: Live task status updates</li> <li>Execution History: Complete task execution logs</li> <li>Error Tracking: Detailed error messages and stack traces</li> <li>Performance Metrics: Task duration and resource usage</li> </ul>"},{"location":"features/background-tasks/#task-management-actions","title":"Task Management Actions","text":"<ul> <li>Start Tasks: Execute custom scripts from admin</li> <li>Cancel Tasks: Stop running tasks gracefully</li> <li>Retry Failed Tasks: Restart failed executions</li> <li>Bulk Operations: Manage multiple tasks simultaneously</li> </ul>"},{"location":"features/background-tasks/#api-endpoints","title":"API Endpoints","text":""},{"location":"features/background-tasks/#task-status-api","title":"Task Status API","text":"<pre><code># apps/tasks/views.py\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsStaffUser\nfrom rest_framework.response import Response\nfrom celery.result import AsyncResult\n\n@api_view(['GET'])\n@permission_classes([IsStaffUser])\ndef task_status(request, task_id):\n    \"\"\"Get the status of a specific task.\"\"\"\n    result = AsyncResult(task_id)\n\n    return Response({\n        'task_id': task_id,\n        'status': result.status,\n        'result': result.result if result.ready() else None,\n        'traceback': result.traceback if result.failed() else None\n    })\n</code></pre>"},{"location":"features/background-tasks/#task-queue-api","title":"Task Queue API","text":"<pre><code>@api_view(['GET'])\n@permission_classes([IsStaffUser])\ndef task_queue_status(request):\n    \"\"\"Get current task queue status.\"\"\"\n    from celery import current_app\n\n    # Get active tasks\n    active_tasks = current_app.control.inspect().active()\n\n    # Get scheduled tasks\n    scheduled_tasks = current_app.control.inspect().scheduled()\n\n    return Response({\n        'active_tasks': active_tasks,\n        'scheduled_tasks': scheduled_tasks,\n        'worker_count': len(active_tasks.get('celery@worker', [])),\n    })\n</code></pre>"},{"location":"features/background-tasks/#task-scheduling","title":"Task Scheduling","text":""},{"location":"features/background-tasks/#celery-beat-configuration","title":"Celery Beat Configuration","text":"<p>For periodic tasks, configure Celery Beat:</p> <pre><code># config/settings.py\nfrom celery.schedules import crontab\n\nCELERY_BEAT_SCHEDULE = {\n    'process-scheduled-syncs': {\n        'task': 'apps.soundcharts.tasks.process_scheduled_chart_syncs',\n        'schedule': crontab(minute=0),  # Every hour\n    },\n    'cleanup-old-data': {\n        'task': 'apps.soundcharts.tasks.cleanup_old_data_task',\n        'schedule': crontab(hour=2, minute=0),  # Daily at 2 AM\n    },\n    'health-check': {\n        'task': 'apps.tasks.tasks.system_health_check',\n        'schedule': crontab(minute='*/15'),  # Every 15 minutes\n    },\n}\n</code></pre>"},{"location":"features/background-tasks/#custom-scheduling","title":"Custom Scheduling","text":""},{"location":"features/background-tasks/#dynamic-task-scheduling","title":"Dynamic Task Scheduling","text":"<pre><code># apps/soundcharts/tasks.py\n@shared_task\ndef schedule_chart_sync(chart_id, frequency='weekly'):\n    \"\"\"Schedule a chart sync task.\"\"\"\n    from .models import ChartSyncSchedule\n\n    schedule = ChartSyncSchedule.objects.create(\n        chart_id=chart_id,\n        sync_frequency=frequency,\n        is_active=True\n    )\n\n    # Calculate next sync time\n    schedule.calculate_next_sync()\n    schedule.save()\n\n    return f\"Scheduled sync for chart {chart_id}\"\n</code></pre>"},{"location":"features/background-tasks/#error-handling-and-retry-logic","title":"Error Handling and Retry Logic","text":""},{"location":"features/background-tasks/#retry-configuration","title":"Retry Configuration","text":"<pre><code># apps/soundcharts/tasks.py\n@shared_task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 60})\ndef robust_api_call_task(self, api_endpoint, data):\n    \"\"\"Task with automatic retry on failure.\"\"\"\n    try:\n        # API call implementation\n        response = make_api_call(api_endpoint, data)\n        return response\n\n    except Exception as exc:\n        # Log the error\n        logger.error(f\"API call failed: {exc}\")\n\n        # Retry with exponential backoff\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n</code></pre>"},{"location":"features/background-tasks/#error-notifications","title":"Error Notifications","text":"<pre><code>@shared_task\ndef notify_task_failure(task_name, error_message, user_id):\n    \"\"\"Send notification when a task fails.\"\"\"\n    from django.core.mail import send_mail\n    from django.contrib.auth.models import User\n\n    user = User.objects.get(id=user_id)\n\n    send_mail(\n        subject=f'Task Failed: {task_name}',\n        message=f'Task {task_name} failed with error: {error_message}',\n        from_email='noreply@musicchartsai.com',\n        recipient_list=[user.email],\n    )\n</code></pre>"},{"location":"features/background-tasks/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/background-tasks/#task-optimization-strategies","title":"Task Optimization Strategies","text":"<ol> <li>Batch Processing: Group similar operations together</li> <li>Connection Pooling: Reuse database connections</li> <li>Caching: Cache frequently accessed data</li> <li>Resource Limits: Set appropriate concurrency limits</li> </ol>"},{"location":"features/background-tasks/#example-batch-processing","title":"Example: Batch Processing","text":"<pre><code>@shared_task\ndef batch_process_tracks(track_ids):\n    \"\"\"Process multiple tracks in a single task.\"\"\"\n    from .models import Track\n    from .services import SoundchartsService\n\n    service = SoundchartsService()\n    results = []\n\n    # Process tracks in batches\n    for i in range(0, len(track_ids), 10):\n        batch = track_ids[i:i+10]\n        batch_results = service.batch_fetch_metadata(batch)\n        results.extend(batch_results)\n\n    return results\n</code></pre>"},{"location":"features/background-tasks/#resource-management","title":"Resource Management","text":"<pre><code># config/settings.py\nCELERY_WORKER_CONCURRENCY = 4\nCELERY_WORKER_MAX_TASKS_PER_CHILD = 1000\nCELERY_WORKER_DISABLE_RATE_LIMITS = False\n\n# Memory management\nCELERY_WORKER_MEMORY_LIMIT = 2000000  # 2GB\nCELERY_WORKER_MAX_MEMORY_PER_CHILD = 200000  # 200MB\n</code></pre>"},{"location":"features/background-tasks/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"features/background-tasks/#task-logging","title":"Task Logging","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\n@shared_task\ndef logged_task(task_data):\n    \"\"\"Task with comprehensive logging.\"\"\"\n    logger.info(f\"Starting task with data: {task_data}\")\n\n    try:\n        # Task implementation\n        result = process_data(task_data)\n        logger.info(f\"Task completed successfully: {result}\")\n        return result\n\n    except Exception as exc:\n        logger.error(f\"Task failed: {exc}\", exc_info=True)\n        raise\n</code></pre>"},{"location":"features/background-tasks/#health-monitoring","title":"Health Monitoring","text":"<pre><code>@shared_task\ndef system_health_check():\n    \"\"\"Monitor system health and performance.\"\"\"\n    import psutil\n    from django.db import connection\n\n    # Check database connection\n    try:\n        connection.ensure_connection()\n        db_status = \"healthy\"\n    except Exception as e:\n        db_status = f\"unhealthy: {e}\"\n\n    # Check system resources\n    cpu_percent = psutil.cpu_percent()\n    memory_percent = psutil.virtual_memory().percent\n    disk_percent = psutil.disk_usage('/').percent\n\n    health_data = {\n        'timestamp': timezone.now().isoformat(),\n        'database': db_status,\n        'cpu_percent': cpu_percent,\n        'memory_percent': memory_percent,\n        'disk_percent': disk_percent,\n    }\n\n    # Log health data\n    logger.info(f\"System health check: {health_data}\")\n\n    return health_data\n</code></pre>"},{"location":"features/background-tasks/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"features/background-tasks/#production-configuration","title":"Production Configuration","text":"<pre><code># Production settings\nCELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379')\nCELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379')\n\n# Security\nCELERY_TASK_ALWAYS_EAGER = False  # Never run tasks synchronously in production\nCELERY_TASK_EAGER_PROPAGATES = True\n\n# Performance\nCELERY_WORKER_CONCURRENCY = int(os.environ.get('CELERY_WORKER_CONCURRENCY', 4))\nCELERY_WORKER_PREFETCH_MULTIPLIER = 1\n</code></pre>"},{"location":"features/background-tasks/#docker-configuration","title":"Docker Configuration","text":"<pre><code># Dockerfile for Celery worker\nFROM python:3.13-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"celery\", \"-A\", \"config\", \"worker\", \"-l\", \"info\"]\n</code></pre>"},{"location":"features/background-tasks/#supervisor-configuration","title":"Supervisor Configuration","text":"<pre><code>[program:celery-worker]\ncommand=/path/to/venv/bin/celery -A config worker -l info\ndirectory=/path/to/project\nuser=www-data\nnumprocs=1\nstdout_logfile=/var/log/celery/worker.log\nstderr_logfile=/var/log/celery/worker.log\nautostart=true\nautorestart=true\nstartsecs=10\nstopwaitsecs=600\nkillasgroup=true\npriority=998\n</code></pre>"},{"location":"features/background-tasks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/background-tasks/#common-issues","title":"Common Issues","text":"<ol> <li>Tasks Not Executing</li> <li>Check Celery worker status</li> <li>Verify Redis connection</li> <li> <p>Check task queue status</p> </li> <li> <p>Memory Issues</p> </li> <li>Monitor worker memory usage</li> <li>Adjust worker concurrency</li> <li> <p>Implement task cleanup</p> </li> <li> <p>Database Locks</p> </li> <li>Use database connection pooling</li> <li>Implement retry logic</li> <li>Monitor database performance</li> </ol>"},{"location":"features/background-tasks/#debug-commands","title":"Debug Commands","text":"<pre><code># Check Celery status\ncelery -A config inspect active\n\n# Check scheduled tasks\ncelery -A config inspect scheduled\n\n# Check worker stats\ncelery -A config inspect stats\n\n# Purge task queue\ncelery -A config purge\n</code></pre>"},{"location":"features/background-tasks/#best-practices","title":"Best Practices","text":""},{"location":"features/background-tasks/#task-design","title":"Task Design","text":"<ol> <li>Idempotent Tasks: Tasks should be safe to retry</li> <li>Small Tasks: Break large operations into smaller tasks</li> <li>Error Handling: Implement comprehensive error handling</li> <li>Resource Cleanup: Clean up resources after task completion</li> </ol>"},{"location":"features/background-tasks/#monitoring","title":"Monitoring","text":"<ol> <li>Task Metrics: Track task execution times and success rates</li> <li>Resource Usage: Monitor CPU, memory, and disk usage</li> <li>Queue Length: Monitor task queue length and processing rate</li> <li>Error Rates: Track and alert on error rates</li> </ol>"},{"location":"features/background-tasks/#security","title":"Security","text":"<ol> <li>Task Authentication: Secure task execution</li> <li>Data Protection: Protect sensitive data in tasks</li> <li>Access Control: Limit task execution permissions</li> <li>Audit Logging: Log all task executions</li> </ol> <p>The Background Tasks System provides a robust foundation for handling all asynchronous operations in MusicChartsAI. With comprehensive monitoring, error handling, and scalability features, it ensures reliable and efficient task processing for all platform operations.</p>"},{"location":"features/chart-management/","title":"Chart Management","text":""},{"location":"features/chart-management/#overview","title":"Overview","text":"<p>Chart management provides comprehensive tools for managing music charts, including synchronization, monitoring, and health tracking.</p>"},{"location":"features/chart-management/#features","title":"Features","text":"<ul> <li>Sync Scheduling: Automated data synchronization</li> <li>Health Monitoring: Chart update status tracking</li> <li>Error Handling: Comprehensive retry mechanisms</li> <li>Performance Metrics: Sync success rates and timing</li> </ul>"},{"location":"features/chart-management/#usage","title":"Usage","text":"<p>See Quick Start Guide for getting started.</p> <p>This section will be expanded with detailed management information.</p>"},{"location":"features/dynamic-tables-api/","title":"Dynamic Tables &amp; API","text":""},{"location":"features/dynamic-tables-api/#overview","title":"Overview","text":"<p>Dynamic Tables and API provide flexible data management and programmatic access to MusicChartsAI data.</p>"},{"location":"features/dynamic-tables-api/#features","title":"Features","text":"<ul> <li>Configurable Tables: Flexible data presentation</li> <li>RESTful API: Programmatic data access</li> <li>Custom Filtering: Advanced search capabilities</li> <li>Export Functions: Multiple data formats</li> </ul>"},{"location":"features/dynamic-tables-api/#api-endpoints","title":"API Endpoints","text":"<p>API documentation will be added when features are complete.</p>"},{"location":"features/dynamic-tables-api/#usage","title":"Usage","text":"<p>See Quick Start Guide for getting started.</p> <p>This section will be expanded with detailed API documentation.</p>"},{"location":"features/overview/","title":"Features Overview","text":""},{"location":"features/overview/#platform-capabilities","title":"Platform Capabilities","text":"<p>MusicChartsAI provides comprehensive music analytics and chart management capabilities through several integrated systems:</p>"},{"location":"features/overview/#core-features","title":"Core Features","text":""},{"location":"features/overview/#music-chart-management","title":"\ud83c\udfb5 Music Chart Management","text":"<ul> <li>Multi-Platform Support: Spotify, Apple Music, YouTube, and more</li> <li>Automated Synchronization: Scheduled chart data updates</li> <li>Historical Data: Complete chart ranking history</li> <li>Real-time Monitoring: Live sync status and health metrics</li> </ul>"},{"location":"features/overview/#audience-analytics","title":"\ud83d\udcca Audience Analytics","text":"<ul> <li>Time-Series Data: Track audience growth over time</li> <li>Multi-Platform Comparison: Compare performance across platforms</li> <li>Interactive Charts: Dynamic visualizations with Chart.js</li> <li>Data Export: CSV and JSON export capabilities</li> </ul>"},{"location":"features/overview/#audio-analysis","title":"\ud83d\udd0d Audio Analysis","text":"<ul> <li>Fraud Detection: ACRCloud-powered copyright detection</li> <li>Cover Detection: Identify cover versions of existing songs</li> <li>Lyrics Analysis: Content similarity analysis</li> <li>Risk Assessment: Automated risk scoring and classification</li> </ul>"},{"location":"features/overview/#background-processing","title":"\u2699\ufe0f Background Processing","text":"<ul> <li>Celery Integration: Asynchronous task processing</li> <li>Task Monitoring: Real-time task status and progress</li> <li>Error Handling: Comprehensive retry mechanisms</li> <li>Scalable Architecture: Horizontal scaling support</li> </ul>"},{"location":"features/overview/#dynamic-data-management","title":"\ud83c\udf9b\ufe0f Dynamic Data Management","text":"<ul> <li>Flexible Tables: Configurable data visualization</li> <li>RESTful API: Programmatic access to data</li> <li>Custom Filters: Advanced data filtering capabilities</li> <li>Export Functions: Multiple export formats</li> </ul>"},{"location":"features/overview/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    A[Frontend Dashboard] --&gt; B[Django Views]\n    B --&gt; C[Django Models]\n    C --&gt; D[Database]\n\n    E[Celery Workers] --&gt; F[Background Tasks]\n    F --&gt; G[Soundcharts API]\n    F --&gt; H[ACRCloud API]\n\n    I[Admin Interface] --&gt; B\n    J[REST API] --&gt; B\n\n    K[Redis] --&gt; E\n    L[File Storage] --&gt; C</code></pre>"},{"location":"features/overview/#feature-modules","title":"Feature Modules","text":""},{"location":"features/overview/#soundcharts-integration","title":"Soundcharts Integration","text":"<ul> <li>Chart Data Fetching: Automated chart ranking retrieval</li> <li>Track Metadata: Complete track information management</li> <li>Audience Data: Time-series audience analytics</li> <li>Platform Management: Multi-platform chart support</li> </ul>"},{"location":"features/overview/#acrcloud-analysis","title":"ACRCloud Analysis","text":"<ul> <li>Audio Upload: Support for multiple audio formats</li> <li>Fingerprint Analysis: Exact match detection</li> <li>Cover Detection: Cover version identification</li> <li>Fraud Assessment: Risk scoring and classification</li> </ul>"},{"location":"features/overview/#dynamic-tables-api","title":"Dynamic Tables &amp; API","text":"<ul> <li>Configurable Tables: Flexible data presentation</li> <li>RESTful Endpoints: Programmatic data access</li> <li>Custom Filtering: Advanced search capabilities</li> <li>Export Functions: Multiple data formats</li> </ul>"},{"location":"features/overview/#chart-management","title":"Chart Management","text":"<ul> <li>Sync Scheduling: Automated data synchronization</li> <li>Health Monitoring: Chart update status tracking</li> <li>Error Handling: Comprehensive retry mechanisms</li> <li>Performance Metrics: Sync success rates and timing</li> </ul>"},{"location":"features/overview/#user-management","title":"User Management","text":"<ul> <li>Authentication: Secure user sessions</li> <li>Role-based Access: Admin and user permissions</li> <li>Profile Management: User account administration</li> <li>Security Features: CSRF protection and validation</li> </ul>"},{"location":"features/overview/#background-tasks","title":"Background Tasks","text":"<ul> <li>Celery Integration: Asynchronous task processing</li> <li>Task Monitoring: Real-time status tracking</li> <li>Error Recovery: Automatic retry mechanisms</li> <li>Resource Management: Memory and CPU optimization</li> </ul>"},{"location":"features/overview/#integration-points","title":"Integration Points","text":""},{"location":"features/overview/#external-apis","title":"External APIs","text":"<ul> <li>Soundcharts API: Chart data and metadata</li> <li>ACRCloud API: Audio analysis and fraud detection</li> <li>Future Integrations: Additional music services</li> </ul>"},{"location":"features/overview/#internal-systems","title":"Internal Systems","text":"<ul> <li>Django Admin: Administrative interface</li> <li>REST API: Programmatic access</li> <li>Celery Tasks: Background processing</li> <li>File Storage: Media and document management</li> </ul>"},{"location":"features/overview/#performance-features","title":"Performance Features","text":""},{"location":"features/overview/#scalability","title":"Scalability","text":"<ul> <li>Horizontal Scaling: Multiple worker support</li> <li>Database Optimization: Efficient query patterns</li> <li>Caching: Redis-based performance enhancement</li> <li>Load Balancing: Distributed processing</li> </ul>"},{"location":"features/overview/#monitoring","title":"Monitoring","text":"<ul> <li>Health Checks: System status monitoring</li> <li>Performance Metrics: Response time tracking</li> <li>Error Logging: Comprehensive error tracking</li> <li>Resource Usage: CPU and memory monitoring</li> </ul>"},{"location":"features/overview/#security-features","title":"Security Features","text":""},{"location":"features/overview/#data-protection","title":"Data Protection","text":"<ul> <li>API Security: Token-based authentication</li> <li>File Validation: Secure file upload handling</li> <li>CSRF Protection: Cross-site request forgery prevention</li> <li>Input Sanitization: Data validation and cleaning</li> </ul>"},{"location":"features/overview/#access-control","title":"Access Control","text":"<ul> <li>User Authentication: Secure login system</li> <li>Role-based Permissions: Granular access control</li> <li>Session Management: Secure session handling</li> <li>Audit Logging: User action tracking</li> </ul>"},{"location":"features/overview/#future-enhancements","title":"Future Enhancements","text":""},{"location":"features/overview/#planned-features","title":"Planned Features","text":"<ul> <li>Real-time Updates: WebSocket-based live data</li> <li>Advanced Analytics: Machine learning insights</li> <li>Mobile App: Native mobile application</li> <li>API Marketplace: Third-party integrations</li> </ul>"},{"location":"features/overview/#scalability-improvements","title":"Scalability Improvements","text":"<ul> <li>Microservices: Service-oriented architecture</li> <li>Container Orchestration: Kubernetes deployment</li> <li>Advanced Caching: Multi-layer caching strategy</li> <li>Database Sharding: Horizontal database scaling</li> </ul> <p>Ready to explore specific features? Check out our detailed guides: - Soundcharts Integration - ACRCloud Analysis - Background Tasks - Dynamic Tables &amp; API</p>"},{"location":"features/soundcharts-integration/","title":"Soundcharts Integration","text":""},{"location":"features/soundcharts-integration/#overview","title":"Overview","text":"<p>The Soundcharts integration provides comprehensive music chart data management, including automated synchronization, track metadata management, and audience analytics.</p>"},{"location":"features/soundcharts-integration/#features","title":"Features","text":"<ul> <li>Chart Data Synchronization: Automated fetching of chart rankings</li> <li>Track Metadata Management: Complete track information</li> <li>Audience Analytics: Time-series audience data</li> <li>Multi-Platform Support: Various music platforms</li> </ul>"},{"location":"features/soundcharts-integration/#configuration","title":"Configuration","text":"<p>See Configuration Guide for API setup.</p>"},{"location":"features/soundcharts-integration/#usage","title":"Usage","text":"<p>See Quick Start Guide for getting started.</p> <p>This section will be expanded with detailed implementation information.</p>"},{"location":"features/user-management/","title":"User Management","text":""},{"location":"features/user-management/#overview","title":"Overview","text":"<p>User management provides authentication, authorization, and user administration capabilities.</p>"},{"location":"features/user-management/#features","title":"Features","text":"<ul> <li>Authentication: Secure user sessions</li> <li>Role-based Access: Admin and user permissions</li> <li>Profile Management: User account administration</li> <li>Security Features: CSRF protection and validation</li> </ul>"},{"location":"features/user-management/#usage","title":"Usage","text":"<p>See Quick Start Guide for getting started.</p> <p>This section will be expanded with detailed user management information.</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":""},{"location":"getting-started/configuration/#overview","title":"Overview","text":"<p>This guide covers the configuration of MusicChartsAI, including API keys, environment variables, and system settings.</p>"},{"location":"getting-started/configuration/#environment-configuration","title":"Environment Configuration","text":""},{"location":"getting-started/configuration/#required-environment-variables","title":"Required Environment Variables","text":"<p>Create a <code>.env</code> file in your project root with these variables:</p> <pre><code># Django Settings\nSECRET_KEY=your-secret-key-here\nDEBUG=False\nALLOWED_HOSTS=your-domain.com,localhost\n\n# Database Configuration\nDATABASE_URL=postgresql://user:password@localhost:5432/musicchartsai\n\n# Celery Configuration\nCELERY_BROKER=redis://localhost:6379\nREDIS_URL=redis://localhost:6379\n\n# API Keys\nSOUNDCHARTS_APP_ID=your-soundcharts-app-id\nSOUNDCHARTS_API_KEY=your-soundcharts-api-key\nSOUNDCHARTS_API_URL=https://customer.api.soundcharts.com\n\nACR_CLOUD_API_KEY=your-acrcloud-api-key\nACR_CLOUD_API_SECRET=your-acrcloud-api-secret\nACR_CLOUD_API_URL=your-acrcloud-api-url\n</code></pre>"},{"location":"getting-started/configuration/#api-configuration","title":"API Configuration","text":""},{"location":"getting-started/configuration/#soundcharts-api-setup","title":"Soundcharts API Setup","text":"<ol> <li>Get API Credentials:</li> <li>Visit Soundcharts Developer Portal</li> <li>Create an account and request API access</li> <li> <p>Obtain your <code>APP_ID</code> and <code>API_KEY</code></p> </li> <li> <p>Configure in Django:    <pre><code># config/settings.py\nSOUNDCHARTS_APP_ID = os.getenv(\"SOUNDCHARTS_APP_ID\")\nSOUNDCHARTS_API_KEY = os.getenv(\"SOUNDCHARTS_API_KEY\")\nSOUNDCHARTS_API_URL = os.getenv(\"SOUNDCHARTS_API_URL\", \"https://customer.api.soundcharts.com\")\n</code></pre></p> </li> </ol>"},{"location":"getting-started/configuration/#acrcloud-api-setup","title":"ACRCloud API Setup","text":"<ol> <li>Get API Credentials:</li> <li>Visit ACRCloud Console</li> <li>Create a project and get API credentials</li> <li> <p>Obtain <code>API_KEY</code>, <code>API_SECRET</code>, and <code>API_URL</code></p> </li> <li> <p>Configure in Django:    <pre><code># config/settings.py\nACR_CLOUD_API_KEY = os.getenv(\"ACR_CLOUD_API_KEY\")\nACR_CLOUD_API_SECRET = os.getenv(\"ACR_CLOUD_API_SECRET\")\nACR_CLOUD_API_URL = os.getenv(\"ACR_CLOUD_API_URL\")\n</code></pre></p> </li> </ol>"},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":""},{"location":"getting-started/configuration/#sqlite-default","title":"SQLite (Default)","text":"<p>No additional configuration needed for development.</p>"},{"location":"getting-started/configuration/#postgresql-production","title":"PostgreSQL (Production)","text":"<pre><code># Install PostgreSQL\nsudo apt install postgresql postgresql-contrib\n\n# Create database\nsudo -u postgres createdb musicchartsai\nsudo -u postgres createuser --interactive\n\n# Update settings\nDATABASE_URL=postgresql://username:password@localhost:5432/musicchartsai\n</code></pre>"},{"location":"getting-started/configuration/#celery-configuration","title":"Celery Configuration","text":""},{"location":"getting-started/configuration/#redis-setup","title":"Redis Setup","text":"<pre><code># Install Redis\nsudo apt install redis-server\n\n# Start Redis\nsudo systemctl start redis\nsudo systemctl enable redis\n\n# Test connection\nredis-cli ping\n</code></pre>"},{"location":"getting-started/configuration/#celery-worker-configuration","title":"Celery Worker Configuration","text":"<pre><code># config/settings.py\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\nCELERY_RESULT_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\n</code></pre>"},{"location":"getting-started/configuration/#email-configuration","title":"Email Configuration","text":""},{"location":"getting-started/configuration/#smtp-setup","title":"SMTP Setup","text":"<pre><code># Add to .env\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n</code></pre>"},{"location":"getting-started/configuration/#file-storage-configuration","title":"File Storage Configuration","text":""},{"location":"getting-started/configuration/#local-storage-default","title":"Local Storage (Default)","text":"<p>Files stored in <code>media/</code> directory.</p>"},{"location":"getting-started/configuration/#aws-s3-production","title":"AWS S3 (Production)","text":"<pre><code># Add to .env\nAWS_ACCESS_KEY_ID=your-access-key\nAWS_SECRET_ACCESS_KEY=your-secret-key\nAWS_STORAGE_BUCKET_NAME=your-bucket-name\nAWS_S3_REGION_NAME=us-east-1\n</code></pre>"},{"location":"getting-started/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"getting-started/configuration/#production-settings","title":"Production Settings","text":"<pre><code># config/settings.py\nSECURE_SSL_REDIRECT = True\nSECURE_HSTS_SECONDS = 31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nSECURE_BROWSER_XSS_FILTER = True\nX_FRAME_OPTIONS = 'DENY'\n</code></pre>"},{"location":"getting-started/configuration/#logging-configuration","title":"Logging Configuration","text":""},{"location":"getting-started/configuration/#development-logging","title":"Development Logging","text":"<pre><code># config/settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': 'INFO',\n    },\n}\n</code></pre>"},{"location":"getting-started/configuration/#production-logging","title":"Production Logging","text":"<pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': '/var/log/musicchartsai.log',\n        },\n    },\n    'root': {\n        'handlers': ['file'],\n        'level': 'INFO',\n    },\n}\n</code></pre>"},{"location":"getting-started/configuration/#verification","title":"Verification","text":""},{"location":"getting-started/configuration/#test-configuration","title":"Test Configuration","text":"<pre><code># Test database connection\npython manage.py dbshell\n\n# Test Celery connection\ncelery -A config inspect active\n\n# Test API connections\npython manage.py shell\n&gt;&gt;&gt; from apps.soundcharts.services import SoundchartsService\n&gt;&gt;&gt; service = SoundchartsService()\n&gt;&gt;&gt; service.test_connection()\n</code></pre>"},{"location":"getting-started/configuration/#configuration-checklist","title":"Configuration Checklist","text":"<ul> <li> Environment variables set</li> <li> Database connection working</li> <li> Redis/Celery running</li> <li> API keys configured</li> <li> Email settings tested</li> <li> File storage configured</li> <li> Security settings applied</li> <li> Logging configured</li> </ul>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<ol> <li>Database Connection Failed</li> <li>Check database credentials</li> <li>Ensure database server is running</li> <li> <p>Verify network connectivity</p> </li> <li> <p>Celery Worker Not Starting</p> </li> <li>Check Redis connection</li> <li>Verify Celery configuration</li> <li> <p>Check worker logs</p> </li> <li> <p>API Calls Failing</p> </li> <li>Verify API keys are correct</li> <li>Check API endpoint URLs</li> <li> <p>Test network connectivity</p> </li> <li> <p>File Upload Issues</p> </li> <li>Check file permissions</li> <li>Verify storage configuration</li> <li>Check disk space</li> </ol> <p>Next Steps: Quick Start Guide or Feature Overview</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing MusicChartsAI, ensure you have the following prerequisites:</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.13 or higher</li> <li>Node.js: 22.0.0 or higher</li> <li>Redis: 7.0 or higher (for Celery message broker)</li> <li>Database: SQLite (default), PostgreSQL, or MySQL</li> <li>Operating System: Linux, macOS, or Windows</li> </ul>"},{"location":"getting-started/installation/#required-tools","title":"Required Tools","text":"<ul> <li>Git: For cloning the repository</li> <li>pip: Python package manager</li> <li>npm: Node.js package manager</li> <li>Virtual Environment: Python virtual environment (recommended)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-local-development-setup","title":"Method 1: Local Development Setup","text":""},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/your-repo/musicchartsai.git\ncd musicchartsai\n</code></pre>"},{"location":"getting-started/installation/#step-2-create-virtual-environment","title":"Step 2: Create Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On Linux/macOS:\nsource venv/bin/activate\n# On Windows:\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"getting-started/installation/#step-3-install-python-dependencies","title":"Step 3: Install Python Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#step-4-install-nodejs-dependencies","title":"Step 4: Install Node.js Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"getting-started/installation/#step-5-environment-configuration","title":"Step 5: Environment Configuration","text":"<pre><code># Copy environment template\ncp env.sample .env\n\n# Edit environment variables\nnano .env  # or use your preferred editor\n</code></pre>"},{"location":"getting-started/installation/#step-6-database-setup","title":"Step 6: Database Setup","text":"<pre><code># Create and apply migrations\npython manage.py makemigrations\npython manage.py migrate\n\n# Create superuser\npython manage.py createsuperuser\n\n# Collect static files\npython manage.py collectstatic --no-input\n</code></pre>"},{"location":"getting-started/installation/#step-7-start-services","title":"Step 7: Start Services","text":"<pre><code># Terminal 1: Start Redis\nredis-server\n\n# Terminal 2: Start Celery worker\ncelery -A config worker -l info -B\n\n# Terminal 3: Start Django development server\npython manage.py runserver\n\n# Terminal 4: Start frontend build (development)\nnpm run dev\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-setup","title":"Method 2: Docker Setup","text":""},{"location":"getting-started/installation/#step-1-clone-repository","title":"Step 1: Clone Repository","text":"<pre><code>git clone https://github.com/your-repo/musicchartsai.git\ncd musicchartsai\n</code></pre>"},{"location":"getting-started/installation/#step-2-environment-configuration","title":"Step 2: Environment Configuration","text":"<pre><code>cp env.sample .env\n# Edit .env file with your configuration\n</code></pre>"},{"location":"getting-started/installation/#step-3-build-and-start-services","title":"Step 3: Build and Start Services","text":"<pre><code># Build and start all services\ndocker-compose up --build\n\n# Or start specific services\ndocker-compose up appseed-app\ndocker-compose up celery\ndocker-compose up redis\n</code></pre>"},{"location":"getting-started/installation/#step-4-database-setup","title":"Step 4: Database Setup","text":"<pre><code># Run migrations\ndocker-compose exec appseed-app python manage.py migrate\n\n# Create superuser\ndocker-compose exec appseed-app python manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/installation/#method-3-production-deployment","title":"Method 3: Production Deployment","text":""},{"location":"getting-started/installation/#using-render-one-click-deploy","title":"Using Render (One-Click Deploy)","text":""},{"location":"getting-started/installation/#manual-production-setup","title":"Manual Production Setup","text":""},{"location":"getting-started/installation/#prerequisites-for-production","title":"Prerequisites for Production","text":"<ul> <li>Linux Server: Ubuntu 20.04+ or CentOS 8+</li> <li>Domain Name: Configured DNS pointing to your server</li> <li>SSL Certificate: For HTTPS (Let's Encrypt recommended)</li> <li>Process Manager: PM2 or Supervisor for process management</li> </ul>"},{"location":"getting-started/installation/#step-1-server-setup","title":"Step 1: Server Setup","text":"<pre><code># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install required packages\nsudo apt install -y python3.13 python3.13-venv python3.13-dev \\\n    nodejs npm redis-server postgresql postgresql-contrib \\\n    nginx git build-essential\n\n# Install pyenv (optional, for Python version management)\ncurl https://pyenv.run | bash\n</code></pre>"},{"location":"getting-started/installation/#step-2-application-setup","title":"Step 2: Application Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/your-repo/musicchartsai.git\ncd musicchartsai\n\n# Create virtual environment\npython3.13 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\nnpm install\n</code></pre>"},{"location":"getting-started/installation/#step-3-database-configuration","title":"Step 3: Database Configuration","text":"<pre><code># Configure PostgreSQL\nsudo -u postgres createuser --interactive\nsudo -u postgres createdb musicchartsai\n\n# Update settings for production\n# Edit config/settings.py to use PostgreSQL\n</code></pre>"},{"location":"getting-started/installation/#step-4-production-build","title":"Step 4: Production Build","text":"<pre><code># Build frontend assets\nnpm run build\n\n# Collect static files\npython manage.py collectstatic --no-input\n\n# Run migrations\npython manage.py migrate\n</code></pre>"},{"location":"getting-started/installation/#step-5-process-management","title":"Step 5: Process Management","text":"<pre><code># Install Supervisor\nsudo apt install supervisor\n\n# Create supervisor configuration\nsudo nano /etc/supervisor/conf.d/musicchartsai.conf\n</code></pre> <p>Supervisor configuration:</p> <pre><code>[program:musicchartsai]\ncommand=/path/to/musicchartsai/venv/bin/gunicorn config.wsgi:application\ndirectory=/path/to/musicchartsai\nuser=www-data\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/musicchartsai.log\n\n[program:celery-worker]\ncommand=/path/to/musicchartsai/venv/bin/celery -A config worker -l info\ndirectory=/path/to/musicchartsai\nuser=www-data\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/celery-worker.log\n\n[program:celery-beat]\ncommand=/path/to/musicchartsai/venv/bin/celery -A config beat -l info\ndirectory=/path/to/musicchartsai\nuser=www-data\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/celery-beat.log\n</code></pre>"},{"location":"getting-started/installation/#step-6-nginx-configuration","title":"Step 6: Nginx Configuration","text":"<pre><code># Create Nginx configuration\nsudo nano /etc/nginx/sites-available/musicchartsai\n</code></pre> <p>Nginx configuration:</p> <pre><code>server {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static/ {\n        alias /path/to/musicchartsai/staticfiles/;\n    }\n\n    location /media/ {\n        alias /path/to/musicchartsai/media/;\n    }\n}\n</code></pre> <pre><code># Enable site\nsudo ln -s /etc/nginx/sites-available/musicchartsai /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"getting-started/installation/#environment-configuration","title":"Environment Configuration","text":""},{"location":"getting-started/installation/#required-environment-variables","title":"Required Environment Variables","text":"<p>Create a <code>.env</code> file in the project root with the following variables:</p> <pre><code># Django Settings\nSECRET_KEY=your-secret-key-here\nDEBUG=False\nALLOWED_HOSTS=your-domain.com,localhost\n\n# Database Configuration\nDATABASE_URL=postgresql://user:password@localhost:5432/musicchartsai\n\n# Celery Configuration\nCELERY_BROKER=redis://localhost:6379\nREDIS_URL=redis://localhost:6379\n\n# API Keys\nSOUNDCHARTS_APP_ID=your-soundcharts-app-id\nSOUNDCHARTS_API_KEY=your-soundcharts-api-key\nSOUNDCHARTS_API_URL=https://customer.api.soundcharts.com\n\nACR_CLOUD_API_KEY=your-acrcloud-api-key\nACR_CLOUD_API_SECRET=your-acrcloud-api-secret\nACR_CLOUD_API_URL=your-acrcloud-api-url\n\n# Email Configuration (Optional)\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n\n# File Storage (Optional)\nAWS_ACCESS_KEY_ID=your-aws-access-key\nAWS_SECRET_ACCESS_KEY=your-aws-secret-key\nAWS_STORAGE_BUCKET_NAME=your-s3-bucket\nAWS_S3_REGION_NAME=us-east-1\n</code></pre>"},{"location":"getting-started/installation/#optional-environment-variables","title":"Optional Environment Variables","text":"<pre><code># Logging\nLOG_LEVEL=INFO\nLOG_FILE=/var/log/musicchartsai.log\n\n# Security\nSECURE_SSL_REDIRECT=True\nSECURE_HSTS_SECONDS=31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS=True\nSECURE_HSTS_PRELOAD=True\n\n# Performance\nCACHE_URL=redis://localhost:6379/1\nSESSION_ENGINE=django.contrib.sessions.backends.cache\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#check-installation","title":"Check Installation","text":"<p>After installation, verify everything is working:</p>"},{"location":"getting-started/installation/#1-django-server","title":"1. Django Server","text":"<pre><code>python manage.py runserver\n# Visit http://localhost:8000\n</code></pre>"},{"location":"getting-started/installation/#2-celery-worker","title":"2. Celery Worker","text":"<pre><code>celery -A config worker -l info\n# Should show worker started successfully\n</code></pre>"},{"location":"getting-started/installation/#3-redis-connection","title":"3. Redis Connection","text":"<pre><code>redis-cli ping\n# Should return PONG\n</code></pre>"},{"location":"getting-started/installation/#4-database-connection","title":"4. Database Connection","text":"<pre><code>python manage.py dbshell\n# Should connect to database successfully\n</code></pre>"},{"location":"getting-started/installation/#5-static-files","title":"5. Static Files","text":"<pre><code>python manage.py collectstatic --no-input\n# Should collect all static files without errors\n</code></pre>"},{"location":"getting-started/installation/#test-api-endpoints","title":"Test API Endpoints","text":"<pre><code># Test Soundcharts API\ncurl -H \"Authorization: Bearer your-api-key\" \\\n     https://customer.api.soundcharts.com/api/v2/track/7d534228-5165-11e9-9375-549f35161576\n\n# Test ACRCloud API\ncurl -X POST \"your-acrcloud-api-url\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"api_key\": \"your-api-key\"}'\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#1-python-version-issues","title":"1. Python Version Issues","text":"<pre><code># Check Python version\npython --version\n\n# If wrong version, use pyenv\npyenv install 3.13.0\npyenv local 3.13.0\n</code></pre>"},{"location":"getting-started/installation/#2-nodejs-version-issues","title":"2. Node.js Version Issues","text":"<pre><code># Check Node.js version\nnode --version\n\n# If wrong version, use nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nnvm install 22.0.0\nnvm use 22.0.0\n</code></pre>"},{"location":"getting-started/installation/#3-redis-connection-issues","title":"3. Redis Connection Issues","text":"<pre><code># Check Redis status\nsudo systemctl status redis\n\n# Start Redis if not running\nsudo systemctl start redis\nsudo systemctl enable redis\n</code></pre>"},{"location":"getting-started/installation/#4-database-migration-issues","title":"4. Database Migration Issues","text":"<pre><code># Reset migrations (development only)\nrm apps/*/migrations/0*.py\npython manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"getting-started/installation/#5-static-files-issues","title":"5. Static Files Issues","text":"<pre><code># Check static files configuration\npython manage.py findstatic admin/css/base.css\n\n# Rebuild static files\nrm -rf staticfiles/\npython manage.py collectstatic --no-input\n</code></pre>"},{"location":"getting-started/installation/#6-celery-worker-issues","title":"6. Celery Worker Issues","text":"<pre><code># Check Celery status\ncelery -A config inspect active\n\n# Restart Celery worker\npkill -f celery\ncelery -A config worker -l info -B\n</code></pre>"},{"location":"getting-started/installation/#log-files","title":"Log Files","text":"<p>Check these log files for errors:</p> <ul> <li>Django: <code>logs/django.log</code></li> <li>Celery: <code>logs/celery.log</code></li> <li>Nginx: <code>/var/log/nginx/error.log</code></li> <li>System: <code>/var/log/syslog</code></li> </ul>"},{"location":"getting-started/installation/#performance-issues","title":"Performance Issues","text":""},{"location":"getting-started/installation/#1-slow-database-queries","title":"1. Slow Database Queries","text":"<pre><code># Enable query logging\n# Add to settings.py:\nLOGGING = {\n    'version': 1,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django.db.backends': {\n            'level': 'DEBUG',\n            'handlers': ['console'],\n        },\n    },\n}\n</code></pre>"},{"location":"getting-started/installation/#2-memory-issues","title":"2. Memory Issues","text":"<pre><code># Monitor memory usage\nhtop\nfree -h\n\n# Optimize Celery worker memory\n# Add to settings.py:\nCELERY_WORKER_MAX_MEMORY_PER_CHILD = 200000  # 200MB\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configuration Guide - Configure API keys and settings</li> <li>Quick Start Guide - Run your first data sync</li> <li>Feature Documentation - Learn about platform features</li> <li>Admin Guide - Set up administrative functions</li> </ol>"},{"location":"getting-started/installation/#support","title":"Support","text":"<p>If you encounter issues during installation:</p> <ol> <li>Check the logs for specific error messages</li> <li>Verify prerequisites are installed correctly</li> <li>Review environment variables are set properly</li> <li>Check network connectivity for API access</li> <li>Join our community for additional support</li> </ol> <p>Ready to configure your installation? Check out the Configuration Guide next!</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":""},{"location":"getting-started/quick-start/#overview","title":"Overview","text":"<p>This guide will help you get up and running with MusicChartsAI quickly. Follow these steps to start using the platform.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have: - Installation completed - Configuration set up - API keys for Soundcharts and ACRCloud</p>"},{"location":"getting-started/quick-start/#first-steps","title":"First Steps","text":""},{"location":"getting-started/quick-start/#1-access-the-dashboard","title":"1. Access the Dashboard","text":"<ol> <li>Navigate to your MusicChartsAI instance</li> <li>Log in with your admin credentials</li> <li>You'll see the main dashboard with analytics</li> </ol>"},{"location":"getting-started/quick-start/#2-configure-your-first-chart","title":"2. Configure Your First Chart","text":"<ol> <li>Go to Admin \u2192 Charts</li> <li>Click Add Chart</li> <li>Enter chart details:</li> <li>Name: Chart display name</li> <li>Platform: Select from dropdown</li> <li>Country: Chart country</li> <li>Frequency: How often chart updates</li> </ol>"},{"location":"getting-started/quick-start/#3-start-data-synchronization","title":"3. Start Data Synchronization","text":"<ol> <li>Go to Admin \u2192 Chart Sync Schedules</li> <li>Click Add Schedule</li> <li>Select your chart</li> <li>Choose sync frequency</li> <li>Enable Sync Immediately for first run</li> </ol>"},{"location":"getting-started/quick-start/#4-monitor-progress","title":"4. Monitor Progress","text":"<ol> <li>Go to Tasks in the sidebar</li> <li>View running sync tasks</li> <li>Check Chart Sync Executions for detailed logs</li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Features</li> <li>Learn about Background Tasks</li> <li>Set up API Access</li> </ul> <p>Need help? Check out our Troubleshooting Guide or contact support.</p>"}]}
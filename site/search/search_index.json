{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MusicChartsAI Documentation","text":"<p>Welcome to the comprehensive documentation for MusicChartsAI - a powerful music analytics platform that integrates with Soundcharts and ACRCloud APIs to provide detailed music chart analysis, audience insights, and fraud detection capabilities.</p>"},{"location":"#what-is-musicchartsai","title":"\ud83c\udfb5 What is MusicChartsAI?","text":"<p>MusicChartsAI is a Django-based web application that provides:</p> <ul> <li>Music Chart Analytics: Real-time tracking of music charts across multiple platforms</li> <li>Audience Insights: Time-series analysis of track audience data</li> <li>Fraud Detection: ACRCloud-powered audio analysis and copyright detection</li> <li>Dynamic Data Management: Flexible tables and API endpoints for data manipulation</li> <li>Background Task Processing: Automated data synchronization using Celery</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get up and running with MusicChartsAI in minutes:</p> <ol> <li>Installation - Set up your development environment</li> <li>Configuration - Configure API keys and settings</li> <li>Quick Start Guide - Run your first data sync</li> </ol>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - Complete setup guide</li> <li>Configuration - Environment and API configuration</li> <li>Quick Start - First steps with the platform</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Overview - Platform capabilities and architecture</li> <li>Soundcharts Integration - Music chart data management</li> <li>ACRCloud Analysis - Audio analysis and fraud detection</li> <li>Dynamic Tables &amp; API - Flexible data management</li> <li>Chart Management - Chart synchronization and monitoring</li> <li>User Management - Authentication and authorization</li> <li>Background Tasks - Celery task processing and automation</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Overview - API architecture and authentication</li> <li>External APIs - Soundcharts and ACRCloud integration</li> <li>Internal APIs - REST API endpoints (coming soon)</li> <li>Authentication - API security and access control</li> </ul>"},{"location":"#admin-guide","title":"Admin Guide","text":"<ul> <li>Dashboard Overview - Admin interface navigation</li> <li>Data Management - Managing charts, tracks, and rankings</li> <li>Task Monitoring - Background task management</li> <li>User Administration - User management and permissions</li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<ul> <li>Production Setup - Production deployment guide</li> <li>Docker Deployment - Containerized deployment</li> <li>CI/CD Pipeline - Automated deployment</li> <li>Environment Configuration - Environment variables and settings</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Architecture - System architecture and design patterns</li> <li>Contributing - Contributing to the project</li> <li>Testing - Testing strategies and tools</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>MusicChartsAI is built on a modern Django architecture with the following key components:</p> <pre><code>graph TB\n    A[Frontend Dashboard] --&gt; B[Django Views]\n    B --&gt; C[Django Models]\n    C --&gt; D[Database]\n\n    E[Celery Workers] --&gt; F[Background Tasks]\n    F --&gt; G[Soundcharts API]\n    F --&gt; H[ACRCloud API]\n\n    I[Admin Interface] --&gt; B\n    J[REST API] --&gt; B\n\n    K[Redis] --&gt; E\n    L[File Storage] --&gt; C</code></pre>"},{"location":"#key-technologies","title":"Key Technologies","text":"<ul> <li>Backend: Django 5.2 with Python 3.13</li> <li>Frontend: Tailwind CSS with Flowbite components</li> <li>Task Processing: Celery with Redis message broker</li> <li>Database: SQLite (default), PostgreSQL/MySQL supported</li> <li>API Integration: Soundcharts API, ACRCloud API</li> <li>Charts: ApexCharts for data visualization</li> </ul>"},{"location":"#core-features","title":"\ud83d\udd27 Core Features","text":""},{"location":"#music-chart-management","title":"Music Chart Management","text":"<ul> <li>Multi-Platform Support: Spotify, Apple Music, YouTube, and more</li> <li>Automated Synchronization: Scheduled chart data updates</li> <li>Historical Data: Complete chart ranking history</li> <li>Real-time Monitoring: Live sync status and health metrics</li> </ul>"},{"location":"#audience-analytics","title":"Audience Analytics","text":"<ul> <li>Time-Series Data: Track audience growth over time</li> <li>Multi-Platform Comparison: Compare performance across platforms</li> <li>Interactive Charts: Dynamic visualizations with Chart.js</li> <li>Data Export: CSV and JSON export capabilities</li> </ul>"},{"location":"#audio-analysis","title":"Audio Analysis","text":"<ul> <li>Fraud Detection: ACRCloud-powered copyright detection</li> <li>Cover Detection: Identify cover versions of existing songs</li> <li>Lyrics Analysis: Content similarity analysis</li> <li>Risk Assessment: Automated risk scoring and classification</li> </ul>"},{"location":"#background-processing","title":"Background Processing","text":"<ul> <li>Celery Integration: Asynchronous task processing</li> <li>Task Monitoring: Real-time task status and progress</li> <li>Error Handling: Comprehensive retry mechanisms</li> <li>Scalable Architecture: Horizontal scaling support</li> </ul>"},{"location":"#dashboard-features","title":"\ud83d\udcca Dashboard Features","text":"<p>The MusicChartsAI dashboard provides comprehensive analytics:</p> <ul> <li>Weekly Rankings: Chart rankings fetched over time</li> <li>Platform Performance: Top-performing music platforms</li> <li>Track Analytics: Most popular tracks across charts</li> <li>System Health: Chart synchronization status and metrics</li> <li>Task Management: Background task monitoring and control</li> </ul>"},{"location":"#security-authentication","title":"\ud83d\udd10 Security &amp; Authentication","text":"<ul> <li>Session-based Authentication: Secure user sessions</li> <li>Role-based Access: Admin and user permission levels</li> <li>API Security: Token-based authentication for API endpoints</li> <li>Data Protection: Secure handling of sensitive API keys</li> </ul>"},{"location":"#getting-help","title":"\ud83d\ude80 Getting Help","text":"<ul> <li>Documentation: Comprehensive guides for all features</li> <li>API Reference: Complete API documentation</li> <li>Troubleshooting: Common issues and solutions</li> <li>Community: Join our Discord community for support</li> </ul>"},{"location":"#roadmap","title":"\ud83d\udcc8 Roadmap","text":""},{"location":"#upcoming-features","title":"Upcoming Features","text":"<ul> <li>Advanced Analytics: Machine learning-powered insights</li> <li>Real-time Updates: WebSocket-based live data</li> <li>Mobile App: Native mobile application</li> <li>API Marketplace: Third-party integrations</li> <li>Enterprise Features: Advanced reporting and analytics</li> </ul> <p>Ready to get started? Check out our Installation Guide to set up your MusicChartsAI instance!</p>"},{"location":"admin/dashboard-overview/","title":"Dashboard Overview","text":""},{"location":"admin/dashboard-overview/#admin-interface","title":"Admin Interface","text":"<p>Overview of the MusicChartsAI admin dashboard.</p>"},{"location":"admin/dashboard-overview/#navigation","title":"Navigation","text":"<ul> <li>Charts management</li> <li>Task monitoring</li> <li>User administration</li> <li>Data management</li> </ul> <p>Detailed admin guide coming soon.</p>"},{"location":"admin/data-management/","title":"Data Management","text":""},{"location":"admin/task-monitoring/","title":"Task Monitoring","text":""},{"location":"admin/user-administration/","title":"User Administration","text":""},{"location":"api/authentication/","title":"Authentication","text":""},{"location":"api/authentication/#api-authentication","title":"API Authentication","text":"<p>Authentication documentation coming soon.</p> <p>Coming soon.</p>"},{"location":"api/external-apis/","title":"External APIs","text":""},{"location":"api/external-apis/#soundcharts-api","title":"Soundcharts API","text":"<p>Integration with Soundcharts for music chart data.</p>"},{"location":"api/external-apis/#acrcloud-api","title":"ACRCloud API","text":"<p>Integration with ACRCloud for audio analysis.</p> <p>Detailed API documentation coming soon.</p>"},{"location":"api/internal-apis/","title":"Internal APIs","text":""},{"location":"api/internal-apis/#rest-api-endpoints","title":"REST API Endpoints","text":"<p>API documentation will be added when features are complete.</p> <p>Coming soon.</p>"},{"location":"api/overview/","title":"API Overview","text":""},{"location":"api/overview/#overview","title":"Overview","text":"<p>API documentation for MusicChartsAI platform.</p>"},{"location":"api/overview/#external-apis","title":"External APIs","text":"<ul> <li>Soundcharts API integration</li> <li>ACRCloud API integration</li> </ul>"},{"location":"api/overview/#internal-apis","title":"Internal APIs","text":"<p>Coming soon when features are complete.</p>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>Authentication documentation coming soon.</p> <p>This section will be expanded with complete API documentation.</p>"},{"location":"deployment/ci-cd-pipeline/","title":"CI/CD Pipeline","text":""},{"location":"deployment/ci-cd-pipeline/#overview","title":"Overview","text":"<p>This guide covers setting up Continuous Integration and Continuous Deployment (CI/CD) pipelines for MusicChartsAI using Render, GitHub Actions, and other modern deployment platforms. These pipelines automate testing, building, and deploying your application to production environments.</p>"},{"location":"deployment/ci-cd-pipeline/#render-deployment","title":"Render Deployment","text":""},{"location":"deployment/ci-cd-pipeline/#overview_1","title":"Overview","text":"<p>Render is a streamlined cloud hosting service that simplifies deployment and hosting experiences. MusicChartsAI includes pre-configured deployment scripts and blueprints for seamless Render deployment.</p>"},{"location":"deployment/ci-cd-pipeline/#prerequisites","title":"Prerequisites","text":"<ul> <li>Render account</li> <li>GitHub repository with your MusicChartsAI code</li> <li>Environment variables configured</li> </ul>"},{"location":"deployment/ci-cd-pipeline/#deployment-process","title":"Deployment Process","text":""},{"location":"deployment/ci-cd-pipeline/#1-connect-your-repository","title":"1. Connect Your Repository","text":"<ol> <li>Create Render Account: Sign up for a free Render account</li> <li>Connect GitHub: Link your GitHub repository to Render</li> <li>Select Repository: Choose your MusicChartsAI repository</li> </ol>"},{"location":"deployment/ci-cd-pipeline/#2-configure-deployment-settings","title":"2. Configure Deployment Settings","text":"<p>Render uses the pre-configured <code>render.yaml</code> file to define deployment parameters:</p> <pre><code>services:\n  - type: web\n    name: musiccharts-ai\n    plan: starter\n    env: python\n    region: frankfurt  # Use same region as your database\n    buildCommand: \"./build.sh\"\n    startCommand: \"gunicorn config.wsgi:application\"\n    envVars:\n      - key: DEBUG\n        value: False\n      - key: SECRET_KEY\n        generateValue: true\n      - key: WEB_CONCURRENCY\n        value: 4\n      - key: DATABASE_URL\n        fromDatabase:\n          name: musiccharts-db\n          property: connectionString\n      - key: REDIS_URL\n        fromService:\n          type: redis\n          name: musiccharts-redis\n          property: connectionString\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#3-environment-variables","title":"3. Environment Variables","text":"<p>Configure the following environment variables in Render:</p> <p>Required Variables: <pre><code>DEBUG=False\nSECRET_KEY=your-secret-key\nDATABASE_URL=your-database-url\nREDIS_URL=your-redis-url\nCELERY_BROKER_URL=your-redis-url\nALLOWED_HOSTS=your-render-app-url.onrender.com\n</code></pre></p> <p>API Keys (Optional): <pre><code>ACR_CLOUD_API_KEY=your-acr-cloud-key\nACR_CLOUD_API_SECRET=your-acr-cloud-secret\nACR_CLOUD_API_URL=your-acr-cloud-url\nSOUNDCHARTS_APP_ID=your-soundcharts-app-id\nSOUNDCHARTS_API_KEY=your-soundcharts-api-key\n</code></pre></p>"},{"location":"deployment/ci-cd-pipeline/#4-database-setup","title":"4. Database Setup","text":"<p>Create a PostgreSQL database in Render:</p> <ol> <li>Go to Render Dashboard</li> <li>Click \"New\" \u2192 \"PostgreSQL\"</li> <li>Configure database settings</li> <li>Note the connection string</li> </ol>"},{"location":"deployment/ci-cd-pipeline/#5-redis-setup","title":"5. Redis Setup","text":"<p>Create a Redis instance for caching and Celery:</p> <ol> <li>Go to Render Dashboard</li> <li>Click \"New\" \u2192 \"Redis\"</li> <li>Configure Redis settings</li> <li>Note the connection string</li> </ol>"},{"location":"deployment/ci-cd-pipeline/#build-script-configuration","title":"Build Script Configuration","text":"<p>The <code>build.sh</code> script handles the deployment process:</p> <pre><code>#!/usr/bin/env bash\n# exit on error\nset -o errexit\n\n# Install &amp; Execute WebPack\nnpm i\nnpm run build\n\n# Install Python modules\npython -m pip install --upgrade pip\npip install -r requirements.txt\n\n# Collect Static Files\npython manage.py collectstatic --no-input\n\n# Run Database Migrations\npython manage.py makemigrations\npython manage.py migrate\n\n# Create superuser (optional)\n# python manage.py createsuperuser --noinput\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#render-blueprint-specification","title":"Render Blueprint Specification","text":"<p>Extend your <code>render.yaml</code> for more advanced configurations:</p> <pre><code>services:\n  - type: web\n    name: musiccharts-ai\n    plan: starter\n    env: python\n    region: frankfurt\n    buildCommand: \"./build.sh\"\n    startCommand: \"gunicorn config.wsgi:application\"\n    healthCheckPath: \"/health/\"\n    autoDeploy: true\n    envVars:\n      - key: DEBUG\n        value: False\n      - key: SECRET_KEY\n        generateValue: true\n      - key: WEB_CONCURRENCY\n        value: 4\n      - key: DATABASE_URL\n        fromDatabase:\n          name: musiccharts-db\n          property: connectionString\n      - key: REDIS_URL\n        fromService:\n          type: redis\n          name: musiccharts-redis\n          property: connectionString\n\ndatabases:\n  - name: musiccharts-db\n    plan: starter\n    region: frankfurt\n\n  - name: musiccharts-redis\n    type: redis\n    plan: starter\n    region: frankfurt\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#github-actions-cicd","title":"GitHub Actions CI/CD","text":""},{"location":"deployment/ci-cd-pipeline/#overview_2","title":"Overview","text":"<p>GitHub Actions provides powerful CI/CD capabilities directly integrated with your repository. This setup includes automated testing, building, and deployment workflows.</p>"},{"location":"deployment/ci-cd-pipeline/#workflow-configuration","title":"Workflow Configuration","text":"<p>Create <code>.github/workflows/deploy.yml</code>:</p> <pre><code>name: Deploy to Production\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n      redis:\n        image: redis:7\n        options: &gt;-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.13'\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n\n    - name: Install Python dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install pytest pytest-django\n\n    - name: Install Node.js dependencies\n      run: |\n        npm install\n\n    - name: Build frontend assets\n      run: |\n        npm run build\n\n    - name: Run Django checks\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n        REDIS_URL: redis://localhost:6379/0\n        SECRET_KEY: test-secret-key\n        DEBUG: False\n      run: |\n        python manage.py check\n        python manage.py makemigrations --check\n        python manage.py collectstatic --noinput\n\n    - name: Run tests\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n        REDIS_URL: redis://localhost:6379/0\n        SECRET_KEY: test-secret-key\n        DEBUG: False\n      run: |\n        python manage.py test\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Deploy to Render\n      uses: johnbeynon/render-deploy-action@v0.0.8\n      with:\n        service-id: ${{ secrets.RENDER_SERVICE_ID }}\n        api-key: ${{ secrets.RENDER_API_KEY }}\n        wait-for-success: true\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#environment-secrets","title":"Environment Secrets","text":"<p>Configure the following secrets in your GitHub repository:</p> <ol> <li>Go to Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Add the following secrets:</li> </ol> <pre><code>RENDER_SERVICE_ID=your-render-service-id\nRENDER_API_KEY=your-render-api-key\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#advanced-github-actions-workflow","title":"Advanced GitHub Actions Workflow","text":"<p>For more comprehensive CI/CD, use this enhanced workflow:</p> <pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  PYTHON_VERSION: '3.13'\n  NODE_VERSION: '18'\n\njobs:\n  lint-and-format:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ env.PYTHON_VERSION }}\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n\n    - name: Install Python dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install flake8 black isort\n        pip install -r requirements.txt\n\n    - name: Install Node.js dependencies\n      run: npm install\n\n    - name: Run Python linting\n      run: |\n        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n        black --check .\n        isort --check-only .\n\n    - name: Run JavaScript linting\n      run: npm run lint\n\n  test:\n    runs-on: ubuntu-latest\n    needs: lint-and-format\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n      redis:\n        image: redis:7\n        options: &gt;-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ env.PYTHON_VERSION }}\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install pytest pytest-django pytest-cov\n        npm install\n\n    - name: Build frontend assets\n      run: npm run build\n\n    - name: Run Django checks\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n        REDIS_URL: redis://localhost:6379/0\n        SECRET_KEY: test-secret-key\n        DEBUG: False\n      run: |\n        python manage.py check\n        python manage.py makemigrations --check\n        python manage.py collectstatic --noinput\n\n    - name: Run tests with coverage\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n        REDIS_URL: redis://localhost:6379/0\n        SECRET_KEY: test-secret-key\n        DEBUG: False\n      run: |\n        pytest --cov=. --cov-report=xml --cov-report=html\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        flags: unittests\n        name: codecov-umbrella\n\n  security-scan:\n    runs-on: ubuntu-latest\n    needs: lint-and-format\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ env.PYTHON_VERSION }}\n\n    - name: Install security tools\n      run: |\n        python -m pip install --upgrade pip\n        pip install bandit safety\n\n    - name: Run security scan\n      run: |\n        bandit -r . -f json -o bandit-report.json\n        safety check --json --output safety-report.json\n\n    - name: Upload security reports\n      uses: actions/upload-artifact@v3\n      with:\n        name: security-reports\n        path: |\n          bandit-report.json\n          safety-report.json\n\n  deploy-staging:\n    needs: [test, security-scan]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n    environment: staging\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Deploy to Staging\n      uses: johnbeynon/render-deploy-action@v0.0.8\n      with:\n        service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}\n        api-key: ${{ secrets.RENDER_API_KEY }}\n        wait-for-success: true\n\n    - name: Run staging tests\n      run: |\n        curl -f ${{ secrets.STAGING_URL }}/health/ || exit 1\n\n  deploy-production:\n    needs: [test, security-scan]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: production\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Deploy to Production\n      uses: johnbeynon/render-deploy-action@v0.0.8\n      with:\n        service-id: ${{ secrets.RENDER_SERVICE_ID }}\n        api-key: ${{ secrets.RENDER_API_KEY }}\n        wait-for-success: true\n\n    - name: Run production health check\n      run: |\n        curl -f ${{ secrets.PRODUCTION_URL }}/health/ || exit 1\n\n    - name: Notify deployment\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#deployments'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#other-deployment-platforms","title":"Other Deployment Platforms","text":""},{"location":"deployment/ci-cd-pipeline/#heroku-deployment","title":"Heroku Deployment","text":"<p>For Heroku deployment, create a <code>Procfile</code>:</p> <pre><code>web: gunicorn config.wsgi:application --log-file -\nworker: celery -A config worker -l info\nbeat: celery -A config beat -l info\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#railway-deployment","title":"Railway Deployment","text":"<p>Create <code>railway.json</code>:</p> <pre><code>{\n  \"build\": {\n    \"builder\": \"NIXPACKS\"\n  },\n  \"deploy\": {\n    \"startCommand\": \"gunicorn config.wsgi:application\",\n    \"healthcheckPath\": \"/health/\",\n    \"healthcheckTimeout\": 100,\n    \"restartPolicyType\": \"ON_FAILURE\",\n    \"restartPolicyMaxRetries\": 10\n  }\n}\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#digitalocean-app-platform","title":"DigitalOcean App Platform","text":"<p>Create <code>.do/app.yaml</code>:</p> <pre><code>name: musiccharts-ai\nservices:\n- name: web\n  source_dir: /\n  github:\n    repo: your-username/musiccharts-ai\n    branch: main\n  run_command: gunicorn config.wsgi:application\n  environment_slug: python\n  instance_count: 1\n  instance_size_slug: basic-xxs\n  routes:\n  - path: /\n  envs:\n  - key: DEBUG\n    value: \"False\"\n  - key: SECRET_KEY\n    value: ${SECRET_KEY}\ndatabases:\n- name: musiccharts-db\n  engine: PG\n  version: \"15\"\n- name: musiccharts-redis\n  engine: REDIS\n  version: \"7\"\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#environment-management","title":"Environment Management","text":""},{"location":"deployment/ci-cd-pipeline/#environment-specific-configurations","title":"Environment-Specific Configurations","text":"<p>Create environment-specific settings files:</p> <p><code>config/settings/staging.py</code>: <pre><code>from .base import *\n\nDEBUG = True\nALLOWED_HOSTS = ['staging.yourdomain.com']\n\n# Staging-specific database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'musiccharts_staging',\n        'USER': 'staging_user',\n        'PASSWORD': os.environ.get('STAGING_DB_PASSWORD'),\n        'HOST': 'staging-db-host',\n        'PORT': '5432',\n    }\n}\n\n# Staging-specific Redis\nREDIS_URL = os.environ.get('STAGING_REDIS_URL')\n</code></pre></p> <p><code>config/settings/production.py</code>: <pre><code>from .base import *\n\nDEBUG = False\nALLOWED_HOSTS = ['yourdomain.com', 'www.yourdomain.com']\n\n# Production-specific settings\nSECURE_SSL_REDIRECT = True\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\n\n# Production database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'musiccharts_production',\n        'USER': 'production_user',\n        'PASSWORD': os.environ.get('PRODUCTION_DB_PASSWORD'),\n        'HOST': 'production-db-host',\n        'PORT': '5432',\n    }\n}\n\n# Production Redis\nREDIS_URL = os.environ.get('PRODUCTION_REDIS_URL')\n</code></pre></p>"},{"location":"deployment/ci-cd-pipeline/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"deployment/ci-cd-pipeline/#health-checks","title":"Health Checks","text":"<p>Implement health check endpoints:</p> <pre><code># apps/core/views.py\nfrom django.http import JsonResponse\nfrom django.db import connection\nfrom django.core.cache import cache\nimport redis\n\ndef health_check(request):\n    \"\"\"Comprehensive health check endpoint.\"\"\"\n    health_status = {\n        'status': 'healthy',\n        'timestamp': timezone.now().isoformat(),\n        'services': {}\n    }\n\n    # Database check\n    try:\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT 1\")\n        health_status['services']['database'] = 'healthy'\n    except Exception as e:\n        health_status['services']['database'] = f'unhealthy: {str(e)}'\n        health_status['status'] = 'unhealthy'\n\n    # Redis check\n    try:\n        cache.set('health_check', 'ok', 10)\n        if cache.get('health_check') == 'ok':\n            health_status['services']['redis'] = 'healthy'\n        else:\n            health_status['services']['redis'] = 'unhealthy'\n            health_status['status'] = 'unhealthy'\n    except Exception as e:\n        health_status['services']['redis'] = f'unhealthy: {str(e)}'\n        health_status['status'] = 'unhealthy'\n\n    # Celery check\n    try:\n        from celery import current_app\n        inspect = current_app.control.inspect()\n        stats = inspect.stats()\n        if stats:\n            health_status['services']['celery'] = 'healthy'\n        else:\n            health_status['services']['celery'] = 'unhealthy'\n            health_status['status'] = 'unhealthy'\n    except Exception as e:\n        health_status['services']['celery'] = f'unhealthy: {str(e)}'\n        health_status['status'] = 'unhealthy'\n\n    status_code = 200 if health_status['status'] == 'healthy' else 503\n    return JsonResponse(health_status, status=status_code)\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#deployment-notifications","title":"Deployment Notifications","text":"<p>Set up deployment notifications using Slack:</p> <pre><code>- name: Notify Slack\n  uses: 8398a7/action-slack@v3\n  with:\n    status: ${{ job.status }}\n    channel: '#deployments'\n    webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n    fields: repo,message,commit,author,action,eventName,ref,workflow\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#best-practices","title":"Best Practices","text":""},{"location":"deployment/ci-cd-pipeline/#security","title":"Security","text":"<ol> <li>Environment Variables: Never commit secrets to version control</li> <li>Secret Management: Use platform-specific secret management</li> <li>Access Control: Implement proper access controls</li> <li>SSL/TLS: Always use HTTPS in production</li> <li>Regular Updates: Keep dependencies updated</li> </ol>"},{"location":"deployment/ci-cd-pipeline/#performance","title":"Performance","text":"<ol> <li>Build Optimization: Optimize build times and image sizes</li> <li>Caching: Implement proper caching strategies</li> <li>Database Optimization: Optimize database queries and indexes</li> <li>CDN: Use CDN for static assets</li> <li>Monitoring: Implement comprehensive monitoring</li> </ol>"},{"location":"deployment/ci-cd-pipeline/#reliability","title":"Reliability","text":"<ol> <li>Health Checks: Implement comprehensive health checks</li> <li>Rollback Strategy: Have rollback procedures in place</li> <li>Backup Strategy: Implement regular backups</li> <li>Disaster Recovery: Plan for disaster recovery scenarios</li> <li>Testing: Comprehensive testing before deployment</li> </ol>"},{"location":"deployment/ci-cd-pipeline/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/ci-cd-pipeline/#common-issues","title":"Common Issues","text":"<ol> <li>Build Failures</li> <li>Check build logs for specific errors</li> <li>Verify all dependencies are correctly specified</li> <li> <p>Ensure environment variables are set</p> </li> <li> <p>Deployment Failures</p> </li> <li>Check deployment logs</li> <li>Verify service configurations</li> <li> <p>Test health check endpoints</p> </li> <li> <p>Environment Issues</p> </li> <li>Verify environment variables</li> <li>Check database connections</li> <li>Validate external service integrations</li> </ol>"},{"location":"deployment/ci-cd-pipeline/#debug-commands","title":"Debug Commands","text":"<pre><code># Check deployment status\ncurl -f https://your-app-url/health/\n\n# View deployment logs\n# (Platform-specific commands)\n\n# Test database connection\npython manage.py dbshell\n\n# Test Redis connection\npython manage.py shell\n&gt;&gt;&gt; from django.core.cache import cache\n&gt;&gt;&gt; cache.set('test', 'ok')\n&gt;&gt;&gt; cache.get('test')\n</code></pre>"},{"location":"deployment/ci-cd-pipeline/#conclusion","title":"Conclusion","text":"<p>A well-configured CI/CD pipeline ensures reliable, automated deployments while maintaining code quality and security. Choose the deployment platform that best fits your needs and implement comprehensive monitoring and alerting to maintain system reliability.</p> <p>For additional support, refer to the platform-specific documentation or contact the development team.</p>"},{"location":"deployment/docker-deployment/","title":"Docker Deployment","text":""},{"location":"deployment/docker-deployment/#overview","title":"Overview","text":"<p>Docker deployment provides a streamlined way to containerize and deploy the MusicChartsAI application. This guide covers Docker configuration, containerization, and deployment using Docker Compose for a complete multi-container setup.</p>"},{"location":"deployment/docker-deployment/#docker-configuration","title":"Docker Configuration","text":""},{"location":"deployment/docker-deployment/#understanding-docker-configuration-files","title":"Understanding Docker Configuration Files","text":"<p>MusicChartsAI uses two main configuration files for Docker deployment:</p> <ol> <li><code>Dockerfile</code> - Defines the application container image</li> <li><code>docker-compose.yml</code> - Orchestrates multi-container deployment</li> </ol>"},{"location":"deployment/docker-deployment/#dockerfile-configuration","title":"Dockerfile Configuration","text":"<p>The <code>Dockerfile</code> defines a multi-stage build process:</p> <pre><code>FROM python:3.13.6\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --upgrade pip\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\n# Install Node.js 22 and npm\nRUN set -uex; \\\n    apt-get update; \\\n    apt-get install -y ca-certificates curl gnupg; \\\n    mkdir -p /etc/apt/keyrings; \\\n    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key \\\n     | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg; \\\n    NODE_MAJOR=22; \\\n    echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" \\\n     &gt; /etc/apt/sources.list.d/nodesource.list; \\\n    apt-get update; \\\n    apt-get install nodejs -y;\n\n# Install modules and build assets\nRUN npm i\nRUN npm run build\n\n# Django setup\nRUN python manage.py collectstatic --no-input\nRUN python manage.py makemigrations\nRUN python manage.py migrate\n\n# Start application with Gunicorn\nCMD [\"gunicorn\", \"--config\", \"gunicorn-cfg.py\", \"config.wsgi\"]\n</code></pre> <p>Build Stages:</p> <ol> <li>Python Environment Setup</li> <li>Uses Python 3.13.6 base image</li> <li>Sets environment variables for optimal performance</li> <li> <p>Installs Python dependencies from requirements.txt</p> </li> <li> <p>Node.js Environment Setup</p> </li> <li>Installs Node.js 22 and npm</li> <li>Installs frontend dependencies</li> <li> <p>Builds webpack assets</p> </li> <li> <p>Application Preparation</p> </li> <li>Collects Django static files</li> <li>Creates and applies database migrations</li> <li>Configures Gunicorn as the WSGI server</li> </ol>"},{"location":"deployment/docker-deployment/#docker-compose-configuration","title":"Docker Compose Configuration","text":"<p>The <code>docker-compose.yml</code> orchestrates multiple services:</p> <pre><code>version: \"3.8\"\n\nservices:\n  # Main Django Application\n  musiccharts-app:\n    container_name: musiccharts_app\n    restart: always\n    build: .\n    environment:\n      - DEBUG=False\n      - DATABASE_URL=postgresql://user:password@db:5432/musiccharts_db\n      - REDIS_URL=redis://redis:6379/0\n      - CELERY_BROKER_URL=redis://redis:6379/0\n    volumes:\n      - ./media:/app/media\n      - ./staticfiles:/app/staticfiles\n    networks:\n      - app_network\n      - db_network\n    depends_on:\n      - db\n      - redis\n\n  # PostgreSQL Database\n  db:\n    container_name: musiccharts_db\n    image: postgres:15\n    restart: always\n    environment:\n      POSTGRES_DB: musiccharts_db\n      POSTGRES_USER: musiccharts_user\n      POSTGRES_PASSWORD: secure_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./backups:/backups\n    networks:\n      - db_network\n    ports:\n      - \"5432:5432\"\n\n  # Redis Cache and Message Broker\n  redis:\n    container_name: musiccharts_redis\n    image: redis:7-alpine\n    restart: always\n    volumes:\n      - redis_data:/data\n    networks:\n      - app_network\n    ports:\n      - \"6379:6379\"\n\n  # Celery Worker\n  celery-worker:\n    container_name: musiccharts_celery_worker\n    build: .\n    restart: always\n    command: celery -A config worker -l info\n    environment:\n      - DEBUG=False\n      - DATABASE_URL=postgresql://user:password@db:5432/musiccharts_db\n      - REDIS_URL=redis://redis:6379/0\n      - CELERY_BROKER_URL=redis://redis:6379/0\n    volumes:\n      - ./media:/app/media\n    networks:\n      - app_network\n      - db_network\n    depends_on:\n      - db\n      - redis\n\n  # Celery Beat Scheduler\n  celery-beat:\n    container_name: musiccharts_celery_beat\n    build: .\n    restart: always\n    command: celery -A config beat -l info\n    environment:\n      - DEBUG=False\n      - DATABASE_URL=postgresql://user:password@db:5432/musiccharts_db\n      - REDIS_URL=redis://redis:6379/0\n      - CELERY_BROKER_URL=redis://redis:6379/0\n    volumes:\n      - ./media:/app/media\n    networks:\n      - app_network\n      - db_network\n    depends_on:\n      - db\n      - redis\n\n  # Nginx Reverse Proxy\n  nginx:\n    container_name: musiccharts_nginx\n    image: nginx:alpine\n    restart: always\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/conf.d:/etc/nginx/conf.d\n      - ./staticfiles:/var/www/static\n      - ./media:/var/www/media\n      - ./ssl:/etc/nginx/ssl\n    networks:\n      - app_network\n    depends_on:\n      - musiccharts-app\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nnetworks:\n  app_network:\n    driver: bridge\n  db_network:\n    driver: bridge\n</code></pre> <p>Service Components:</p> <ol> <li>musiccharts-app: Main Django application</li> <li>db: PostgreSQL database</li> <li>redis: Redis cache and message broker</li> <li>celery-worker: Background task processing</li> <li>celery-beat: Scheduled task management</li> <li>nginx: Reverse proxy and static file serving</li> </ol>"},{"location":"deployment/docker-deployment/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/docker-deployment/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># Django Configuration\nDEBUG=False\nSECRET_KEY=your-very-secure-secret-key-here\nALLOWED_HOSTS=localhost,127.0.0.1,yourdomain.com\n\n# Database Configuration\nDATABASE_URL=postgresql://musiccharts_user:secure_password@db:5432/musiccharts_db\n\n# Redis Configuration\nREDIS_URL=redis://redis:6379/0\nCELERY_BROKER_URL=redis://redis:6379/0\nCELERY_RESULT_BACKEND=redis://redis:6379/0\n\n# Email Configuration\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n\n# API Keys\nACR_CLOUD_API_KEY=your_acr_cloud_key\nACR_CLOUD_API_SECRET=your_acr_cloud_secret\nACR_CLOUD_API_URL=your_acr_cloud_url\n\nSOUNDCHARTS_APP_ID=your_soundcharts_app_id\nSOUNDCHARTS_API_KEY=your_soundcharts_api_key\n\n# Site Configuration\nSITE_URL=http://localhost:8000\n</code></pre>"},{"location":"deployment/docker-deployment/#nginx-configuration","title":"Nginx Configuration","text":""},{"location":"deployment/docker-deployment/#main-nginx-configuration","title":"Main Nginx Configuration","text":"<p>Create <code>nginx/nginx.conf</code>:</p> <pre><code>user nginx;\nworker_processes auto;\n\nerror_log /var/log/nginx/error.log notice;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n\n    sendfile on;\n    tcp_nopush on;\n    keepalive_timeout 65;\n    gzip on;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n</code></pre>"},{"location":"deployment/docker-deployment/#site-configuration","title":"Site Configuration","text":"<p>Create <code>nginx/conf.d/musiccharts.conf</code>:</p> <pre><code>upstream django {\n    server musiccharts-app:8000;\n}\n\nserver {\n    listen 80;\n    server_name localhost yourdomain.com;\n\n    client_max_body_size 50M;\n\n    # Static files\n    location /static/ {\n        alias /var/www/static/;\n        expires 30d;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Media files\n    location /media/ {\n        alias /var/www/media/;\n        expires 30d;\n        add_header Cache-Control \"public\";\n    }\n\n    # Django application\n    location / {\n        proxy_pass http://django;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n    }\n\n    # Health check endpoint\n    location /health/ {\n        proxy_pass http://django;\n        access_log off;\n    }\n}\n</code></pre>"},{"location":"deployment/docker-deployment/#deployment-commands","title":"Deployment Commands","text":""},{"location":"deployment/docker-deployment/#build-and-start-services","title":"Build and Start Services","text":"<pre><code># Build and start all services\ndocker-compose up --build -d\n\n# View logs\ndocker-compose logs -f\n\n# Check service status\ndocker-compose ps\n</code></pre>"},{"location":"deployment/docker-deployment/#database-operations","title":"Database Operations","text":"<pre><code># Create superuser\ndocker-compose exec musiccharts-app python manage.py createsuperuser\n\n# Run migrations\ndocker-compose exec musiccharts-app python manage.py migrate\n\n# Collect static files\ndocker-compose exec musiccharts-app python manage.py collectstatic --noinput\n\n# Create database backup\ndocker-compose exec db pg_dump -U musiccharts_user musiccharts_db &gt; backup.sql\n</code></pre>"},{"location":"deployment/docker-deployment/#service-management","title":"Service Management","text":"<pre><code># Stop all services\ndocker-compose down\n\n# Stop and remove volumes (WARNING: This will delete all data)\ndocker-compose down -v\n\n# Restart specific service\ndocker-compose restart musiccharts-app\n\n# Scale celery workers\ndocker-compose up --scale celery-worker=3 -d\n\n# View service logs\ndocker-compose logs -f musiccharts-app\ndocker-compose logs -f celery-worker\ndocker-compose logs -f nginx\n</code></pre>"},{"location":"deployment/docker-deployment/#development-vs-production","title":"Development vs Production","text":""},{"location":"deployment/docker-deployment/#development-configuration","title":"Development Configuration","text":"<p>For development, use <code>docker-compose.dev.yml</code>:</p> <pre><code>version: \"3.8\"\n\nservices:\n  musiccharts-app:\n    build: .\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - .:/app\n      - ./media:/app/media\n    environment:\n      - DEBUG=True\n      - DATABASE_URL=postgresql://user:password@db:5432/musiccharts_db\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n      - redis\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: musiccharts_dev\n      POSTGRES_USER: dev_user\n      POSTGRES_PASSWORD: dev_password\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n</code></pre> <p>Development Commands:</p> <pre><code># Start development environment\ndocker-compose -f docker-compose.dev.yml up --build\n\n# Run tests\ndocker-compose -f docker-compose.dev.yml exec musiccharts-app python manage.py test\n\n# Run Django shell\ndocker-compose -f docker-compose.dev.yml exec musiccharts-app python manage.py shell\n</code></pre>"},{"location":"deployment/docker-deployment/#production-configuration","title":"Production Configuration","text":"<p>For production, ensure:</p> <ol> <li>Security Settings:</li> <li>Set <code>DEBUG=False</code></li> <li>Use strong secret keys</li> <li>Configure proper <code>ALLOWED_HOSTS</code></li> <li> <p>Enable SSL/HTTPS</p> </li> <li> <p>Performance Settings:</p> </li> <li>Use multiple Gunicorn workers</li> <li>Configure Redis caching</li> <li>Optimize database queries</li> <li> <p>Enable gzip compression</p> </li> <li> <p>Monitoring:</p> </li> <li>Set up log aggregation</li> <li>Monitor container health</li> <li>Configure alerts</li> <li>Regular backups</li> </ol>"},{"location":"deployment/docker-deployment/#sslhttps-configuration","title":"SSL/HTTPS Configuration","text":""},{"location":"deployment/docker-deployment/#using-lets-encrypt","title":"Using Let's Encrypt","text":"<pre><code># Install certbot\ndocker run -it --rm -v certbot-certs:/etc/letsencrypt -v certbot-webroot:/var/www/certbot certbot/certbot certonly --webroot -w /var/www/certbot -d yourdomain.com\n\n# Update nginx configuration for HTTPS\n# Add SSL configuration to nginx/conf.d/musiccharts.conf\n</code></pre>"},{"location":"deployment/docker-deployment/#ssl-nginx-configuration","title":"SSL Nginx Configuration","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name yourdomain.com;\n\n    ssl_certificate /etc/nginx/ssl/cert.pem;\n    ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n\n    # HSTS\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Rest of your configuration...\n}\n\n# Redirect HTTP to HTTPS\nserver {\n    listen 80;\n    server_name yourdomain.com;\n    return 301 https://$server_name$request_uri;\n}\n</code></pre>"},{"location":"deployment/docker-deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/docker-deployment/#container-monitoring","title":"Container Monitoring","text":"<pre><code># Monitor resource usage\ndocker stats\n\n# Check container health\ndocker-compose exec musiccharts-app python manage.py check\n\n# View application logs\ndocker-compose logs --tail=100 -f musiccharts-app\n</code></pre>"},{"location":"deployment/docker-deployment/#log-management","title":"Log Management","text":"<pre><code># Configure log rotation\n# Add to docker-compose.yml:\nlogging:\n  driver: \"json-file\"\n  options:\n    max-size: \"10m\"\n    max-file: \"3\"\n</code></pre>"},{"location":"deployment/docker-deployment/#health-checks","title":"Health Checks","text":"<p>Add health checks to your Dockerfile:</p> <pre><code># Add health check\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health/ || exit 1\n</code></pre>"},{"location":"deployment/docker-deployment/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment/docker-deployment/#database-backup","title":"Database Backup","text":"<pre><code># Create backup\ndocker-compose exec db pg_dump -U musiccharts_user musiccharts_db &gt; backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore backup\ndocker-compose exec -T db psql -U musiccharts_user musiccharts_db &lt; backup_file.sql\n</code></pre>"},{"location":"deployment/docker-deployment/#volume-backup","title":"Volume Backup","text":"<pre><code># Backup volumes\ndocker run --rm -v musiccharts_postgres_data:/data -v $(pwd):/backup alpine tar czf /backup/postgres_backup.tar.gz -C /data .\n\n# Restore volumes\ndocker run --rm -v musiccharts_postgres_data:/data -v $(pwd):/backup alpine tar xzf /backup/postgres_backup.tar.gz -C /data\n</code></pre>"},{"location":"deployment/docker-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker-deployment/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Container Won't Start <pre><code># Check logs\ndocker-compose logs musiccharts-app\n\n# Check configuration\ndocker-compose config\n</code></pre></p> </li> <li> <p>Database Connection Issues <pre><code># Test database connection\ndocker-compose exec musiccharts-app python manage.py dbshell\n\n# Check database status\ndocker-compose exec db pg_isready -U musiccharts_user\n</code></pre></p> </li> <li> <p>Static Files Not Loading <pre><code># Collect static files\ndocker-compose exec musiccharts-app python manage.py collectstatic --noinput\n\n# Check nginx configuration\ndocker-compose exec nginx nginx -t\n</code></pre></p> </li> <li> <p>Permission Issues <pre><code># Fix file permissions\nsudo chown -R $USER:$USER .\ndocker-compose exec musiccharts-app chown -R www-data:www-data /app/staticfiles\n</code></pre></p> </li> </ol>"},{"location":"deployment/docker-deployment/#useful-commands","title":"Useful Commands","text":"<pre><code># Clean up unused containers and images\ndocker system prune -a\n\n# View container resource usage\ndocker-compose top\n\n# Execute commands in running container\ndocker-compose exec musiccharts-app bash\n\n# Restart services in dependency order\ndocker-compose restart\n\n# Scale services\ndocker-compose up --scale celery-worker=3 -d\n</code></pre>"},{"location":"deployment/docker-deployment/#best-practices","title":"Best Practices","text":""},{"location":"deployment/docker-deployment/#security","title":"Security","text":"<ol> <li>Use non-root users in containers</li> <li>Keep images updated with security patches</li> <li>Use secrets management for sensitive data</li> <li>Enable firewall and network security</li> <li>Regular security audits of containers</li> </ol>"},{"location":"deployment/docker-deployment/#performance","title":"Performance","text":"<ol> <li>Optimize Dockerfile layers</li> <li>Use multi-stage builds to reduce image size</li> <li>Configure resource limits for containers</li> <li>Use health checks for better monitoring</li> <li>Implement proper caching strategies</li> </ol>"},{"location":"deployment/docker-deployment/#maintenance","title":"Maintenance","text":"<ol> <li>Regular backups of data and volumes</li> <li>Monitor resource usage and logs</li> <li>Update dependencies regularly</li> <li>Clean up unused containers and images</li> <li>Document configuration changes</li> </ol>"},{"location":"deployment/docker-deployment/#conclusion","title":"Conclusion","text":"<p>Docker deployment provides a robust, scalable solution for deploying MusicChartsAI. With proper configuration and monitoring, it ensures consistent deployment across different environments while maintaining high availability and performance.</p> <p>For additional support, refer to the project documentation or contact the development team.</p>"},{"location":"deployment/environment-configuration/","title":"Environment Configuration","text":""},{"location":"deployment/production-setup/","title":"Production Setup","text":""},{"location":"deployment/production-setup/#overview","title":"Overview","text":"<p>This guide provides comprehensive step-by-step instructions for deploying the MusicChartsAI Django application on Ubuntu 22.04 using automated deployment scripts and manual configurations. The deployment includes production-ready configurations for Gunicorn, Apache2, SSL certificates, and systemd services.</p>"},{"location":"deployment/production-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting the deployment, ensure you have:</p> <ol> <li>Ubuntu 22.04 server with root/sudo access</li> <li>Domain name pointing to your server</li> <li>PostgreSQL database configured</li> <li>Redis server running</li> <li>SSL certificates (Let's Encrypt recommended)</li> <li>Required services installed: Apache2, PostgreSQL, Redis, Gunicorn</li> </ol>"},{"location":"deployment/production-setup/#server-preparation","title":"Server Preparation","text":""},{"location":"deployment/production-setup/#create-application-user","title":"Create Application User","text":"<pre><code># Create dedicated user for the application\nsudo adduser --system --group --shell /bin/bash musiccharts\nsudo mkdir -p /opt/musiccharts\nsudo chown musiccharts:musiccharts /opt/musiccharts\n</code></pre>"},{"location":"deployment/production-setup/#install-system-dependencies","title":"Install System Dependencies","text":"<pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install required packages\nsudo apt install -y \\\n    python3 \\\n    python3-pip \\\n    python3-venv \\\n    python3-dev \\\n    libpq-dev \\\n    build-essential \\\n    curl \\\n    git \\\n    apache2 \\\n    redis-server \\\n    postgresql-client\n\n# Install Node.js 18.x\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre>"},{"location":"deployment/production-setup/#database-setup","title":"Database Setup","text":"<pre><code># Connect to PostgreSQL\nsudo -u postgres psql\n\n# Create database and user (replace with your values)\nCREATE DATABASE musiccharts_db;\nCREATE USER musiccharts_user WITH PASSWORD 'your_secure_password';\nGRANT ALL PRIVILEGES ON DATABASE musiccharts_db TO musiccharts_user;\nALTER USER musiccharts_user CREATEDB;\n\\q\n</code></pre>"},{"location":"deployment/production-setup/#application-deployment","title":"Application Deployment","text":""},{"location":"deployment/production-setup/#upload-application-files","title":"Upload Application Files","text":"<pre><code># Copy your application to the server\n# Option 1: Using git clone\nsudo -u musiccharts git clone &lt;your-repo-url&gt; /opt/musiccharts/app\n\n# Option 2: Using scp from your local machine\nscp -r /path/to/your/app user@server:/tmp/\nsudo mv /tmp/app /opt/musiccharts/\nsudo chown -R musiccharts:musiccharts /opt/musiccharts\n</code></pre>"},{"location":"deployment/production-setup/#configure-environment-variables","title":"Configure Environment Variables","text":"<pre><code># Copy and edit environment file\nsudo -u musiccharts cp /opt/musiccharts/app/env.sample /opt/musiccharts/app/.env\nsudo -u musiccharts nano /opt/musiccharts/app/.env\n</code></pre> <p>Required Environment Variables: <pre><code>DEBUG=False\nSECRET_KEY=your-very-secure-secret-key-here\n\n# Database Configuration\nDB_ENGINE=postgresql\nDB_HOST=localhost\nDB_NAME=musiccharts_db\nDB_USERNAME=musiccharts_user\nDB_PASS=your_secure_password\nDB_PORT=5432\n\n# Redis Configuration\nCELERY_BROKER=redis://localhost:6379\nCELERY_RESULT_BACKEND=redis://localhost:6379\n\n# Email Configuration\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n\n# SSL Configuration\nSECURE_SSL_REDIRECT=True\nSESSION_COOKIE_SECURE=True\nCSRF_COOKIE_SECURE=True\nSESSION_COOKIE_HTTPONLY=True\n\n# Site URL\nSITE_URL=https://yourdomain.com\n\n# API Keys (configure as needed)\nACR_CLOUD_API_KEY=your_acr_cloud_key\nACR_CLOUD_API_SECRET=your_acr_cloud_secret\nACR_CLOUD_API_URL=your_acr_cloud_url\n\nSOUNDCHARTS_APP_ID=your_soundcharts_app_id\nSOUNDCHARTS_API_KEY=your_soundcharts_api_key\n</code></pre></p>"},{"location":"deployment/production-setup/#automated-deployment","title":"Automated Deployment","text":""},{"location":"deployment/production-setup/#run-automated-deployment-script","title":"Run Automated Deployment Script","text":"<pre><code># Make script executable\nchmod +x /opt/musiccharts/app/deploy.sh\n\n# Execute deployment\ncd /opt/musiccharts/app\n./deploy.sh deploy\n</code></pre> <p>The script will: - Create necessary directories - Install Python dependencies - Build frontend assets - Run Django checks and migrations - Configure Gunicorn - Setup systemd services - Configure Apache - Start all services - Perform health checks</p>"},{"location":"deployment/production-setup/#manual-configuration-steps","title":"Manual Configuration Steps","text":""},{"location":"deployment/production-setup/#configure-apache-virtual-host","title":"Configure Apache Virtual Host","text":"<pre><code># Copy Apache configuration\nsudo cp /opt/musiccharts/app/apache-vhost.conf /etc/apache2/sites-available/musiccharts.conf\n\n# Edit the configuration file to update your domain\nsudo nano /etc/apache2/sites-available/musiccharts.conf\n\n# Enable required Apache modules\nsudo a2enmod ssl\nsudo a2enmod headers\nsudo a2enmod rewrite\nsudo a2enmod proxy\nsudo a2enmod proxy_http\n\n# Enable the site\nsudo a2ensite musiccharts.conf\n\n# Disable default site\nsudo a2dissite 000-default.conf\n\n# Test Apache configuration\nsudo apache2ctl configtest\n</code></pre>"},{"location":"deployment/production-setup/#setup-ssl-certificates","title":"Setup SSL Certificates","text":"<p>Option A: Using Let's Encrypt (Recommended) <pre><code># Install Certbot\nsudo apt install certbot python3-certbot-apache -y\n\n# Obtain SSL certificate\nsudo certbot --apache -d yourdomain.com -d www.yourdomain.com\n\n# Test auto-renewal\nsudo certbot renew --dry-run\n</code></pre></p> <p>Option B: Using Your Own Certificates <pre><code># Copy your certificates\nsudo cp your-cert.crt /etc/ssl/certs/\nsudo cp your-private.key /etc/ssl/private/\nsudo chmod 600 /etc/ssl/private/your-private.key\n\n# Update Apache configuration with correct paths\nsudo nano /etc/apache2/sites-available/musiccharts.conf\n</code></pre></p>"},{"location":"deployment/production-setup/#setup-systemd-services","title":"Setup Systemd Services","text":"<pre><code># Copy systemd service files\nsudo cp /opt/musiccharts/app/systemd-services/*.service /etc/systemd/system/\nsudo cp /opt/musiccharts/app/systemd-services/*.socket /etc/systemd/system/\n\n# Reload systemd\nsudo systemctl daemon-reload\n\n# Enable and start services\nsudo systemctl enable musiccharts-gunicorn.socket\nsudo systemctl start musiccharts-gunicorn.socket\nsudo systemctl enable musiccharts-gunicorn\nsudo systemctl start musiccharts-gunicorn\nsudo systemctl enable musiccharts-celery\nsudo systemctl start musiccharts-celery\nsudo systemctl enable musiccharts-celerybeat\nsudo systemctl start musiccharts-celerybeat\n\n# Restart Apache\nsudo systemctl restart apache2\n</code></pre>"},{"location":"deployment/production-setup/#post-deployment-configuration","title":"Post-Deployment Configuration","text":""},{"location":"deployment/production-setup/#create-django-superuser","title":"Create Django Superuser","text":"<pre><code>sudo -u musiccharts /opt/musiccharts/venv/bin/python /opt/musiccharts/app/manage.py createsuperuser\n</code></pre>"},{"location":"deployment/production-setup/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check service status\n./deploy.sh status\n\n# Run health check\n./deploy.sh health\n\n# Check logs\n./deploy.sh logs\n</code></pre>"},{"location":"deployment/production-setup/#configure-firewall","title":"Configure Firewall","text":"<pre><code># Enable UFW\nsudo ufw enable\n\n# Allow SSH\nsudo ufw allow ssh\n\n# Allow HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Check status\nsudo ufw status\n</code></pre>"},{"location":"deployment/production-setup/#service-management","title":"Service Management","text":""},{"location":"deployment/production-setup/#using-the-deployment-script","title":"Using the Deployment Script","text":"<pre><code># Start all services\n./deploy.sh start\n\n# Stop all services\n./deploy.sh stop\n\n# Restart all services\n./deploy.sh restart\n\n# Check service status\n./deploy.sh status\n\n# View logs\n./deploy.sh logs\n\n# Run health check\n./deploy.sh health\n\n# Create backup\n./deploy.sh backup\n</code></pre>"},{"location":"deployment/production-setup/#manual-service-management","title":"Manual Service Management","text":"<pre><code># Gunicorn service\nsudo systemctl start/stop/restart musiccharts-gunicorn\nsudo systemctl status musiccharts-gunicorn\n\n# Celery worker\nsudo systemctl start/stop/restart musiccharts-celery\nsudo systemctl status musiccharts-celery\n\n# Celery beat\nsudo systemctl start/stop/restart musiccharts-celerybeat\nsudo systemctl status musiccharts-celerybeat\n\n# Apache\nsudo systemctl start/stop/restart apache2\nsudo systemctl status apache2\n</code></pre>"},{"location":"deployment/production-setup/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"deployment/production-setup/#log-files","title":"Log Files","text":"<ul> <li>Application logs: <code>/var/log/musiccharts/</code></li> <li>Apache logs: <code>/var/log/apache2/</code></li> <li>System logs: <code>/var/log/syslog</code></li> </ul>"},{"location":"deployment/production-setup/#health-monitoring","title":"Health Monitoring","text":"<pre><code># Check Django application\nsudo -u musiccharts /opt/musiccharts/venv/bin/python /opt/musiccharts/app/manage.py check\n\n# Check database connection\nsudo -u musiccharts /opt/musiccharts/venv/bin/python /opt/musiccharts/app/manage.py dbshell\n\n# Check Redis connection\nredis-cli ping\n\n# Check service status\nsystemctl status musiccharts-gunicorn musiccharts-celery musiccharts-celerybeat apache2\n</code></pre>"},{"location":"deployment/production-setup/#backup-strategy","title":"Backup Strategy","text":"<pre><code># Database backup\nsudo -u postgres pg_dump musiccharts_db &gt; /opt/musiccharts/backups/db_backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Application backup\nsudo -u musiccharts tar -czf /opt/musiccharts/backups/app_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /opt/musiccharts app/\n\n# Media files backup\nsudo -u musiccharts tar -czf /opt/musiccharts/backups/media_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /opt/musiccharts app/media/\n</code></pre>"},{"location":"deployment/production-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/production-setup/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Permission Issues <pre><code>sudo chown -R musiccharts:musiccharts /opt/musiccharts\nsudo chmod -R 755 /opt/musiccharts\n</code></pre></p> </li> <li> <p>Database Connection Issues</p> </li> <li>Verify PostgreSQL is running: <code>sudo systemctl status postgresql</code></li> <li>Check database credentials in <code>.env</code> file</li> <li> <p>Test connection: <code>psql -h localhost -U musiccharts_user -d musiccharts_db</code></p> </li> <li> <p>Static Files Not Loading</p> </li> <li>Check Apache configuration for static file serving</li> <li>Verify <code>collectstatic</code> was run</li> <li> <p>Check file permissions</p> </li> <li> <p>SSL Certificate Issues</p> </li> <li>Verify certificate paths in Apache configuration</li> <li> <p>Check certificate validity: <code>openssl x509 -in /path/to/cert -text -noout</code></p> </li> <li> <p>Service Not Starting</p> </li> <li>Check logs: <code>journalctl -u service-name -f</code></li> <li>Verify configuration files</li> <li>Check for port conflicts</li> </ol>"},{"location":"deployment/production-setup/#useful-commands","title":"Useful Commands","text":"<pre><code># View real-time logs\nsudo tail -f /var/log/musiccharts/gunicorn-error.log\nsudo tail -f /var/log/apache2/error.log\n\n# Test Apache configuration\nsudo apache2ctl configtest\n\n# Check listening ports\nsudo netstat -tlnp | grep :80\nsudo netstat -tlnp | grep :443\nsudo netstat -tlnp | grep :8000\n\n# Check disk space\ndf -h\n\n# Check memory usage\nfree -h\n\n# Check process status\nps aux | grep gunicorn\nps aux | grep celery\n</code></pre>"},{"location":"deployment/production-setup/#security-considerations","title":"Security Considerations","text":"<ol> <li>File Permissions: Ensure proper ownership and permissions</li> <li>Environment Variables: Never commit <code>.env</code> files</li> <li>Firewall: Configure UFW properly</li> <li>SSL: Use strong SSL configuration</li> <li>Updates: Keep system and dependencies updated</li> <li>Backups: Implement regular backup strategy</li> </ol>"},{"location":"deployment/production-setup/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Gunicorn Workers: Adjust based on CPU cores</li> <li>Database: Optimize PostgreSQL settings</li> <li>Caching: Implement Redis caching</li> <li>Static Files: Use CDN if needed</li> <li>Monitoring: Implement application monitoring</li> </ol>"},{"location":"deployment/production-setup/#production-checklist","title":"Production Checklist","text":""},{"location":"deployment/production-setup/#pre-deployment","title":"Pre-Deployment","text":"<ul> <li> Server prepared with all dependencies</li> <li> Database configured and accessible</li> <li> Environment variables configured</li> <li> SSL certificates obtained</li> <li> Domain name pointing to server</li> </ul>"},{"location":"deployment/production-setup/#post-deployment","title":"Post-Deployment","text":"<ul> <li> All services running and healthy</li> <li> SSL certificate working</li> <li> Static files loading correctly</li> <li> Database migrations applied</li> <li> Superuser created</li> <li> Firewall configured</li> <li> Backup strategy implemented</li> <li> Monitoring configured</li> </ul>"},{"location":"deployment/production-setup/#ongoing-maintenance","title":"Ongoing Maintenance","text":"<ul> <li> Regular security updates</li> <li> Database backups</li> <li> Log rotation</li> <li> Performance monitoring</li> <li> SSL certificate renewal</li> </ul> <p>For additional support, refer to the project documentation or contact the development team.</p>"},{"location":"development/admin-customization/","title":"Django Admin Customization","text":""},{"location":"development/admin-customization/#overview","title":"Overview","text":"<p>This document provides a comprehensive guide to the Django admin customizations implemented in MusicChartsAI, including custom ordering, enhanced interfaces, and specialized functionality for music data management.</p>"},{"location":"development/admin-customization/#custom-admin-ordering-system","title":"Custom Admin Ordering System","text":""},{"location":"development/admin-customization/#implementation-overview","title":"Implementation Overview","text":"<p>The custom admin ordering system provides control over the display order of apps and models in the Django admin interface, following business logic rather than alphabetical ordering.</p>"},{"location":"development/admin-customization/#architecture","title":"Architecture","text":"<p>The solution consists of two main components:</p> <ol> <li>AdminConfig (<code>config/admin_apps.py</code>) - Django app configuration with custom ordering</li> <li>Configuration Updates - Settings updates to use the custom admin</li> </ol>"},{"location":"development/admin-customization/#file-structure","title":"File Structure","text":"<pre><code>config/\n\u251c\u2500\u2500 admin_apps.py          # AdminConfig with custom ordering logic\n\u251c\u2500\u2500 settings.py            # Updated INSTALLED_APPS\n\u2514\u2500\u2500 urls.py               # Standard admin URL routing (unchanged)\n</code></pre>"},{"location":"development/admin-customization/#adminconfig-implementation","title":"AdminConfig Implementation","text":"<p>File: <code>config/admin_apps.py</code></p> <pre><code>from django.contrib.admin.apps import AdminConfig as DjangoAdminConfig\nfrom django.contrib.admin.sites import site as default_admin_site\n\nclass AdminConfig(DjangoAdminConfig):\n    def ready(self):\n        super().ready()\n\n        def custom_get_app_list(request):\n            # Custom ordering logic\n            app_ordering = {\n                \"Pages\": 1,\n                \"Users\": 2,\n                \"Charts\": 3,\n                \"Soundcharts\": 4,\n                \"Tasks\": 5,\n                \"ACR Cloud\": 6,\n                \"Dynamic DataTables\": 7,\n                \"Dynamic API\": 8,\n                \"Authentication and Authorization\": 9,\n            }\n\n            model_ordering = {\n                \"Soundcharts\": {\n                    \"Artists\": 1,\n                    \"Tracks\": 2,\n                    \"Albums\": 3,\n                    \"Genres\": 4,\n                    \"Platforms\": 5,\n                    \"Charts\": 6,\n                    \"Chart rankings\": 7,\n                    \"Chart ranking entries\": 8,\n                    \"Venues\": 9,\n                    \"Metadata fetch tasks\": 10,\n                }\n            }\n\n            # Implementation details...\n\n        # Apply the custom get_app_list method\n        default_admin_site.get_app_list = custom_get_app_list\n</code></pre>"},{"location":"development/admin-customization/#app-ordering-configuration","title":"App Ordering Configuration","text":"<p>Apps are ordered based on business importance:</p> Order App Name Description 1 Pages Main content management 2 Users User management 3 Charts Chart data management 4 Soundcharts Music chart integration 5 Tasks Background task management 6 ACR Cloud Audio recognition service 7 Dynamic DataTables Dynamic table functionality 8 Dynamic API API management 9 Authentication and Authorization Django built-in auth"},{"location":"development/admin-customization/#model-ordering-within-apps","title":"Model Ordering Within Apps","text":""},{"location":"development/admin-customization/#soundcharts-app","title":"Soundcharts App","text":"<ol> <li>Artists</li> <li>Tracks</li> <li>Albums</li> <li>Genres</li> <li>Platforms</li> <li>Charts</li> <li>Chart rankings</li> <li>Chart ranking entries</li> <li>Venues</li> <li>Metadata fetch tasks</li> </ol>"},{"location":"development/admin-customization/#other-apps","title":"Other Apps","text":"<ul> <li>Models are ordered logically within each app</li> <li>Primary models appear first</li> <li>Supporting models follow</li> </ul>"},{"location":"development/admin-customization/#configuration-management","title":"Configuration Management","text":""},{"location":"development/admin-customization/#adding-new-apps","title":"Adding New Apps","text":"<p>To add a new app to the custom ordering:</p> <ol> <li>Add the app to <code>app_ordering</code> dictionary in <code>config/admin_apps.py</code></li> <li>Assign appropriate order number</li> <li>Add model ordering if needed</li> </ol> <pre><code>app_ordering = {\n    \"Pages\": 1,\n    \"Users\": 2,\n    \"New App\": 3,  # Add new app here\n    # ... existing apps\n}\n</code></pre>"},{"location":"development/admin-customization/#modifying-order","title":"Modifying Order","text":"<p>To change the order of existing apps or models:</p> <ol> <li>Update the order numbers in the respective dictionaries</li> <li>Lower numbers appear first</li> <li>Use 999 for fallback ordering</li> </ol>"},{"location":"development/admin-customization/#enhanced-admin-interfaces","title":"Enhanced Admin Interfaces","text":""},{"location":"development/admin-customization/#track-admin-enhancements","title":"Track Admin Enhancements","text":""},{"location":"development/admin-customization/#changelist-improvements","title":"Changelist Improvements","text":"<p>Import from API Button: - Imports tracks from SoundCharts API - Automatically queues metadata fetch tasks - Configurable import parameters (limit, offset, artist UUID)</p> <p>Fetch All Metadata Button: - Creates bulk metadata fetch tasks for selected tracks - Background processing with progress tracking - Error handling and retry mechanisms</p> <p>Bulk Actions: - \"Fetch metadata from SoundCharts API (Background)\" - queues individual tasks - \"Create bulk metadata fetch task\" - creates a single bulk task - \"Export selected tracks\" - export functionality</p>"},{"location":"development/admin-customization/#change-form-enhancements","title":"Change Form Enhancements","text":"<p>Fetch Metadata from API Button: - Fetches metadata synchronously for immediate feedback - Updates track fields in real-time - Error handling with user-friendly messages</p> <p>Enhanced Fieldsets: <pre><code>fieldsets = (\n    ('Basic Information', {\n        'fields': ('name', 'slug', 'uuid', 'credit_name')\n    }),\n    ('Metadata', {\n        'fields': ('release_date', 'duration', 'isrc', 'label')\n    }),\n    ('Relationships', {\n        'fields': ('primary_artist', 'artists', 'primary_genre', 'genres')\n    }),\n    ('API Integration', {\n        'fields': ('metadata_fetched_at', 'audience_fetched_at')\n    }),\n)\n</code></pre></p>"},{"location":"development/admin-customization/#list-display-and-filters","title":"List Display and Filters","text":"<p>List Display: - <code>name</code>: Track title - <code>primary_artist</code>: Main artist - <code>primary_genre</code>: Main genre - <code>release_date</code>: Release date - <code>metadata_fetched_at</code>: Last metadata fetch - <code>audience_fetched_at</code>: Last audience data fetch</p> <p>Filters: - <code>artists</code>: Filter by associated artists - <code>primary_artist</code>: Filter by primary artist - <code>genres</code>: Filter by associated genres - <code>primary_genre</code>: Filter by primary genre - <code>metadata_fetched_at</code>: Filter by metadata fetch date - <code>audience_fetched_at</code>: Filter by audience data fetch date</p>"},{"location":"development/admin-customization/#artist-admin-enhancements","title":"Artist Admin Enhancements","text":""},{"location":"development/admin-customization/#soundcharts-integration","title":"SoundCharts Integration","text":"<p>Automatic Artist Creation: - Artists are automatically created/updated when track metadata is fetched - UUID-based identification prevents duplicates - All SoundCharts artist fields are preserved</p> <p>Enhanced Fields: - <code>uuid</code>: SoundCharts UUID for reliable identification - <code>slug</code>: URL-friendly identifier - <code>app_url</code>: SoundCharts application URL - <code>image_url</code>: Artist image URL</p>"},{"location":"development/admin-customization/#relationship-management","title":"Relationship Management","text":"<p>Track Relationships: - <code>tracks</code>: All tracks by this artist - <code>primary_tracks</code>: Tracks where this artist is primary - Automatic relationship updates when track metadata changes</p>"},{"location":"development/admin-customization/#genre-admin-enhancements","title":"Genre Admin Enhancements","text":""},{"location":"development/admin-customization/#hierarchical-display","title":"Hierarchical Display","text":"<p>Parent-Child Relationships: - Shows hierarchical structure in admin interface - Visual indicators for root and subgenres - Easy navigation between related genres</p> <p>SoundCharts Integration: - Preserves original API data structure - Automatic slug generation from genre names - Support for both root and subgenre management</p>"},{"location":"development/admin-customization/#chart-management-admin","title":"Chart Management Admin","text":""},{"location":"development/admin-customization/#chart-sync-system","title":"Chart Sync System","text":"<p>ChartSyncSchedule Admin: - Visual status indicators for sync schedules - Progress tracking for sync operations - Error handling and retry mechanisms</p> <p>ChartSyncExecution Admin: - Real-time progress monitoring - Detailed execution logs - Error message display and debugging</p>"},{"location":"development/admin-customization/#chart-ranking-admin","title":"Chart Ranking Admin","text":"<p>Enhanced List Display: - Chart information with platform details - Entry statistics and metadata - Last sync timestamps</p> <p>Bulk Operations: - Bulk sync operations for multiple charts - Progress tracking and error handling - Scheduled sync management</p>"},{"location":"development/admin-customization/#metadata-fetch-task-admin","title":"Metadata Fetch Task Admin","text":""},{"location":"development/admin-customization/#progress-monitoring","title":"Progress Monitoring","text":"<p>Real-time Progress: - Visual progress bars for bulk operations - Status indicators (pending, running, completed, failed) - Detailed error messages and timestamps</p> <p>Task Management: - Cancel running tasks - Retry failed tasks - View detailed execution logs</p>"},{"location":"development/admin-customization/#task-statistics","title":"Task Statistics","text":"<p>Performance Metrics: - Total tasks processed - Success/failure rates - Average processing times - Resource usage tracking</p>"},{"location":"development/admin-customization/#custom-admin-actions","title":"Custom Admin Actions","text":""},{"location":"development/admin-customization/#track-management-actions","title":"Track Management Actions","text":""},{"location":"development/admin-customization/#import-from-api-action","title":"Import from API Action","text":"<pre><code>def import_from_api(self, request, queryset):\n    \"\"\"Import tracks from SoundCharts API\"\"\"\n    # Implementation details\n    pass\n\nimport_from_api.short_description = \"Import from API\"\n</code></pre>"},{"location":"development/admin-customization/#fetch-metadata-action","title":"Fetch Metadata Action","text":"<pre><code>def fetch_metadata(self, request, queryset):\n    \"\"\"Fetch metadata for selected tracks\"\"\"\n    # Implementation details\n    pass\n\nfetch_metadata.short_description = \"Fetch metadata from API\"\n</code></pre>"},{"location":"development/admin-customization/#chart-management-actions","title":"Chart Management Actions","text":""},{"location":"development/admin-customization/#sync-chart-rankings-action","title":"Sync Chart Rankings Action","text":"<pre><code>def sync_chart_rankings(self, request, queryset):\n    \"\"\"Sync chart rankings for selected charts\"\"\"\n    # Implementation details\n    pass\n\nsync_chart_rankings.short_description = \"Sync chart rankings\"\n</code></pre>"},{"location":"development/admin-customization/#create-sync-schedule-action","title":"Create Sync Schedule Action","text":"<pre><code>def create_sync_schedule(self, request, queryset):\n    \"\"\"Create sync schedule for selected charts\"\"\"\n    # Implementation details\n    pass\n\ncreate_sync_schedule.short_description = \"Create sync schedule\"\n</code></pre>"},{"location":"development/admin-customization/#custom-admin-forms","title":"Custom Admin Forms","text":""},{"location":"development/admin-customization/#track-form-enhancements","title":"Track Form Enhancements","text":""},{"location":"development/admin-customization/#dynamic-field-updates","title":"Dynamic Field Updates","text":"<pre><code>class TrackAdminForm(forms.ModelForm):\n    class Meta:\n        model = Track\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Dynamic field configuration\n        if self.instance.pk:\n            self.fields['metadata_fetched_at'].disabled = True\n            self.fields['audience_fetched_at'].disabled = True\n</code></pre>"},{"location":"development/admin-customization/#validation-and-error-handling","title":"Validation and Error Handling","text":"<pre><code>def clean(self):\n    cleaned_data = super().clean()\n    # Custom validation logic\n    if cleaned_data.get('release_date') and cleaned_data.get('release_date') &gt; timezone.now().date():\n        raise forms.ValidationError(\"Release date cannot be in the future\")\n    return cleaned_data\n</code></pre>"},{"location":"development/admin-customization/#artist-form-enhancements","title":"Artist Form Enhancements","text":""},{"location":"development/admin-customization/#soundcharts-integration_1","title":"SoundCharts Integration","text":"<pre><code>class ArtistAdminForm(forms.ModelForm):\n    class Meta:\n        model = Artist\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # SoundCharts specific field configuration\n        if self.instance.pk and self.instance.uuid:\n            self.fields['uuid'].disabled = True\n            self.fields['slug'].disabled = True\n</code></pre>"},{"location":"development/admin-customization/#custom-admin-templates","title":"Custom Admin Templates","text":""},{"location":"development/admin-customization/#enhanced-list-templates","title":"Enhanced List Templates","text":""},{"location":"development/admin-customization/#progress-indicators","title":"Progress Indicators","text":"<pre><code>&lt;!-- Custom progress bar template --&gt;\n&lt;div class=\"progress-bar\"&gt;\n    &lt;div class=\"progress-fill\" style=\"width: {{ progress_percentage }}%\"&gt;&lt;/div&gt;\n    &lt;span class=\"progress-text\"&gt;{{ progress_text }}&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"development/admin-customization/#status-indicators","title":"Status Indicators","text":"<pre><code>&lt;!-- Custom status indicator template --&gt;\n&lt;span class=\"status-indicator status-{{ status|lower }}\"&gt;\n    &lt;i class=\"icon-{{ status|lower }}\"&gt;&lt;/i&gt;\n    {{ status|title }}\n&lt;/span&gt;\n</code></pre>"},{"location":"development/admin-customization/#enhanced-change-form-templates","title":"Enhanced Change Form Templates","text":""},{"location":"development/admin-customization/#api-integration-buttons","title":"API Integration Buttons","text":"<pre><code>&lt;!-- Custom API integration buttons --&gt;\n&lt;div class=\"api-integration-buttons\"&gt;\n    &lt;button type=\"button\" class=\"btn btn-primary\" onclick=\"fetchMetadata()\"&gt;\n        Fetch Metadata from API\n    &lt;/button&gt;\n    &lt;button type=\"button\" class=\"btn btn-secondary\" onclick=\"fetchAudienceData()\"&gt;\n        Fetch Audience Data\n    &lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"development/admin-customization/#real-time-updates","title":"Real-time Updates","text":"<pre><code>&lt;!-- Real-time update indicators --&gt;\n&lt;div class=\"real-time-updates\"&gt;\n    &lt;span class=\"last-updated\"&gt;\n        Last updated: &lt;span id=\"last-updated-time\"&gt;{{ object.updated_at }}&lt;/span&gt;\n    &lt;/span&gt;\n    &lt;button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" onclick=\"refreshData()\"&gt;\n        Refresh\n    &lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"development/admin-customization/#javascript-enhancements","title":"JavaScript Enhancements","text":""},{"location":"development/admin-customization/#dynamic-form-updates","title":"Dynamic Form Updates","text":""},{"location":"development/admin-customization/#real-time-metadata-fetching","title":"Real-time Metadata Fetching","text":"<pre><code>function fetchMetadata() {\n    const trackId = document.querySelector('[name=\"id\"]').value;\n    const button = event.target;\n\n    button.disabled = true;\n    button.textContent = 'Fetching...';\n\n    fetch(`/admin/soundcharts/track/${trackId}/fetch-metadata/`, {\n        method: 'POST',\n        headers: {\n            'X-CSRFToken': document.querySelector('[name=\"csrfmiddlewaretoken\"]').value,\n        },\n    })\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        if (data.success) {\n            // Update form fields with new data\n            updateFormFields(data.metadata);\n            showSuccessMessage('Metadata fetched successfully');\n        } else {\n            showErrorMessage(data.error);\n        }\n    })\n    .catch(error =&gt; {\n        showErrorMessage('Failed to fetch metadata');\n    })\n    .finally(() =&gt; {\n        button.disabled = false;\n        button.textContent = 'Fetch Metadata from API';\n    });\n}\n</code></pre>"},{"location":"development/admin-customization/#progress-tracking","title":"Progress Tracking","text":"<pre><code>function trackProgress(taskId) {\n    const interval = setInterval(() =&gt; {\n        fetch(`/admin/tasks/metadatafetchtask/${taskId}/progress/`)\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                updateProgressBar(data.progress);\n                if (data.status === 'completed' || data.status === 'failed') {\n                    clearInterval(interval);\n                    updateStatus(data.status);\n                }\n            });\n    }, 1000);\n}\n</code></pre>"},{"location":"development/admin-customization/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/admin-customization/#query-optimization","title":"Query Optimization","text":""},{"location":"development/admin-customization/#efficient-list-displays","title":"Efficient List Displays","text":"<pre><code>def get_queryset(self, request):\n    return super().get_queryset(request).select_related(\n        'primary_artist', 'primary_genre'\n    ).prefetch_related('artists', 'genres')\n</code></pre>"},{"location":"development/admin-customization/#cached-properties","title":"Cached Properties","text":"<pre><code>class TrackAdmin(admin.ModelAdmin):\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\n            'primary_artist', 'primary_genre'\n        )\n\n    def artist_count(self, obj):\n        return obj.artists.count()\n    artist_count.short_description = 'Artist Count'\n</code></pre>"},{"location":"development/admin-customization/#pagination-and-performance","title":"Pagination and Performance","text":""},{"location":"development/admin-customization/#large-dataset-handling","title":"Large Dataset Handling","text":"<pre><code>class TrackAdmin(admin.ModelAdmin):\n    list_per_page = 50\n    list_max_show_all = 200\n    show_full_result_count = False\n\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\n            'primary_artist', 'primary_genre'\n        ).prefetch_related('artists', 'genres')\n</code></pre>"},{"location":"development/admin-customization/#security-considerations","title":"Security Considerations","text":""},{"location":"development/admin-customization/#permission-management","title":"Permission Management","text":""},{"location":"development/admin-customization/#role-based-access","title":"Role-based Access","text":"<pre><code>class TrackAdmin(admin.ModelAdmin):\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        if not request.user.is_superuser:\n            # Restrict access based on user permissions\n            qs = qs.filter(created_by=request.user)\n        return qs\n</code></pre>"},{"location":"development/admin-customization/#action-permissions","title":"Action Permissions","text":"<pre><code>def fetch_metadata(self, request, queryset):\n    if not request.user.has_perm('soundcharts.can_fetch_metadata'):\n        self.message_user(request, 'You do not have permission to fetch metadata')\n        return\n    # Implementation details\n</code></pre>"},{"location":"development/admin-customization/#data-validation","title":"Data Validation","text":""},{"location":"development/admin-customization/#input-sanitization","title":"Input Sanitization","text":"<pre><code>class TrackAdminForm(forms.ModelForm):\n    def clean_name(self):\n        name = self.cleaned_data.get('name')\n        if name:\n            # Sanitize track name\n            name = name.strip()\n            if len(name) &lt; 2:\n                raise forms.ValidationError(\"Track name must be at least 2 characters\")\n        return name\n</code></pre>"},{"location":"development/admin-customization/#testing-and-maintenance","title":"Testing and Maintenance","text":""},{"location":"development/admin-customization/#testing-admin-customizations","title":"Testing Admin Customizations","text":""},{"location":"development/admin-customization/#unit-tests","title":"Unit Tests","text":"<pre><code>class AdminCustomizationTestCase(TestCase):\n    def test_app_ordering(self):\n        admin_site = CustomAdminSite(name='test')\n        # Test ordering logic\n\n    def test_admin_actions(self):\n        # Test custom admin actions\n        pass\n\n    def test_form_validation(self):\n        # Test form validation\n        pass\n</code></pre>"},{"location":"development/admin-customization/#integration-tests","title":"Integration Tests","text":"<pre><code>class AdminIntegrationTestCase(TestCase):\n    def test_track_admin_functionality(self):\n        # Test complete track admin workflow\n        pass\n\n    def test_metadata_fetching(self):\n        # Test metadata fetching functionality\n        pass\n</code></pre>"},{"location":"development/admin-customization/#maintenance-and-updates","title":"Maintenance and Updates","text":""},{"location":"development/admin-customization/#regular-updates","title":"Regular Updates","text":"<ul> <li>Review admin ordering quarterly for business relevance</li> <li>Update when adding new apps or models</li> <li>Document any changes in this file</li> <li>Test admin functionality after updates</li> </ul>"},{"location":"development/admin-customization/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issues:</p> <ol> <li>Admin not loading: Check <code>INSTALLED_APPS</code> configuration</li> <li>Wrong ordering: Verify dictionary values in <code>admin_apps.py</code></li> <li>Missing models: Check model registration in admin.py files</li> <li>Permission errors: Verify user permissions and role assignments</li> </ol> <p>Debug Steps:</p> <ol> <li>Run <code>python manage.py check</code> for configuration errors</li> <li>Check Django logs for admin-related errors</li> <li>Verify all imports are correct</li> <li>Test admin functionality in development environment</li> </ol>"},{"location":"development/admin-customization/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/admin-customization/#planned-features","title":"Planned Features","text":"<ol> <li>Dynamic Ordering: Load ordering from database configuration</li> <li>User-Specific Ordering: Different orders per user role</li> <li>Admin Interface: Web interface to modify ordering</li> <li>Import/Export: Configuration file management</li> <li>Advanced Filtering: Custom filter interfaces</li> <li>Bulk Operations: Enhanced bulk operation capabilities</li> </ol>"},{"location":"development/admin-customization/#performance-improvements","title":"Performance Improvements","text":"<ol> <li>Caching: Implement admin-specific caching</li> <li>Lazy Loading: Load admin resources on demand</li> <li>Database Optimization: Optimize admin queries</li> <li>Frontend Optimization: Improve admin interface performance</li> </ol>"},{"location":"development/admin-customization/#conclusion","title":"Conclusion","text":"<p>The Django admin customizations in MusicChartsAI provide a comprehensive, user-friendly interface for managing music data, with custom ordering, enhanced functionality, and robust error handling. The system is designed for maintainability, performance, and security, with extensive testing and documentation support.</p>"},{"location":"development/api-frontend-integration/","title":"API and Frontend Integration","text":""},{"location":"development/api-frontend-integration/#overview","title":"Overview","text":"<p>This document provides a comprehensive guide to the API and frontend integration features implemented in MusicChartsAI, including chart visualization, data management, and user interface enhancements.</p>"},{"location":"development/api-frontend-integration/#chart-visualization-system","title":"Chart Visualization System","text":""},{"location":"development/api-frontend-integration/#apexcharts-integration","title":"ApexCharts Integration","text":"<p>MusicChartsAI leverages ApexCharts for interactive data visualization, providing both static and dynamic chart capabilities.</p>"},{"location":"development/api-frontend-integration/#benefits-of-apexcharts-integration","title":"Benefits of ApexCharts Integration","text":"<ul> <li>Dynamic Data Visualization: Leverage models from other applications to create charts that dynamically adapt to your data</li> <li>Customized Chart Appearance: Customize appearance and behavior using templates and configuration</li> <li>API Data Integration: Create charts using API data in specific pages or sections</li> <li>Modular Design: Charts are organized into a dedicated Django application for code organization</li> </ul>"},{"location":"development/api-frontend-integration/#implementation-architecture","title":"Implementation Architecture","text":"<p>File Structure: <pre><code>static/assets/\n\u251c\u2500\u2500 charts.js              # Chart configuration and rendering\n\u251c\u2500\u2500 admin-import.js        # Admin interface functionality\n\u2514\u2500\u2500 track-admin-alerts.js  # Track admin alerts system\n\ntemplates/\n\u251c\u2500\u2500 apps/charts.html       # Chart visualization templates\n\u251c\u2500\u2500 soundcharts/\n\u2502   \u251c\u2500\u2500 dashboard.html     # Soundcharts dashboard\n\u2502   \u2514\u2500\u2500 song_audience_detail.html  # Song detail page\n\u2514\u2500\u2500 admin/\n    \u2514\u2500\u2500 soundcharts/       # Admin interface templates\n</code></pre></p>"},{"location":"development/api-frontend-integration/#chart-types-and-implementation","title":"Chart Types and Implementation","text":""},{"location":"development/api-frontend-integration/#1-dashboard-charts-static-data","title":"1. Dashboard Charts (Static Data)","text":"<p>Main Chart Options: <pre><code>// static/assets/charts.js\nconst getMainChartOptions = () =&gt; {\n    return {\n        chart: {\n            type: 'area',\n            height: '420px',\n            fontFamily: 'Inter, sans-serif',\n            foreColor: '#4B5563',\n            toolbar: {\n                show: false\n            }\n        },\n        series: [\n            {\n                name: 'Revenue',\n                data: [6356, 6218, 6156, 6526, 6356, 6256, 6056],\n                color: '#1A56DB'\n            },\n            {\n                name: 'Revenue (previous period)',\n                data: [6556, 6725, 6424, 6356, 6586, 6756, 6616],\n                color: '#FDBA8C'\n            }\n        ],\n        xaxis: {\n            categories: ['01 Feb', '02 Feb', '03 Feb', '04 Feb', '05 Feb', '06 Feb', '07 Feb'],\n        },\n    };\n}\n</code></pre></p> <p>Signups Chart: <pre><code>const getSignupsChartOptions = () =&gt; {\n    return {\n        series: [{\n            name: 'Users',\n            data: [1334, 2435, 1753, 1328, 1155, 1632, 1336]\n        }],\n        labels: ['01 Feb', '02 Feb', '03 Feb', '04 Feb', '05 Feb', '06 Feb', '07 Feb'],\n        chart: {\n            type: 'bar',\n            height: '140px',\n            foreColor: '#4B5563',\n            fontFamily: 'Inter, sans-serif',\n            toolbar: {\n                show: false\n            }\n        },\n    };\n}\n</code></pre></p>"},{"location":"development/api-frontend-integration/#2-api-based-charts-dynamic-data","title":"2. API-Based Charts (Dynamic Data)","text":"<p>Bar Chart with API Data: <pre><code>// static/assets/charts.js\nif (document.getElementById('products-bar-chart-api')) {\n    const apiUrl = '/api/product/';\n    let dt = []\n\n    const fetchData = async () =&gt; {\n        try {\n            const response = await fetch(apiUrl);\n            const data = await response.json();\n            dt = data\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    };\n    await fetchData();\n\n    const options = {\n        colors: ['#1A56DB', '#FDBA8C'],\n        series: [\n            {\n                name: 'Product',\n                color: '#1A56DB',\n                data: dt.map(product =&gt; ({ x: product.name, y: product.price }))\n            },\n        ],\n        chart: {\n            type: 'bar',\n            height: '420px',\n            fontFamily: 'Inter, sans-serif',\n            foreColor: '#4B5563',\n            toolbar: {\n                show: false\n            }\n        },\n    };\n\n    const chart = new ApexCharts(document.getElementById('products-bar-chart-api'), options); \n    chart.render();\n}\n</code></pre></p> <p>Pie Chart with API Data: <pre><code>if (document.getElementById('products-pie-chart-api')) {\n    const apiUrl = '/api/product/';\n    let dt = []\n\n    const fetchData = async () =&gt; {\n        try {\n            const response = await fetch(apiUrl);\n            const data = await response.json();\n            dt = data\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    };\n    await fetchData();\n\n    const chart = new ApexCharts(document.getElementById('products-pie-chart-api'), pieChartOptions(dt));\n    chart.render();\n\n    // Dark mode support\n    document.addEventListener('dark-mode', function () {\n        chart.updateOptions(pieChartOptions(dt));\n    });\n}\n</code></pre></p>"},{"location":"development/api-frontend-integration/#3-template-view-charts-database-data","title":"3. Template View Charts (Database Data)","text":"<p>View Implementation: <pre><code># apps/charts/views.py\nfrom django.shortcuts import render\nfrom apps.pages.models import Product\nfrom django.core import serializers\n\ndef index(request):\n    products = serializers.serialize('json', Product.objects.all())\n    context = {\n        'segment': 'charts',\n        'parent': 'apps',\n        'products': products\n    }\n    return render(request, 'apps/charts.html', context)\n</code></pre></p> <p>Template Integration: <pre><code>&lt;!-- templates/apps/charts.html --&gt;\n&lt;div class=\"flex gap-5 items-center justify-between\"&gt;\n    &lt;div class=\"w-full\" id=\"products-bar-chart\"&gt;&lt;/div&gt;\n    &lt;div class=\"w-full\" id=\"products-pie-chart\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    // Pull data from the backend\n    const products = JSON.parse('{{ products | safe }}');\n\n    function getProductsBarChart(data) {\n        return {\n            series: [{\n                name: 'Products',\n                data: data.map(item =&gt; item.fields.price)\n            }],\n            chart: {\n                type: 'bar',\n                height: '420px'\n            }\n        };\n    }\n\n    const getProductsPieChart = (data) =&gt; {\n        return {\n            series: data.map(item =&gt; item.fields.price),\n            labels: data.map(item =&gt; item.fields.name),\n            chart: {\n                type: 'pie',\n                height: '420px'\n            }\n        };\n    }\n\n    (async () =&gt; {\n        const productsBarChart = new ApexCharts(document.getElementById('products-bar-chart'), getProductsBarChart(products));\n        productsBarChart.render();\n\n        const productsPieChart = new ApexCharts(document.getElementById('products-pie-chart'), getProductsPieChart(products));\n        productsPieChart.render();\n\n        // Dark mode support\n        document.addEventListener('dark-mode', function () {\n            productsPieChart.updateOptions(getProductsPieChart(products));\n        });\n    })();\n&lt;/script&gt;\n</code></pre></p>"},{"location":"development/api-frontend-integration/#soundcharts-dashboard-integration","title":"Soundcharts Dashboard Integration","text":""},{"location":"development/api-frontend-integration/#real-time-analytics-dashboard","title":"Real-time Analytics Dashboard","text":"<p>Data Aggregation: <pre><code># apps/pages/views.py\ndef dashboard(request):\n    # Weekly rankings aggregation\n    week_start = timezone.now() - timedelta(days=7)\n    weekly_rankings = ChartRanking.objects.filter(fetched_at__gte=week_start).count()\n\n    # Top platforms\n    top_platforms = Chart.objects.values('platform__name').annotate(\n        total_rankings=Count('chartranking')\n    ).order_by('-total_rankings')[:5]\n\n    # Top performing tracks\n    top_tracks = Track.objects.annotate(\n        ranking_count=Count('chartrankingentry')\n    ).order_by('-ranking_count')[:10]\n\n    # Chart health metrics\n    chart_health = Chart.objects.annotate(\n        last_sync=Max('chartranking__fetched_at')\n    ).filter(last_sync__isnull=False)\n\n    context = {\n        'weekly_rankings': weekly_rankings,\n        'top_platforms': list(top_platforms),\n        'top_tracks': top_tracks,\n        'chart_health': chart_health,\n    }\n    return render(request, 'soundcharts/dashboard.html', context)\n</code></pre></p> <p>Dashboard Chart Configuration: <pre><code>// ApexCharts Configuration for Soundcharts Dashboard\nconst weeklyRankingsChart = {\n    chart: {\n        type: 'area',\n        height: '350px',\n        fontFamily: 'Inter, sans-serif',\n        foreColor: '#4B5563',\n        toolbar: {\n            show: false\n        }\n    },\n    series: [{\n        name: 'Daily Rankings',\n        data: weeklyRankingsData, // From backend\n        color: '#1C64F2'\n    }],\n    xaxis: {\n        categories: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    fill: {\n        type: 'gradient',\n        gradient: {\n            shade: 'light',\n            type: 'vertical',\n            shadeIntensity: 0.5,\n            gradientToColors: ['#3B82F6'],\n            inverseColors: false,\n            opacityFrom: 0.8,\n            opacityTo: 0.1,\n            stops: [0, 100]\n        }\n    }\n};\n</code></pre></p>"},{"location":"development/api-frontend-integration/#api-endpoints-and-data-integration","title":"API Endpoints and Data Integration","text":""},{"location":"development/api-frontend-integration/#rest-api-structure","title":"REST API Structure","text":""},{"location":"development/api-frontend-integration/#product-api-endpoint","title":"Product API Endpoint","text":"<p>URL: <code>/api/product/</code></p> <p>Response Format: <pre><code>[\n    {\n        \"id\": 3,\n        \"name\": \"Adidas\",\n        \"info\": \"Just another cool product\",\n        \"price\": 201\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Nike\",\n        \"info\": \"This is a shoe shop\",\n        \"price\": 66\n    },\n    {\n        \"id\": 5,\n        \"name\": \"Puma\",\n        \"info\": \"Over priced Puma\",\n        \"price\": 666\n    }\n]\n</code></pre></p>"},{"location":"development/api-frontend-integration/#soundcharts-api-endpoints","title":"Soundcharts API Endpoints","text":"<p>Track Audience Data: <pre><code># URL: /soundcharts/audience/chart/&lt;track_uuid&gt;/&lt;platform_slug&gt;/?limit=30\nclass AudienceChartView(View):\n    def get(self, request, track_uuid, platform_slug):\n        # Get track and platform data\n        track = get_object_or_404(Track, uuid=track_uuid)\n        platform = get_object_or_404(Platform, slug=platform_slug)\n\n        # Get chart data with limit\n        limit = request.GET.get('limit', 30)\n        chart_data = TrackAudienceTimeSeries.get_chart_data(track, platform, limit)\n\n        return JsonResponse({\n            'success': True,\n            'track': {\n                'name': track.name,\n                'uuid': track.uuid,\n                'credit_name': track.credit_name\n            },\n            'platform': {\n                'name': platform.name,\n                'slug': platform.slug\n            },\n            'chart_data': {\n                'labels': [item['date'] for item in chart_data],\n                'datasets': [{\n                    'label': f'{track.name} on {platform.name}',\n                    'data': [item['audience_value'] for item in chart_data],\n                    'borderColor': '#3b82f6',\n                    'backgroundColor': 'rgba(59, 130, 246, 0.1)',\n                    'tension': 0.1\n                }]\n            }\n        })\n</code></pre></p> <p>Multi-Platform Audience Data: <pre><code># URL: /soundcharts/audience/chart/&lt;track_uuid&gt;/?limit=30\nclass MultiPlatformAudienceChartView(View):\n    def get(self, request, track_uuid):\n        track = get_object_or_404(Track, uuid=track_uuid)\n        platforms = Platform.objects.filter(\n            trackaudiencetimeseries__track=track\n        ).distinct()\n\n        limit = request.GET.get('limit', 30)\n        chart_data = {}\n\n        for platform in platforms:\n            platform_data = TrackAudienceTimeSeries.get_chart_data(track, platform, limit)\n            chart_data[platform.slug] = {\n                'labels': [item['date'] for item in platform_data],\n                'data': [item['audience_value'] for item in platform_data]\n            }\n\n        return JsonResponse({\n            'success': True,\n            'track': {\n                'name': track.name,\n                'uuid': track.uuid,\n                'credit_name': track.credit_name\n            },\n            'platforms': list(platforms.values('name', 'slug')),\n            'chart_data': chart_data\n        })\n</code></pre></p>"},{"location":"development/api-frontend-integration/#data-processing-and-optimization","title":"Data Processing and Optimization","text":""},{"location":"development/api-frontend-integration/#audience-data-processing","title":"Audience Data Processing","text":"<p>Model Implementation: <pre><code># apps/soundcharts/models.py\nclass TrackAudienceTimeSeries(models.Model):\n    track = models.ForeignKey(Track, on_delete=models.CASCADE)\n    platform = models.ForeignKey(Platform, on_delete=models.CASCADE)\n    date = models.DateField()\n    audience_value = models.BigIntegerField()\n\n    @classmethod\n    def get_chart_data(cls, track, platform, limit=None):\n        queryset = cls.objects.filter(track=track, platform=platform)\n\n        if limit:\n            # Get the most recent N records, then sort for display\n            recent_records = queryset.order_by('-date')[:limit]\n            recent_records = list(recent_records)\n            recent_records.sort(key=lambda x: x.date)\n            return [{'date': record.date, 'audience_value': record.audience_value} for record in recent_records]\n        else:\n            # No limit, just order by date ascending\n            return queryset.order_by('date').values('date', 'audience_value')\n</code></pre></p> <p>Data Verification and Fix: <pre><code># debug_audience_charts.py\ndef verify_chart_data(track_uuid=None):\n    if track_uuid:\n        tracks = Track.objects.filter(uuid=track_uuid)\n    else:\n        tracks = Track.objects.filter(trackaudiencetimeseries__isnull=False).distinct()\n\n    for track in tracks:\n        print(f\"\\n=== Track: {track.name} ({track.uuid}) ===\")\n\n        # Get all audience data for this track\n        all_data = TrackAudienceTimeSeries.objects.filter(track=track).order_by('-date')\n\n        if not all_data.exists():\n            print(\"No audience data found\")\n            continue\n\n        print(f\"Total data points: {all_data.count()}\")\n        print(f\"Latest date: {all_data.first().date}\")\n        print(f\"Oldest date: {all_data.last().date}\")\n\n        # Test chart data method\n        for platform in Platform.objects.filter(trackaudiencetimeseries__track=track).distinct():\n            chart_data = TrackAudienceTimeSeries.get_chart_data(track, platform, limit=30)\n            print(f\"Platform {platform.name}: {len(chart_data)} data points\")\n            if chart_data:\n                print(f\"  Chart data range: {chart_data[0]['date']} to {chart_data[-1]['date']}\")\n</code></pre></p>"},{"location":"development/api-frontend-integration/#frontend-integration-features","title":"Frontend Integration Features","text":""},{"location":"development/api-frontend-integration/#admin-interface-enhancements","title":"Admin Interface Enhancements","text":""},{"location":"development/api-frontend-integration/#track-admin-alerts-system","title":"Track Admin Alerts System","text":"<p>JavaScript Implementation: <pre><code>// static/assets/track-admin-alerts.js\nfunction showTrackAlert(message, type) {\n    // Remove existing alerts\n    hideTrackAlert();\n\n    // Create alert element\n    const alertDiv = document.createElement('div');\n    alertDiv.className = `alert alert-${type}`;\n    alertDiv.innerHTML = `\n        &lt;div class=\"alert-content\"&gt;\n            &lt;span class=\"alert-message\"&gt;${message}&lt;/span&gt;\n            &lt;button type=\"button\" class=\"alert-close\" onclick=\"hideTrackAlert()\"&gt;\u00d7&lt;/button&gt;\n        &lt;/div&gt;\n    `;\n\n    // Insert at top of content area\n    const contentArea = document.querySelector('.content-main');\n    if (contentArea) {\n        contentArea.insertBefore(alertDiv, contentArea.firstChild);\n\n        // Auto-hide success alerts after 5 seconds\n        if (type === 'success') {\n            setTimeout(hideTrackAlert, 5000);\n        }\n    }\n}\n\nfunction fetchTrackMetadata(trackId) {\n    const button = event.target;\n    const originalText = button.textContent;\n\n    button.disabled = true;\n    button.textContent = 'Fetching...';\n\n    fetch(`/admin/soundcharts/track/${trackId}/fetch-metadata/`, {\n        method: 'POST',\n        headers: {\n            'X-CSRFToken': getCSRFToken(),\n            'Content-Type': 'application/json',\n        },\n    })\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        if (data.success) {\n            showTrackAlert('Metadata fetched successfully!', 'success');\n            // Reload page to show updated data\n            setTimeout(() =&gt; window.location.reload(), 1500);\n        } else {\n            showTrackAlert(data.error || 'Failed to fetch metadata', 'error');\n        }\n    })\n    .catch(error =&gt; {\n        showTrackAlert('Network error occurred', 'error');\n    })\n    .finally(() =&gt; {\n        button.disabled = false;\n        button.textContent = originalText;\n    });\n}\n</code></pre></p>"},{"location":"development/api-frontend-integration/#admin-import-templates-consistency","title":"Admin Import Templates Consistency","text":"<p>Unified CSS Framework: <pre><code>/* static/assets/admin-import.css */\n.module {\n    background: #fff;\n    border: 1px solid #e5e7eb;\n    border-radius: 0.5rem;\n    margin-bottom: 1rem;\n    padding: 1.5rem;\n}\n\n.form-row {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1rem;\n    margin-bottom: 1rem;\n}\n\n.field-box {\n    flex: 1;\n    min-width: 200px;\n}\n\n.vTextField, .vSelectField, .vIntegerField {\n    width: 100%;\n    padding: 0.5rem;\n    border: 1px solid #d1d5db;\n    border-radius: 0.375rem;\n    font-size: 0.875rem;\n}\n\n.alert-success, .alert-error, .alert-warning, .alert-info {\n    padding: 1rem;\n    margin-bottom: 1rem;\n    border-radius: 0.375rem;\n    border-left: 4px solid;\n}\n\n.alert-success {\n    background-color: #d1fae5;\n    border-left-color: #10b981;\n    color: #065f46;\n}\n\n.alert-error {\n    background-color: #fee2e2;\n    border-left-color: #ef4444;\n    color: #991b1b;\n}\n</code></pre></p> <p>Unified JavaScript Framework: <pre><code>// static/assets/admin-import.js\nfunction showAlert(message, type) {\n    // Unified alert system for all admin import templates\n    const alertDiv = document.createElement('div');\n    alertDiv.className = `alert alert-${type}`;\n    alertDiv.innerHTML = `\n        &lt;div class=\"alert-content\"&gt;\n            &lt;span class=\"alert-message\"&gt;${message}&lt;/span&gt;\n            &lt;button type=\"button\" class=\"alert-close\" onclick=\"hideAlert()\"&gt;\u00d7&lt;/button&gt;\n        &lt;/div&gt;\n    `;\n\n    const contentArea = document.querySelector('.content-main');\n    if (contentArea) {\n        contentArea.insertBefore(alertDiv, contentArea.firstChild);\n    }\n}\n\nfunction fetchCharts() {\n    showLoading(true);\n\n    const limit = document.getElementById('limit').value;\n    const offset = document.getElementById('offset').value;\n\n    fetch(`/admin/soundcharts/chart/fetch-charts/?limit=${limit}&amp;offset=${offset}`)\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            if (data.success) {\n                displayCharts(data.charts);\n            } else {\n                showAlert(data.error || 'Failed to fetch charts', 'error');\n            }\n        })\n        .catch(error =&gt; {\n            showAlert('Network error occurred', 'error');\n        })\n        .finally(() =&gt; {\n            showLoading(false);\n        });\n}\n\nfunction addChart(slug, button) {\n    const originalText = button.textContent;\n    button.disabled = true;\n    button.textContent = 'Adding...';\n\n    fetch(`/admin/soundcharts/chart/add-chart/`, {\n        method: 'POST',\n        headers: {\n            'X-CSRFToken': getCSRFToken(),\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ slug: slug })\n    })\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        if (data.success) {\n            showAlert(`Chart ${slug} added successfully!`, 'success');\n            button.textContent = 'Added';\n            button.disabled = true;\n        } else {\n            showAlert(data.error || 'Failed to add chart', 'error');\n            button.disabled = false;\n            button.textContent = originalText;\n        }\n    })\n    .catch(error =&gt; {\n        showAlert('Network error occurred', 'error');\n        button.disabled = false;\n        button.textContent = originalText;\n    });\n}\n</code></pre></p>"},{"location":"development/api-frontend-integration/#extended-user-model-integration","title":"Extended User Model Integration","text":""},{"location":"development/api-frontend-integration/#profile-management-system","title":"Profile Management System","text":"<p>Model Implementation: <pre><code># apps/users/models.py\nROLE_CHOICES = (\n    ('admin', 'Admin'),\n    ('user', 'User'),\n)\n\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='user')\n    full_name = models.CharField(max_length=255, null=True, blank=True)\n    country = models.CharField(max_length=255, null=True, blank=True)\n    city = models.CharField(max_length=255, null=True, blank=True)\n    zip_code = models.CharField(max_length=255, null=True, blank=True)\n    address = models.CharField(max_length=255, null=True, blank=True)\n    phone = models.CharField(max_length=255, null=True, blank=True)\n    avatar = models.ImageField(upload_to='avatar', null=True, blank=True)\n\n    def __str__(self):\n        return self.user.username\n</code></pre></p> <p>Form Implementation: <pre><code># apps/users/forms.py\nclass ProfileForm(forms.ModelForm):\n    class Meta:\n        model = Profile\n        exclude = ('user', 'role', 'avatar',)\n\n    def __init__(self, *args, **kwargs):\n        super(ProfileForm, self).__init__(*args, **kwargs)\n        for field_name, field in self.fields.items():\n            self.fields[field_name].widget.attrs['placeholder'] = field.label\n            self.fields[field_name].widget.attrs['class'] = 'shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'\n            self.fields[field_name].widget.attrs['required'] = False\n</code></pre></p> <p>View Implementation: <pre><code># apps/users/views.py\ndef profile(request):\n    profile = get_object_or_404(Profile, user=request.user)\n    if request.method == 'POST':\n        form = ProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Profile updated successfully')\n    else:\n        form = ProfileForm(instance=profile)\n\n    context = {\n        'form': form,\n        'segment': 'profile',\n    }\n    return render(request, 'dashboard/profile.html', context)\n</code></pre></p> <p>Template Integration: <pre><code>&lt;!-- templates/dashboard/profile.html --&gt;\n{% for field in form %}\n    &lt;div class=\"col-span-6 sm:col-span-3\"&gt;\n        &lt;label for=\"{{ field.id_for_label }}\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"&gt;{{ field.label }}&lt;/label&gt;\n        {{ field }}\n    &lt;/div&gt;\n{% endfor %}\n</code></pre></p>"},{"location":"development/api-frontend-integration/#datatables-integration","title":"DataTables Integration","text":""},{"location":"development/api-frontend-integration/#dynamic-table-management","title":"Dynamic Table Management","text":"<p>Form Implementation: <pre><code># apps/tables/forms.py\nfrom django import forms\nfrom apps.pages.models import Product\n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super(ProductForm, self).__init__(*args, **kwargs)\n        for field_name, field in self.fields.items():\n            field.widget.attrs['class'] = 'shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'\n</code></pre></p> <p>View Implementation: <pre><code># apps/tables/views.py\ndef datatables(request):\n    filters = product_filter(request)\n    product_list = Product.objects.filter(**filters)\n    form = ProductForm()\n\n    # Pagination\n    paginator = Paginator(product_list, 25)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n\n    if request.method == 'POST':\n        form = ProductForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Product created successfully')\n            return redirect('apps:datatables')\n\n    context = {\n        'page_obj': page_obj,\n        'form': form,\n        'segment': 'datatables',\n        'parent': 'apps',\n    }\n    return render(request, 'apps/datatables.html', context)\n</code></pre></p> <p>Frontend Integration: <pre><code>// templates/apps/datatables.html\nfetch('/api/product/')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        $('#products-body').DataTable({\n            data: data,\n            columns: [\n                { title: 'ID', data: 'id' },\n                { title: 'Name', data: 'name' },\n                { title: 'Info', data: 'info' },\n                { title: 'Price', data: 'price' },\n                { \n                    title: 'Actions', \n                    data: null,\n                    render: function(data, type, row) {\n                        return `\n                            &lt;button onclick=\"editProduct(${row.id})\" class=\"btn btn-sm btn-primary\"&gt;Edit&lt;/button&gt;\n                            &lt;button onclick=\"deleteProduct(${row.id})\" class=\"btn btn-sm btn-danger\"&gt;Delete&lt;/button&gt;\n                        `;\n                    }\n                }\n            ],\n            responsive: true,\n            pageLength: 25,\n            order: [[0, 'desc']]\n        });\n    })\n    .catch(error =&gt; {\n        console.error('Error loading data:', error);\n    });\n</code></pre></p>"},{"location":"development/api-frontend-integration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/api-frontend-integration/#frontend-performance","title":"Frontend Performance","text":""},{"location":"development/api-frontend-integration/#chart-rendering-optimization","title":"Chart Rendering Optimization","text":"<p>Lazy Loading: <pre><code>// Load charts only when visible\nconst observer = new IntersectionObserver((entries) =&gt; {\n    entries.forEach(entry =&gt; {\n        if (entry.isIntersecting) {\n            const chartId = entry.target.id;\n            loadChart(chartId);\n            observer.unobserve(entry.target);\n        }\n    });\n});\n\ndocument.querySelectorAll('.chart-container').forEach(container =&gt; {\n    observer.observe(container);\n});\n</code></pre></p> <p>Memory Management: <pre><code>// Clean up charts when not needed\nfunction destroyChart(chartId) {\n    const chart = ApexCharts.getChartByID(chartId);\n    if (chart) {\n        chart.destroy();\n    }\n}\n\n// Clean up on page unload\nwindow.addEventListener('beforeunload', () =&gt; {\n    document.querySelectorAll('.apexcharts-canvas').forEach(canvas =&gt; {\n        const chartId = canvas.id;\n        destroyChart(chartId);\n    });\n});\n</code></pre></p>"},{"location":"development/api-frontend-integration/#api-optimization","title":"API Optimization","text":"<p>Caching Strategy: <pre><code># views.py\nfrom django.core.cache import cache\n\ndef get_chart_data(request, track_uuid, platform_slug):\n    cache_key = f\"chart_data_{track_uuid}_{platform_slug}\"\n    cached_data = cache.get(cache_key)\n\n    if cached_data:\n        return JsonResponse(cached_data)\n\n    # Generate data\n    data = generate_chart_data(track_uuid, platform_slug)\n\n    # Cache for 1 hour\n    cache.set(cache_key, data, 3600)\n\n    return JsonResponse(data)\n</code></pre></p> <p>Database Optimization: <pre><code># Efficient queries with select_related and prefetch_related\ndef get_track_data(track_uuid):\n    return Track.objects.select_related(\n        'primary_artist', 'primary_genre'\n    ).prefetch_related(\n        'artists', 'genres', 'trackaudiencetimeseries__platform'\n    ).get(uuid=track_uuid)\n</code></pre></p>"},{"location":"development/api-frontend-integration/#error-handling-and-user-experience","title":"Error Handling and User Experience","text":""},{"location":"development/api-frontend-integration/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":""},{"location":"development/api-frontend-integration/#frontend-error-handling","title":"Frontend Error Handling","text":"<p>API Error Handling: <pre><code>async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (!data.success) {\n            throw new Error(data.error || 'Unknown error occurred');\n        }\n\n        return data;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        showAlert(`Error: ${error.message}`, 'error');\n        throw error;\n    }\n}\n</code></pre></p> <p>Chart Error Handling: <pre><code>function renderChart(chartId, options) {\n    try {\n        const chart = new ApexCharts(document.getElementById(chartId), options);\n        chart.render();\n        return chart;\n    } catch (error) {\n        console.error('Error rendering chart:', error);\n        showAlert('Failed to render chart. Please refresh the page.', 'error');\n        return null;\n    }\n}\n</code></pre></p>"},{"location":"development/api-frontend-integration/#backend-error-handling","title":"Backend Error Handling","text":"<p>API Error Responses: <pre><code># views.py\ndef handle_api_error(error, context=\"\"):\n    logger.error(f\"API Error {context}: {str(error)}\")\n\n    if isinstance(error, Track.DoesNotExist):\n        return JsonResponse({\n            'success': False,\n            'error': 'Track not found',\n            'code': 'TRACK_NOT_FOUND'\n        }, status=404)\n\n    if isinstance(error, Platform.DoesNotExist):\n        return JsonResponse({\n            'success': False,\n            'error': 'Platform not found',\n            'code': 'PLATFORM_NOT_FOUND'\n        }, status=404)\n\n    return JsonResponse({\n        'success': False,\n        'error': 'Internal server error',\n        'code': 'INTERNAL_ERROR'\n    }, status=500)\n</code></pre></p>"},{"location":"development/api-frontend-integration/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":""},{"location":"development/api-frontend-integration/#frontend-testing","title":"Frontend Testing","text":"<p>Chart Rendering Tests: <pre><code>// Test chart configuration\nfunction testChartConfiguration() {\n    const options = getMainChartOptions();\n\n    // Verify required properties\n    assert(options.chart !== undefined, 'Chart configuration missing');\n    assert(options.series !== undefined, 'Series data missing');\n    assert(options.xaxis !== undefined, 'X-axis configuration missing');\n\n    // Verify data format\n    assert(Array.isArray(options.series), 'Series should be an array');\n    assert(options.series.length &gt; 0, 'Series should contain data');\n}\n\n// Test API integration\nasync function testAPIIntegration() {\n    try {\n        const data = await fetchData('/api/product/');\n        assert(data.length &gt; 0, 'API should return data');\n        assert(data[0].hasOwnProperty('id'), 'Data should have id property');\n        assert(data[0].hasOwnProperty('name'), 'Data should have name property');\n    } catch (error) {\n        console.error('API test failed:', error);\n    }\n}\n</code></pre></p>"},{"location":"development/api-frontend-integration/#backend-testing","title":"Backend Testing","text":"<p>API Endpoint Tests: <pre><code># tests.py\nfrom django.test import TestCase, Client\nfrom django.urls import reverse\nimport json\n\nclass ChartAPITestCase(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.track = Track.objects.create(\n            name=\"Test Track\",\n            uuid=\"test-uuid-123\"\n        )\n        self.platform = Platform.objects.create(\n            name=\"Test Platform\",\n            slug=\"test-platform\"\n        )\n\n    def test_chart_data_api(self):\n        url = reverse('soundcharts:audience_chart', args=[\n            self.track.uuid, self.platform.slug\n        ])\n        response = self.client.get(url)\n\n        self.assertEqual(response.status_code, 200)\n        data = json.loads(response.content)\n        self.assertTrue(data['success'])\n        self.assertIn('chart_data', data)\n        self.assertIn('track', data)\n        self.assertIn('platform', data)\n</code></pre></p>"},{"location":"development/api-frontend-integration/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/api-frontend-integration/#planned-features","title":"Planned Features","text":"<ol> <li>Real-time Updates: WebSocket integration for live chart updates</li> <li>Advanced Visualizations: 3D charts, heatmaps, and advanced chart types</li> <li>Interactive Features: Chart zooming, filtering, and drill-down capabilities</li> <li>Export Functionality: PDF and image export for charts</li> <li>Mobile Optimization: Touch-friendly chart interactions</li> <li>Performance Monitoring: Chart rendering performance metrics</li> <li>Accessibility: Screen reader support and keyboard navigation</li> <li>Internationalization: Multi-language support for chart labels</li> </ol>"},{"location":"development/api-frontend-integration/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>Virtual Scrolling: For large datasets</li> <li>Progressive Loading: Load chart data in chunks</li> <li>Service Workers: Offline chart functionality</li> <li>WebAssembly: High-performance data processing</li> <li>GraphQL: More efficient data fetching</li> <li>Micro-frontends: Modular chart components</li> </ol>"},{"location":"development/api-frontend-integration/#conclusion","title":"Conclusion","text":"<p>The API and frontend integration in MusicChartsAI provides a comprehensive, scalable, and user-friendly platform for music data visualization and management. The system combines advanced charting capabilities, robust API endpoints, efficient data processing, and excellent user experience to deliver a professional-grade music analytics platform.</p> <p>Key strengths include: - Advanced Charting: ApexCharts integration with dynamic data visualization - Robust API Design: RESTful endpoints with comprehensive error handling - User Experience: Consistent admin interface with real-time feedback - Performance: Optimized data processing and caching strategies - Extensibility: Modular architecture supporting future enhancements - Quality Assurance: Comprehensive testing and error handling</p>"},{"location":"development/architecture/","title":"Architecture","text":""},{"location":"development/architecture/#system-architecture","title":"System Architecture","text":"<p>Overview of MusicChartsAI system architecture.</p>"},{"location":"development/architecture/#components","title":"Components","text":"<ul> <li>Django application</li> <li>Celery workers</li> <li>Redis message broker</li> <li>PostgreSQL database</li> <li>Nginx web server</li> </ul>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":"<p>Architecture diagrams and details coming soon.</p> <p>Detailed architecture documentation coming soon.</p>"},{"location":"development/contributing/","title":"Contributing","text":""},{"location":"development/data-models/","title":"Data Models and Relationships","text":""},{"location":"development/data-models/#overview","title":"Overview","text":"<p>This document provides a comprehensive overview of the data models and relationships implemented in MusicChartsAI, including the enhanced models for tracks, artists, genres, and their integrations with external APIs.</p>"},{"location":"development/data-models/#core-models","title":"Core Models","text":""},{"location":"development/data-models/#track-model","title":"Track Model","text":"<p>The Track model serves as the central entity for music data, with comprehensive metadata support and API integrations.</p>"},{"location":"development/data-models/#key-fields","title":"Key Fields","text":"<p>Basic Information: - <code>name</code>: Track title - <code>slug</code>: URL-friendly identifier - <code>uuid</code>: SoundCharts UUID for API integration - <code>credit_name</code>: Artist credit name - <code>image_url</code>: Track artwork URL</p> <p>Metadata Fields: - <code>release_date</code>: Track release date - <code>duration</code>: Track duration in seconds - <code>isrc</code>: International Standard Recording Code - <code>label</code>: Record label - <code>metadata_fetched_at</code>: Timestamp of last metadata fetch - <code>audience_fetched_at</code>: Timestamp of last audience data fetch</p> <p>Relationships: - <code>artists</code>: ManyToManyField to all associated artists - <code>primary_artist</code>: ForeignKey to the main artist - <code>genres</code>: ManyToManyField to all associated genres - <code>primary_genre</code>: ForeignKey to the main genre - <code>album</code>: ForeignKey to the album (if applicable)</p>"},{"location":"development/data-models/#usage-examples","title":"Usage Examples","text":"<pre><code># Create track with metadata\ntrack = Track.objects.create(\n    name=\"bad guy\",\n    uuid=\"11e81bcc-9c1c-ce38-b96b-a0369fe50396\",\n    credit_name=\"Billie Eilish\",\n    release_date=\"2019-03-29\",\n    duration=194,\n    isrc=\"USRC11900595\"\n)\n\n# Add artists and genres\ntrack.artists.set([billie_eilish])\ntrack.primary_artist = billie_eilish\ntrack.genres.set([electronic, alternative])\ntrack.primary_genre = electronic\n</code></pre>"},{"location":"development/data-models/#artist-model","title":"Artist Model","text":"<p>Enhanced artist model with SoundCharts API integration and relationship management.</p>"},{"location":"development/data-models/#key-features","title":"Key Features","text":"<p>SoundCharts Integration: - <code>uuid</code>: SoundCharts UUID for reliable identification - <code>slug</code>: URL-friendly identifier - <code>app_url</code>: SoundCharts application URL - <code>image_url</code>: Artist image URL</p> <p>Relationship Management: - <code>create_from_soundcharts()</code>: Class method for API data processing - Automatic field updates when artist data changes - UUID-based identification prevents duplicates</p>"},{"location":"development/data-models/#usage-examples_1","title":"Usage Examples","text":"<pre><code># Create artist from SoundCharts data\nartist_data = {\n    \"uuid\": \"11e81bcc-9c1c-ce38-b96b-a0369fe50396\",\n    \"slug\": \"billie-eilish\",\n    \"name\": \"Billie Eilish\",\n    \"appUrl\": \"https://app.soundcharts.com/app/artist/billie-eilish/overview\",\n    \"imageUrl\": \"https://assets.soundcharts.com/artist/c/1/c/11e81bcc-9c1c-ce38-b96b-a0369fe50396.jpg\"\n}\n\nartist = Artist.create_from_soundcharts(artist_data)\n\n# Query tracks by artist\nbillie_tracks = artist.tracks.all()\nbillie_primary_tracks = artist.primary_tracks.all()\n</code></pre>"},{"location":"development/data-models/#genre-model-hierarchical","title":"Genre Model (Hierarchical)","text":"<p>The Genre model supports hierarchical relationships that align with the SoundCharts API data structure.</p>"},{"location":"development/data-models/#key-features_1","title":"Key Features","text":"<p>Hierarchical Structure: - <code>parent</code>: ForeignKey to parent genre (null for root genres) - <code>level</code>: Hierarchy level (0=root, 1=sub) - <code>soundcharts_root</code>: Original root genre name from API</p> <p>SoundCharts Integration: - Direct mapping to SoundCharts genre data structure - <code>create_from_soundcharts()</code> method handles API data processing - Preservation of original SoundCharts root genre names</p>"},{"location":"development/data-models/#usage-examples_2","title":"Usage Examples","text":"<pre><code># Create genres from SoundCharts data\ngenre_data = {\n    \"root\": \"electronic\",\n    \"sub\": [\"house\", \"techno\", \"ambient\"]\n}\n\nroot_genre, subgenres = Genre.create_from_soundcharts(genre_data)\n\n# Query genres\nroot_genres = Genre.get_root_genres()\nelectronic = Genre.objects.get(name=\"electronic\")\nsubgenres = electronic.get_all_subgenres()\n\n# Check hierarchy\nif electronic.is_root:\n    print(\"This is a root genre\")\n</code></pre>"},{"location":"development/data-models/#api-integration-models","title":"API Integration Models","text":""},{"location":"development/data-models/#chartsyncschedule-model","title":"ChartSyncSchedule Model","text":"<p>Manages automated chart synchronization schedules.</p>"},{"location":"development/data-models/#key-fields_1","title":"Key Fields","text":"<ul> <li><code>chart</code>: ForeignKey to Chart model</li> <li><code>is_active</code>: Boolean flag for schedule activation</li> <li><code>sync_frequency</code>: Frequency of synchronization (daily, weekly, monthly)</li> <li><code>last_sync_at</code>: Timestamp of last successful sync</li> <li><code>next_sync_at</code>: Timestamp of next scheduled sync</li> <li><code>total_executions</code>: Count of total sync executions</li> <li><code>successful_executions</code>: Count of successful syncs</li> </ul>"},{"location":"development/data-models/#usage-examples_3","title":"Usage Examples","text":"<pre><code># Create sync schedule\nschedule = ChartSyncSchedule.objects.create(\n    chart=spotify_chart,\n    sync_frequency='daily',\n    is_active=True\n)\n\n# Get active schedules\nactive_schedules = ChartSyncSchedule.objects.filter(is_active=True)\n</code></pre>"},{"location":"development/data-models/#chartsyncexecution-model","title":"ChartSyncExecution Model","text":"<p>Tracks individual chart synchronization executions.</p>"},{"location":"development/data-models/#key-fields_2","title":"Key Fields","text":"<ul> <li><code>schedule</code>: ForeignKey to ChartSyncSchedule</li> <li><code>status</code>: Execution status (pending, running, completed, failed)</li> <li><code>started_at</code>: Execution start timestamp</li> <li><code>completed_at</code>: Execution completion timestamp</li> <li><code>total_entries</code>: Total entries processed</li> <li><code>successful_entries</code>: Successfully processed entries</li> <li><code>failed_entries</code>: Failed entries</li> <li><code>error_message</code>: Error details if execution failed</li> </ul>"},{"location":"development/data-models/#metadatafetchtask-model","title":"MetadataFetchTask Model","text":"<p>Tracks metadata fetching operations for tracks and artists.</p>"},{"location":"development/data-models/#key-fields_3","title":"Key Fields","text":"<ul> <li><code>task_type</code>: Type of task (metadata, audience, bulk_metadata, bulk_audience)</li> <li><code>status</code>: Task status (pending, running, completed, failed, cancelled)</li> <li><code>progress</code>: Progress tracking (total, processed, successful, failed)</li> <li><code>celery_task_id</code>: Celery task identifier</li> <li><code>error_message</code>: Error details if task failed</li> <li><code>created_at</code>, <code>updated_at</code>: Timestamps</li> </ul>"},{"location":"development/data-models/#data-processing-and-integration","title":"Data Processing and Integration","text":""},{"location":"development/data-models/#track-metadata-integration","title":"Track Metadata Integration","text":""},{"location":"development/data-models/#celery-tasks","title":"Celery Tasks","text":"<p><code>fetch_track_metadata(track_uuid)</code>: - Fetches metadata for a single track from SoundCharts API - Updates the track model with enhanced metadata fields - Runs asynchronously in the background</p> <p><code>fetch_bulk_track_metadata(task_id)</code>: - Processes multiple tracks in bulk - Updates progress tracking in the MetadataFetchTask model - Handles errors gracefully and continues processing</p> <p><code>fetch_all_tracks_metadata()</code>: - Automatically identifies tracks that need metadata updates - Creates bulk metadata fetch tasks for efficiency - Considers tracks without metadata or older than 30 days</p>"},{"location":"development/data-models/#data-mapping","title":"Data Mapping","text":"<p>The implementation maps the following API fields to model fields: - <code>object.name</code> \u2192 <code>name</code> - <code>object.slug</code> \u2192 <code>slug</code> - <code>object.creditName</code> \u2192 <code>credit_name</code> - <code>object.imageUrl</code> \u2192 <code>image_url</code> - <code>object.releaseDate</code> \u2192 <code>release_date</code> - <code>object.duration</code> \u2192 <code>duration</code> - <code>object.isrc</code> \u2192 <code>isrc</code> - <code>object.label.name</code> \u2192 <code>label</code> - <code>object.genres[0].name</code> \u2192 <code>genre</code></p>"},{"location":"development/data-models/#artist-track-relationships","title":"Artist-Track Relationships","text":""},{"location":"development/data-models/#multiple-artist-support","title":"Multiple Artist Support","text":"<ul> <li>Many-to-Many Relationship: Tracks can have multiple artists</li> <li>Primary Artist: One artist designated as the main artist</li> <li>SoundCharts Integration: Direct mapping to SoundCharts artist data structure</li> </ul>"},{"location":"development/data-models/#data-processing","title":"Data Processing","text":"<p>When track metadata is fetched: 1. Parse Artists Array: Extract artist data from SoundCharts API response 2. Create/Update Artists: Use <code>Artist.create_from_soundcharts()</code> for each artist 3. Link to Track: Set ManyToManyField and primary artist 4. Preserve Relationships: Maintain existing artist-track connections</p>"},{"location":"development/data-models/#hierarchical-genre-processing","title":"Hierarchical Genre Processing","text":""},{"location":"development/data-models/#api-data-structure","title":"API Data Structure","text":"<p>SoundCharts genre data format: <pre><code>{\n  \"genres\": [\n    {\n      \"root\": \"electronic\",\n      \"sub\": [\"house\", \"techno\", \"ambient\"]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/data-models/#processing-logic","title":"Processing Logic","text":"<ol> <li>Root Genre Creation: Create root genre if it doesn't exist</li> <li>Subgenre Creation: Create subgenres with proper parent relationships</li> <li>Track Association: Link tracks to appropriate genres</li> <li>Primary Genre: Set primary genre to root genre</li> </ol>"},{"location":"development/data-models/#admin-interface-enhancements","title":"Admin Interface Enhancements","text":""},{"location":"development/data-models/#track-admin-updates","title":"Track Admin Updates","text":"<p>List Display: Shows <code>primary_artist</code> and <code>primary_genre</code> in the track list Filters: Added <code>artists</code>, <code>primary_artist</code>, <code>genres</code>, and <code>primary_genre</code> filters Fieldsets: Updated to include both relationship fields and individual fields Actions: Bulk actions for metadata fetching and API synchronization</p>"},{"location":"development/data-models/#artist-management","title":"Artist Management","text":"<ul> <li>Artists are automatically created/updated when track metadata is fetched</li> <li>UUID-based identification prevents duplicates</li> <li>All SoundCharts artist fields are preserved</li> <li>Comprehensive artist-track relationship management</li> </ul>"},{"location":"development/data-models/#genre-management","title":"Genre Management","text":"<ul> <li>Hierarchical display shows parent-child relationships</li> <li>Automatic slug generation from genre names</li> <li>SoundCharts integration preserves original API data</li> <li>Support for both root and subgenre queries</li> </ul>"},{"location":"development/data-models/#database-optimization","title":"Database Optimization","text":""},{"location":"development/data-models/#indexing-strategy","title":"Indexing Strategy","text":"<p>Track Model Indexes: <pre><code>class Meta:\n    indexes = [\n        models.Index(fields=['uuid']),\n        models.Index(fields=['primary_artist']),\n        models.Index(fields=['primary_genre']),\n        models.Index(fields=['metadata_fetched_at']),\n        models.Index(fields=['audience_fetched_at']),\n    ]\n</code></pre></p> <p>Artist Model Indexes: <pre><code>class Meta:\n    indexes = [\n        models.Index(fields=['uuid']),\n        models.Index(fields=['slug']),\n    ]\n</code></pre></p> <p>Genre Model Indexes: <pre><code>class Meta:\n    indexes = [\n        models.Index(fields=['parent']),\n        models.Index(fields=['level']),\n        models.Index(fields=['soundcharts_root']),\n    ]\n</code></pre></p>"},{"location":"development/data-models/#query-optimization","title":"Query Optimization","text":"<p>Efficient Queries: <pre><code># Use select_related for foreign keys\ntracks = Track.objects.select_related('primary_artist', 'primary_genre')\n\n# Use prefetch_related for many-to-many\ntracks = Track.objects.prefetch_related('artists', 'genres')\n\n# Combined optimization\ntracks = Track.objects.select_related('primary_artist', 'primary_genre').prefetch_related('artists', 'genres')\n</code></pre></p>"},{"location":"development/data-models/#management-commands","title":"Management Commands","text":""},{"location":"development/data-models/#track-metadata-commands","title":"Track Metadata Commands","text":"<pre><code># Fetch metadata for a specific track\npython manage.py fetch_track_metadata --track-uuid &lt;uuid&gt;\n\n# Create bulk metadata fetch task\npython manage.py fetch_track_metadata --bulk\n\n# Fetch metadata for all tracks that need it\npython manage.py fetch_track_metadata --all\n\n# Dry run to see what would be done\npython manage.py fetch_track_metadata --bulk --dry-run\n</code></pre>"},{"location":"development/data-models/#chart-sync-commands","title":"Chart Sync Commands","text":"<pre><code># Sync specific chart\npython manage.py sync_chart_rankings --chart-id &lt;id&gt;\n\n# Sync all active charts\npython manage.py sync_chart_rankings --all\n\n# Create sync schedule\npython manage.py create_sync_schedule --chart-id &lt;id&gt; --frequency daily\n</code></pre>"},{"location":"development/data-models/#error-handling-and-monitoring","title":"Error Handling and Monitoring","text":""},{"location":"development/data-models/#error-handling","title":"Error Handling","text":"<ul> <li>API failures are logged and tracked</li> <li>Individual track failures don't stop bulk operations</li> <li>Retry mechanisms using the retry_count field</li> <li>Error messages are stored in task models</li> </ul>"},{"location":"development/data-models/#monitoring","title":"Monitoring","text":"<p>Admin Interface: - Real-time progress monitoring in MetadataFetchTask admin - Visual progress bars and status indicators - Detailed error messages and timestamps</p> <p>Logging: - Comprehensive logging at INFO, WARNING, and ERROR levels - Task execution tracking - API response logging for debugging</p> <p>Celery Integration: - Task IDs are stored for monitoring - Progress updates in real-time - Background processing for large datasets</p>"},{"location":"development/data-models/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/data-models/#planned-features","title":"Planned Features","text":"<ol> <li>Retry Logic: Implement automatic retry for failed metadata fetches</li> <li>Rate Limiting: Add API rate limiting to prevent overwhelming external APIs</li> <li>Incremental Updates: Only fetch metadata for tracks that have changed</li> <li>Webhooks: Implement webhooks for real-time metadata updates</li> <li>Scheduling: Add periodic metadata refresh tasks</li> <li>Analytics: Track genre popularity and trends</li> <li>Collaboration Tracking: Identify frequent artist collaborations</li> </ol>"},{"location":"development/data-models/#performance-improvements","title":"Performance Improvements","text":"<ol> <li>Caching: Implement Redis caching for frequently accessed data</li> <li>Database Optimization: Add more indexes for common query patterns</li> <li>Batch Processing: Optimize bulk operations for large datasets</li> <li>Connection Pooling: Implement database connection pooling</li> </ol>"},{"location":"development/data-models/#configuration","title":"Configuration","text":""},{"location":"development/data-models/#required-settings","title":"Required Settings","text":"<pre><code># SoundCharts API Configuration\nSOUNDCHARTS_APP_ID = 'your_app_id'\nSOUNDCHARTS_API_KEY = 'your_api_key'\nSOUNDCHARTS_API_URL = 'your_api_url'\n\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n\n# Database Configuration\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'musiccharts_db',\n        # ... other database settings\n    }\n}\n</code></pre>"},{"location":"development/data-models/#celery-configuration","title":"Celery Configuration","text":"<ul> <li>Ensure Celery worker is running for background tasks</li> <li>Configure result backend for task monitoring</li> <li>Set appropriate task timeouts and retry policies</li> </ul>"},{"location":"development/data-models/#testing","title":"Testing","text":""},{"location":"development/data-models/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test individual model methods and properties</li> <li>Mock API responses for testing</li> <li>Verify data mapping and error handling</li> <li>Test relationship queries and optimizations</li> </ul>"},{"location":"development/data-models/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test admin interface functionality</li> <li>Verify Celery task execution</li> <li>Test bulk operations with real data</li> <li>Test API integration and data processing</li> </ul>"},{"location":"development/data-models/#manual-testing","title":"Manual Testing","text":"<ul> <li>Use management commands for testing</li> <li>Verify admin interface functionality</li> <li>Monitor task progress in admin</li> <li>Test data consistency and relationships</li> </ul>"},{"location":"development/data-models/#conclusion","title":"Conclusion","text":"<p>The data models and relationships in MusicChartsAI provide a robust foundation for music data management, with comprehensive API integrations, hierarchical data structures, and efficient querying capabilities. The system is designed for scalability, maintainability, and performance, with extensive monitoring and error handling capabilities.</p>"},{"location":"development/features-overview/","title":"Development Features Overview","text":""},{"location":"development/features-overview/#overview","title":"Overview","text":"<p>This document provides a comprehensive overview of the key development features implemented in MusicChartsAI, including advanced admin customizations, data integration systems, and user experience enhancements.</p>"},{"location":"development/features-overview/#core-development-features","title":"Core Development Features","text":""},{"location":"development/features-overview/#1-advanced-admin-customization","title":"1. Advanced Admin Customization","text":""},{"location":"development/features-overview/#custom-admin-ordering-system","title":"Custom Admin Ordering System","text":"<p>Implementation: Complete custom ordering system for Django admin interface</p> <p>Key Features: - Business-logic based app ordering instead of alphabetical - Custom model ordering within each app - Maintainable configuration system - Backward compatibility with existing admin functionality</p> <p>Technical Details: <pre><code># config/admin_apps.py\nclass AdminConfig(DjangoAdminConfig):\n    def ready(self):\n        super().ready()\n\n        def custom_get_app_list(request):\n            app_ordering = {\n                \"Pages\": 1,\n                \"Users\": 2,\n                \"Soundcharts\": 4,\n                \"ACR Cloud\": 6,\n                # ... more apps\n            }\n            # Implementation details...\n</code></pre></p> <p>Benefits: - Improved user experience with logical app ordering - Easy maintenance and updates - Professional admin interface layout</p>"},{"location":"development/features-overview/#enhanced-admin-interfaces","title":"Enhanced Admin Interfaces","text":"<p>Track Admin Enhancements: - Import from API functionality with progress tracking - Bulk metadata fetching with background processing - Enhanced fieldsets and list displays - Real-time progress monitoring</p> <p>Artist and Genre Management: - SoundCharts API integration - Hierarchical genre relationships - Automatic data synchronization - UUID-based identification system</p>"},{"location":"development/features-overview/#2-data-integration-systems","title":"2. Data Integration Systems","text":""},{"location":"development/features-overview/#track-metadata-integration","title":"Track Metadata Integration","text":"<p>Comprehensive Metadata Management: - Automatic metadata fetching from SoundCharts API - Background processing with Celery tasks - Progress tracking and error handling - Bulk operations for large datasets</p> <p>Key Features: <pre><code># Celery tasks for metadata processing\n@shared_task(bind=True, max_retries=3)\ndef fetch_track_metadata(self, track_uuid):\n    # Fetches comprehensive track metadata\n    # Updates track model with enhanced fields\n    # Handles errors and retries\n</code></pre></p> <p>Data Mapping: - <code>object.name</code> \u2192 <code>name</code> - <code>object.slug</code> \u2192 <code>slug</code> - <code>object.creditName</code> \u2192 <code>credit_name</code> - <code>object.imageUrl</code> \u2192 <code>image_url</code> - <code>object.releaseDate</code> \u2192 <code>release_date</code> - <code>object.duration</code> \u2192 <code>duration</code> - <code>object.isrc</code> \u2192 <code>isrc</code> - <code>object.label.name</code> \u2192 <code>label</code> - <code>object.genres[0].name</code> \u2192 <code>genre</code></p>"},{"location":"development/features-overview/#artist-track-relationships","title":"Artist-Track Relationships","text":"<p>Multiple Artist Support: - Many-to-Many relationships between tracks and artists - Primary artist designation for main artist - SoundCharts API integration for artist data - UUID-based identification for reliable matching</p> <p>Usage Examples: <pre><code># Create artist from SoundCharts data\nartist = Artist.create_from_soundcharts(artist_data)\n\n# Add multiple artists to track\ntrack.artists.set([artist1, artist2, artist3])\ntrack.primary_artist = artist1\n\n# Query tracks by artist\nbillie_tracks = artist1.tracks.all()\nbillie_primary_tracks = artist1.primary_tracks.all()\n</code></pre></p>"},{"location":"development/features-overview/#hierarchical-genre-model","title":"Hierarchical Genre Model","text":"<p>Hierarchical Structure: - Root genres and subgenres support - Self-referencing relationships - SoundCharts API alignment - Automatic genre creation and management</p> <p>Implementation: <pre><code># Create genres from SoundCharts data\ngenre_data = {\n    \"root\": \"electronic\",\n    \"sub\": [\"house\", \"techno\", \"ambient\"]\n}\n\nroot_genre, subgenres = Genre.create_from_soundcharts(genre_data)\n\n# Query hierarchical genres\nroot_genres = Genre.get_root_genres()\nelectronic = Genre.objects.get(name=\"electronic\")\nsubgenres = electronic.get_all_subgenres()\n</code></pre></p>"},{"location":"development/features-overview/#3-chart-management-system","title":"3. Chart Management System","text":""},{"location":"development/features-overview/#automated-chart-synchronization","title":"Automated Chart Synchronization","text":"<p>Chart Sync System: - Scheduled synchronization with SoundCharts API - Immediate and scheduled sync options - Complete historical data sync - Track metadata integration - On-demand audience data fetching</p> <p>Key Components: <pre><code># ChartSyncSchedule model\nclass ChartSyncSchedule(models.Model):\n    chart = models.ForeignKey(Chart, on_delete=models.CASCADE)\n    is_active = models.BooleanField(default=True)\n    sync_frequency = models.CharField(max_length=20, choices=SYNC_FREQUENCY_CHOICES)\n    last_sync_at = models.DateTimeField(null=True, blank=True)\n    next_sync_at = models.DateTimeField(null=True, blank=True)\n    total_executions = models.PositiveIntegerField(default=0)\n    successful_executions = models.PositiveIntegerField(default=0)\n</code></pre></p> <p>Celery Beat Integration: <pre><code># settings.py\nCELERY_BEAT_SCHEDULE = {\n    'process-chart-sync-schedules': {\n        'task': 'apps.soundcharts.tasks.process_scheduled_chart_syncs',\n        'schedule': 300.0,  # Run every 5 minutes\n    },\n}\n</code></pre></p>"},{"location":"development/features-overview/#chart-ranking-admin-dashboard","title":"Chart Ranking Admin Dashboard","text":"<p>Enhanced Admin Interface: - Native Django admin table for chart ranking entries - Proxy model for comprehensive chart metadata - Entry statistics and performance metrics - Integration with ChartRankingAdmin</p> <p>Implementation: <pre><code># Proxy Model\nclass ChartRankingEntrySummary(ChartRankingEntry):\n    class Meta:\n        proxy = True\n        verbose_name = 'Chart Entry Summary'\n        verbose_name_plural = 'Chart Entries Summary'\n</code></pre></p>"},{"location":"development/features-overview/#4-audience-data-system","title":"4. Audience Data System","text":""},{"location":"development/features-overview/#time-series-audience-analytics","title":"Time-Series Audience Analytics","text":"<p>Comprehensive Audience Tracking: - Time-series data storage for track performance - Multi-platform audience tracking - API endpoints for chart data visualization - Data processing and aggregation services</p> <p>Key Features: <pre><code># TrackAudienceTimeSeries model\nclass TrackAudienceTimeSeries(models.Model):\n    track = models.ForeignKey(Track, on_delete=models.CASCADE)\n    platform = models.ForeignKey(Platform, on_delete=models.CASCADE)\n    date = models.DateField()\n    audience_value = models.BigIntegerField()\n    # ... additional fields\n</code></pre></p> <p>API Integration: <pre><code>// Single Platform Chart Data Response\n{\n  \"success\": true,\n  \"track\": { /* track metadata */ },\n  \"platform\": { /* platform info */ },\n  \"chart_data\": {\n    \"labels\": [\"2025-07-21\", \"2025-07-22\", \"2025-07-23\"],\n    \"datasets\": [{\n      \"label\": \"bad guy on Spotify\",\n      \"data\": [2763701395, 2764225348, 2764759050],\n      \"borderColor\": \"#3b82f6\",\n      \"backgroundColor\": \"rgba(59, 130, 246, 0.1)\",\n      \"tension\": 0.1\n    }]\n  }\n}\n</code></pre></p>"},{"location":"development/features-overview/#song-detail-page-integration","title":"Song Detail Page Integration","text":"<p>Comprehensive Song Analytics: - Dedicated audience analytics detail pages - Clickable song names in rankings - Navigation between rankings and detail pages - Responsive design with mobile support</p> <p>Implementation: <pre><code># URL Configuration\npath('songs/&lt;str:track_uuid&gt;/audience/', SongAudienceDetailView.as_view(), name='song_audience_detail'),\n\n# View Implementation\nclass SongAudienceDetailView(View):\n    def get(self, request, track_uuid):\n        # Get track and audience data\n        # Render template with song info and audience charts\n</code></pre></p>"},{"location":"development/features-overview/#5-user-experience-enhancements","title":"5. User Experience Enhancements","text":""},{"location":"development/features-overview/#admin-alert-system","title":"Admin Alert System","text":"<p>Consistent Alert Patterns: - Success/error alerts for admin actions - AJAX-based operations with real-time feedback - Loading states and progress indicators - Consistent styling across all admin interfaces</p> <p>Implementation: <pre><code>// Track admin alerts system\nfunction showTrackAlert(message, type) {\n    // Displays alerts using Django admin patterns\n    // Uses alert-success, alert-danger, alert-warning, alert-info classes\n}\n\nfunction fetchTrackMetadata(trackId) {\n    // AJAX call for single track metadata fetch\n    // Real-time progress updates\n    // Error handling and user feedback\n}\n</code></pre></p>"},{"location":"development/features-overview/#template-consistency","title":"Template Consistency","text":"<p>Unified Admin Templates: - Consistent styling across all import templates - Django admin module system integration - Responsive design with mobile support - Shared CSS and JavaScript frameworks</p> <p>Key Features: - Django admin module system - Consistent form elements and styling - Unified alert system - Full admin navigation integration</p>"},{"location":"development/features-overview/#6-data-quality-and-integrity","title":"6. Data Quality and Integrity","text":""},{"location":"development/features-overview/#platform-duplicate-prevention","title":"Platform Duplicate Prevention","text":"<p>Data Integrity Measures: - Unique constraints on critical fields - Duplicate detection and cleanup - Data validation and error handling - Migration strategies for existing data</p> <p>Implementation: <pre><code># Platform model with unique constraint\nclass Platform(models.Model):\n    slug = models.CharField(max_length=255, unique=True)\n    # ... other fields\n</code></pre></p>"},{"location":"development/features-overview/#error-handling-and-monitoring","title":"Error Handling and Monitoring","text":"<p>Comprehensive Error Management: - API failure handling and retry mechanisms - Individual track failures don't stop bulk operations - Detailed error logging and tracking - User-friendly error messages</p> <p>Monitoring Features: - Real-time progress monitoring in admin - Visual progress bars and status indicators - Detailed error messages and timestamps - Celery task monitoring and management</p>"},{"location":"development/features-overview/#7-performance-optimization","title":"7. Performance Optimization","text":""},{"location":"development/features-overview/#database-optimization","title":"Database Optimization","text":"<p>Query Optimization: - Efficient use of select_related and prefetch_related - Database indexing strategies - Cached properties for frequently accessed data - Pagination for large datasets</p> <p>Implementation: <pre><code># Efficient queries\ntracks = Track.objects.select_related('primary_artist', 'primary_genre').prefetch_related('artists', 'genres')\n\n# Database indexes\nclass Meta:\n    indexes = [\n        models.Index(fields=['uuid']),\n        models.Index(fields=['primary_artist']),\n        models.Index(fields=['primary_genre']),\n        models.Index(fields=['metadata_fetched_at']),\n    ]\n</code></pre></p>"},{"location":"development/features-overview/#background-processing","title":"Background Processing","text":"<p>Celery Integration: - Asynchronous task processing - Task scheduling with Celery Beat - Progress tracking and monitoring - Error handling and retry mechanisms</p> <p>Service Architecture: - Gunicorn for web requests - Celery Worker for background tasks - Celery Beat for task scheduling - Redis for message brokering</p>"},{"location":"development/features-overview/#8-api-integration-features","title":"8. API Integration Features","text":""},{"location":"development/features-overview/#soundcharts-api-integration","title":"SoundCharts API Integration","text":"<p>Comprehensive API Support: - Chart data synchronization - Track metadata fetching - Artist information retrieval - Audience data collection</p> <p>Key Services: <pre><code># SoundChartsService methods\nclass SoundChartsService:\n    def get_song_metadata_enhanced(self, uuid):\n        # Fetches comprehensive track metadata\n        # Handles various response formats\n        # Maps API response fields to model fields\n\n    def get_chart_rankings(self, chart_slug, limit=100):\n        # Fetches chart rankings from API\n        # Handles pagination and error conditions\n        # Returns structured data for processing\n</code></pre></p>"},{"location":"development/features-overview/#acrcloud-integration","title":"ACRCloud Integration","text":"<p>Audio Recognition Features: - Audio fingerprinting and analysis - Fraud detection capabilities - Cover song detection - Lyrics analysis - Webhook-based processing</p> <p>Implementation: <pre><code># ACRCloudService\nclass ACRCloudService:\n    def upload_file_for_scanning(self, audio_file, callback_url):\n        # Uploads file to ACRCloud with callback\n        # Returns file ID for tracking\n        # Handles API authentication and errors\n</code></pre></p>"},{"location":"development/features-overview/#9-development-tools-and-utilities","title":"9. Development Tools and Utilities","text":""},{"location":"development/features-overview/#management-commands","title":"Management Commands","text":"<p>Comprehensive Command Suite: <pre><code># Track metadata commands\npython manage.py fetch_track_metadata --track-uuid &lt;uuid&gt;\npython manage.py fetch_track_metadata --bulk\npython manage.py fetch_track_metadata --all\n\n# Chart sync commands\npython manage.py sync_chart_rankings --chart-id &lt;id&gt;\npython manage.py sync_chart_rankings --all\npython manage.py create_sync_schedule --chart-id &lt;id&gt; --frequency daily\n</code></pre></p>"},{"location":"development/features-overview/#testing-framework","title":"Testing Framework","text":"<p>Comprehensive Testing: - Unit tests for individual components - Integration tests for API functionality - Admin interface testing - Performance testing and optimization</p> <p>Test Coverage: - Model methods and properties - API integration and data mapping - Admin functionality and user experience - Error handling and edge cases</p>"},{"location":"development/features-overview/#10-security-and-best-practices","title":"10. Security and Best Practices","text":""},{"location":"development/features-overview/#security-measures","title":"Security Measures","text":"<p>Data Protection: - CSRF protection for all forms - Input validation and sanitization - API key security and management - User permission and access control</p> <p>Implementation: <pre><code># Security settings\nCSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True\nSECURE_SSL_REDIRECT = True\n\n# Permission checks\ndef fetch_metadata(self, request, queryset):\n    if not request.user.has_perm('soundcharts.can_fetch_metadata'):\n        self.message_user(request, 'You do not have permission to fetch metadata')\n        return\n</code></pre></p>"},{"location":"development/features-overview/#code-quality","title":"Code Quality","text":"<p>Best Practices: - Consistent code formatting and documentation - Modular and maintainable architecture - Error handling and logging - Performance monitoring and optimization</p>"},{"location":"development/features-overview/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/features-overview/#planned-features","title":"Planned Features","text":"<ol> <li>Advanced Analytics: Enhanced reporting and analytics capabilities</li> <li>Real-time Updates: WebSocket integration for real-time data updates</li> <li>Machine Learning: AI-powered insights and recommendations</li> <li>API Rate Limiting: Intelligent rate limiting for external APIs</li> <li>Data Export: Comprehensive data export and backup capabilities</li> <li>Multi-tenant Support: Support for multiple organizations</li> <li>Advanced Caching: Redis-based caching for improved performance</li> <li>Monitoring Dashboard: Real-time system monitoring and alerts</li> </ol>"},{"location":"development/features-overview/#performance-improvements","title":"Performance Improvements","text":"<ol> <li>Database Optimization: Advanced indexing and query optimization</li> <li>Caching Strategy: Comprehensive caching implementation</li> <li>CDN Integration: Content delivery network for static assets</li> <li>Load Balancing: Horizontal scaling capabilities</li> <li>Background Processing: Enhanced Celery configuration and monitoring</li> </ol>"},{"location":"development/features-overview/#conclusion","title":"Conclusion","text":"<p>The development features in MusicChartsAI provide a comprehensive, scalable, and maintainable platform for music data management. The system combines advanced Django admin customizations, robust API integrations, efficient data processing, and excellent user experience to deliver a professional-grade music analytics platform.</p> <p>Key strengths include: - Comprehensive Data Management: Complete track, artist, and genre management with API integration - Advanced Admin Interface: Custom ordering, enhanced functionality, and consistent user experience - Robust Background Processing: Celery-based task processing with monitoring and error handling - Performance Optimization: Efficient database queries, caching, and background processing - Security and Best Practices: Comprehensive security measures and code quality standards - Extensibility: Modular architecture that supports future enhancements and scaling</p>"},{"location":"development/testing/","title":"Testing","text":""},{"location":"development/troubleshooting/","title":"Troubleshooting","text":""},{"location":"development/troubleshooting/#overview","title":"Overview","text":"<p>This comprehensive troubleshooting guide covers common issues, solutions, and debugging techniques for MusicChartsAI. The guide is organized by component and includes step-by-step solutions for development and production environments.</p>"},{"location":"development/troubleshooting/#gunicorn-configuration-issues","title":"Gunicorn Configuration Issues","text":""},{"location":"development/troubleshooting/#common-gunicorn-errors","title":"Common Gunicorn Errors","text":""},{"location":"development/troubleshooting/#permission-denied-errors","title":"Permission Denied Errors","text":"<p>Problem: Gunicorn fails to start due to permission issues with log files, PID files, or user/group settings.</p> <p>Symptoms: <pre><code>PermissionError: [Errno 13] Permission denied: '/var/log/musiccharts/gunicorn-error.log'\nOSError: [Errno 13] Permission denied: '/var/run/musiccharts-gunicorn.pid'\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Use Simple Configuration (Recommended for Development): <pre><code>gunicorn --config gunicorn-simple.conf.py config.wsgi:application\n</code></pre></p> </li> <li> <p>Fix Permissions for Production Config: <pre><code># Create log directory\nsudo mkdir -p /var/log/musiccharts\nsudo chown $USER:$USER /var/log/musiccharts\nsudo chmod 755 /var/log/musiccharts\n\n# Create PID directory\nsudo mkdir -p /var/run\nsudo chown $USER:$USER /var/run\n</code></pre></p> </li> <li> <p>Use Command Line Arguments: <pre><code>gunicorn --workers=2 --bind=0.0.0.0:8080 config.wsgi:application\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#worker-process-failures","title":"Worker Process Failures","text":"<p>Problem: Gunicorn workers die unexpectedly.</p> <p>Symptoms: <pre><code>[ERROR] Worker (pid:1234) was sent SIGABRT signal!\n[ERROR] Worker (pid:1234) did not respond to heartbeats\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Reduce Worker Count: <pre><code>gunicorn --workers=1 --bind=127.0.0.1:8080 config.wsgi:application\n</code></pre></p> </li> <li> <p>Check Django Settings: <pre><code>python manage.py check --deploy\npython manage.py check\n</code></pre></p> </li> <li> <p>Test Django Directly: <pre><code>python manage.py runserver 127.0.0.1:8080\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#gunicorn-configuration-comparison","title":"Gunicorn Configuration Comparison","text":"Setting Command Line Simple Config Production Config Workers 2 2 CPU cores * 2 + 1 Bind 0.0.0.0:8080 127.0.0.1:8080 127.0.0.1:8080 Logging Default Console File-based User/Group Current user Current user musiccharts PID File No No Yes"},{"location":"development/troubleshooting/#debugging-gunicorn-issues","title":"Debugging Gunicorn Issues","text":""},{"location":"development/troubleshooting/#step-1-test-with-minimal-configuration","title":"Step 1: Test with Minimal Configuration","text":"<pre><code>gunicorn --bind=127.0.0.1:8080 config.wsgi:application\n</code></pre>"},{"location":"development/troubleshooting/#step-2-add-workers-gradually","title":"Step 2: Add Workers Gradually","text":"<pre><code>gunicorn --workers=1 --bind=127.0.0.1:8080 config.wsgi:application\ngunicorn --workers=2 --bind=127.0.0.1:8080 config.wsgi:application\n</code></pre>"},{"location":"development/troubleshooting/#step-3-test-configuration-file","title":"Step 3: Test Configuration File","text":"<pre><code># Check if config file is valid Python\npython gunicorn-simple.conf.py\n\n# Test with verbose logging\ngunicorn --config gunicorn-simple.conf.py --log-level debug config.wsgi:application\n</code></pre>"},{"location":"development/troubleshooting/#static-files-issues","title":"Static Files Issues","text":""},{"location":"development/troubleshooting/#static-files-not-loading","title":"Static Files Not Loading","text":"<p>Problem: CSS, JavaScript, and other static files are not loading properly.</p> <p>Symptoms: - Styling not applied - JavaScript errors in browser console - 404 errors for static files - Files served as <code>text/html</code> instead of proper MIME types</p> <p>Solutions:</p> <ol> <li> <p>Collect Static Files: <pre><code>python manage.py collectstatic --noinput --clear\n</code></pre></p> </li> <li> <p>Check Static Files Configuration: <pre><code># settings.py\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n</code></pre></p> </li> <li> <p>Fix File Permissions: <pre><code># Set proper ownership (replace 'youruser' with actual user)\nsudo chown -R youruser:www-data /path/to/staticfiles/\nsudo chown -R youruser:www-data /path/to/media/\n\n# Set proper permissions\nsudo chmod -R 755 /path/to/staticfiles/\nsudo chmod -R 755 /path/to/media/\n\n# Ensure Apache can read the files\nsudo chmod -R 644 /path/to/staticfiles/*\n</code></pre></p> </li> <li> <p>Check Apache/Nginx Configuration: <pre><code># Apache configuration with MIME types\nAlias /static/ /path/to/staticfiles/\n&lt;Directory /path/to/staticfiles&gt;\n    Require all granted\n    # Ensure proper MIME types\n    AddType text/css .css\n    AddType application/javascript .js\n&lt;/Directory&gt;\n</code></pre></p> </li> </ol> <pre><code># Nginx configuration\nlocation /static/ {\n    alias /path/to/staticfiles/;\n    expires 30d;\n    add_header Cache-Control \"public, immutable\";\n}\n</code></pre>"},{"location":"development/troubleshooting/#content-security-policy-csp-issues","title":"Content Security Policy (CSP) Issues","text":"<p>Problem: CSP blocks external resources like Google Fonts, GitHub buttons, or FilePond components.</p> <p>Symptoms: <pre><code>Refused to load the script 'https://unpkg.com/filepond.min.js'\nRefused to load the stylesheet 'https://fonts.googleapis.com/css'\nRefused to connect to 'https://api.github.com'\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Update CSP Configuration: <pre><code># Apache CSP header with all required domains\nHeader always set Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://buttons.github.io https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://unpkg.com; font-src 'self' data: https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.github.com;\"\n</code></pre></p> </li> <li> <p>Test CSP Configuration: <pre><code># Test Apache configuration\nsudo apache2ctl configtest\n\n# If test passes, restart Apache\nsudo systemctl restart apache2\n\n# Clear browser cache or use incognito mode\n</code></pre></p> </li> <li> <p>Alternative: Host Resources Locally: <pre><code># Download external resources locally\nmkdir -p /path/to/static/vendor/filepond\ncd /path/to/static/vendor/filepond\n\n# Download FilePond files\nwget https://unpkg.com/filepond/dist/filepond.min.css\nwget https://unpkg.com/filepond/dist/filepond.min.js\nwget https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.min.js\nwget https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.min.js\n</code></pre></p> </li> <li> <p>Development CSP (More Permissive): <pre><code># For development only - more permissive CSP\nHeader always set Content-Security-Policy \"default-src 'self' 'unsafe-inline' 'unsafe-eval' https: data: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; font-src 'self' data: https:; img-src 'self' data: https:; connect-src 'self' https:;\"\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#static-files-verification","title":"Static Files Verification","text":"<p>Test Static Files Directly: <pre><code># Test if static files are accessible\ncurl -I https://yourdomain.com/static/dist/main.css\ncurl -I https://yourdomain.com/static/images/logo.png\n\n# Check file sizes\ndu -sh /path/to/staticfiles/\n\n# Verify specific files exist\nls -la /path/to/staticfiles/dist/main.css\nls -la /path/to/staticfiles/dist/main.bundle.js\n</code></pre></p> <p>Check Apache Error Logs: <pre><code># Monitor Apache error logs\nsudo tail -f /var/log/apache2/error.log\n\n# Check specific site error log\nsudo tail -f /path/to/site/error.log\n</code></pre></p> <p>Browser Testing: 1. Open browser developer tools (F12) 2. Go to Network tab 3. Reload the page 4. Check if static files load with 200 status codes 5. Verify no 403 or 404 errors for static files</p>"},{"location":"development/troubleshooting/#tailwind-css-build-issues","title":"Tailwind CSS Build Issues","text":"<p>Problem: Tailwind CSS styles not being generated or applied.</p> <p>Solutions:</p> <ol> <li> <p>Install Node.js Dependencies: <pre><code>npm install\nnpm run build\n</code></pre></p> </li> <li> <p>Check Webpack Configuration: <pre><code>// webpack.config.js\nmodule.exports = {\n    entry: './static/assets/index.js',\n    output: {\n        filename: '[name].bundle.js',\n        path: path.resolve(__dirname, './static/dist'),\n    },\n};\n</code></pre></p> </li> <li> <p>Check Tailwind Configuration: <pre><code>// tailwind.config.js\nmodule.exports = {\n  content: [\n    './templates/**/*.html',\n    './static/**/*.js',\n    './node_modules/flowbite/**/*.js'\n  ],\n  plugins: [\n    require('flowbite/plugin')\n  ],\n}\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#database-issues","title":"Database Issues","text":""},{"location":"development/troubleshooting/#database-connection-problems","title":"Database Connection Problems","text":"<p>Problem: Django cannot connect to the database.</p> <p>Symptoms: <pre><code>django.db.utils.OperationalError: could not connect to server\npsycopg2.OperationalError: FATAL: password authentication failed\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check Database Settings: <pre><code># settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'musiccharts_db',\n        'USER': 'musiccharts_user',\n        'PASSWORD': 'your_password',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}\n</code></pre></p> </li> <li> <p>Test Database Connection: <pre><code>python manage.py dbshell\npsql -h localhost -U musiccharts_user -d musiccharts_db\n</code></pre></p> </li> <li> <p>Check PostgreSQL Status: <pre><code>sudo systemctl status postgresql\nsudo systemctl start postgresql\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#migration-issues","title":"Migration Issues","text":"<p>Problem: Database migrations fail or are inconsistent.</p> <p>Solutions:</p> <ol> <li> <p>Check Migration Status: <pre><code>python manage.py showmigrations\n</code></pre></p> </li> <li> <p>Create New Migrations: <pre><code>python manage.py makemigrations\npython manage.py makemigrations app_name\n</code></pre></p> </li> <li> <p>Apply Migrations: <pre><code>python manage.py migrate\npython manage.py migrate app_name\n</code></pre></p> </li> <li> <p>Reset Migrations (Development Only): <pre><code># WARNING: This will delete all data\npython manage.py migrate app_name zero\npython manage.py makemigrations app_name\npython manage.py migrate app_name\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#celery-issues","title":"Celery Issues","text":""},{"location":"development/troubleshooting/#service-architecture-overview","title":"Service Architecture Overview","text":"<p>Important: MusicChartsAI requires 3 separate services to run properly:</p> <ol> <li>Gunicorn - Web server (handles HTTP requests)</li> <li>Celery Worker - Background task processor  </li> <li>Celery Beat - Task scheduler</li> </ol> <p>\u274c What NOT to Do: DO NOT add Celery to the Gunicorn configuration file. They are completely separate services.</p>"},{"location":"development/troubleshooting/#celery-worker-not-starting","title":"Celery Worker Not Starting","text":"<p>Problem: Celery workers fail to start or process tasks.</p> <p>Symptoms: <pre><code>ModuleNotFoundError: No module named 'apps.acrcloud'\ncelery.exceptions.NotRegistered: 'apps.soundcharts.tasks.sync_chart_rankings_task'\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check Celery Configuration: <pre><code># settings.py\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n</code></pre></p> </li> <li> <p>Install Redis: <pre><code>sudo apt install redis-server\nsudo systemctl start redis\nsudo systemctl enable redis\n</code></pre></p> </li> <li> <p>Test Redis Connection: <pre><code>redis-cli ping\n# Should return: PONG\n</code></pre></p> </li> <li> <p>Start Celery Worker: <pre><code>celery -A config worker -l info\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#service-management","title":"Service Management","text":"<p>Option 1: Manual Commands (For Testing)</p> <p>Terminal 1 - Gunicorn: <pre><code>cd /path/to/your/app\ngunicorn --config gunicorn-simple.conf.py config.wsgi:application\n</code></pre></p> <p>Terminal 2 - Celery Worker: <pre><code>cd /path/to/your/app\ncelery -A config worker --loglevel=info\n</code></pre></p> <p>Terminal 3 - Celery Beat: <pre><code>cd /path/to/your/app\ncelery -A config beat --loglevel=info\n</code></pre></p> <p>Option 2: Background Processes <pre><code>cd /path/to/your/app\n\n# Start all services in background\ngunicorn --config gunicorn-simple.conf.py config.wsgi:application &gt; logs/gunicorn.log 2&gt;&amp;1 &amp;\ncelery -A config worker --loglevel=info &gt; logs/celery-worker.log 2&gt;&amp;1 &amp;\ncelery -A config beat --loglevel=info &gt; logs/celery-beat.log 2&gt;&amp;1 &amp;\n\n# Check if they're running\nps aux | grep -E \"(gunicorn|celery)\"\n</code></pre></p> <p>Option 3: Production with Systemd <pre><code># Enable and start services\nsudo systemctl enable musiccharts-gunicorn\nsudo systemctl enable musiccharts-celery\nsudo systemctl enable musiccharts-celerybeat\n\nsudo systemctl start musiccharts-gunicorn\nsudo systemctl start musiccharts-celery\nsudo systemctl start musiccharts-celerybeat\n\n# Check status\nsudo systemctl status musiccharts-gunicorn\nsudo systemctl status musiccharts-celery\nsudo systemctl status musiccharts-celerybeat\n</code></pre></p>"},{"location":"development/troubleshooting/#service-monitoring","title":"Service Monitoring","text":"<p>Check Service Status: <pre><code># Check all processes\nps aux | grep -E \"(gunicorn|celery)\"\n\n# Check specific service\npgrep -f \"gunicorn.*config.wsgi\"\npgrep -f \"celery.*worker\"\npgrep -f \"celery.*beat\"\n</code></pre></p> <p>View Logs: <pre><code># View log files directly\ntail -f logs/gunicorn.log\ntail -f logs/celery-worker.log\ntail -f logs/celery-beat.log\n\n# Or with systemd\nsudo journalctl -u musiccharts-gunicorn -f\nsudo journalctl -u musiccharts-celery -f\nsudo journalctl -u musiccharts-celerybeat -f\n</code></pre></p> <p>Test Celery Connection: <pre><code># Test Redis connection\nredis-cli ping\n\n# Test Celery worker\ncelery -A config inspect active\n\n# Test Celery beat\ncelery -A config inspect scheduled\n</code></pre></p>"},{"location":"development/troubleshooting/#task-queue-issues","title":"Task Queue Issues","text":"<p>Problem: Tasks are not being processed or are stuck in the queue.</p> <p>Solutions:</p> <ol> <li> <p>Check Celery Status: <pre><code>celery -A config inspect active\ncelery -A config inspect scheduled\ncelery -A config inspect stats\n</code></pre></p> </li> <li> <p>Purge Task Queue: <pre><code>celery -A config purge\n</code></pre></p> </li> <li> <p>Monitor Task Execution: <pre><code>celery -A config events\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#api-integration-issues","title":"API Integration Issues","text":""},{"location":"development/troubleshooting/#acrcloud-api-problems","title":"ACRCloud API Problems","text":"<p>Problem: ACRCloud API calls fail or return errors.</p> <p>Symptoms: <pre><code>401 Unauthorized\n403 Forbidden\nAPI quota exceeded\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check API Credentials: <pre><code># Verify credentials in Django admin\n# Go to /admin/acrcloud/acrcloudconfig/\n</code></pre></p> </li> <li> <p>Test API Connection: <pre><code>python manage.py shell\n&gt;&gt;&gt; from apps.acrcloud.service import ACRCloudService\n&gt;&gt;&gt; service = ACRCloudService()\n&gt;&gt;&gt; # Test API call\n</code></pre></p> </li> <li> <p>Check API Quotas:</p> </li> <li>Log into ACRCloud console</li> <li>Check usage and quotas</li> <li>Upgrade plan if needed</li> </ol>"},{"location":"development/troubleshooting/#soundcharts-api-issues","title":"SoundCharts API Issues","text":"<p>Problem: SoundCharts API integration fails.</p> <p>Solutions:</p> <ol> <li> <p>Verify API Keys: <pre><code># Check in Django settings\nSOUNDCHARTS_APP_ID = 'your_app_id'\nSOUNDCHARTS_API_KEY = 'your_api_key'\n</code></pre></p> </li> <li> <p>Test API Endpoints: <pre><code>curl -H \"Authorization: Bearer your_token\" \\\n     \"https://api.soundcharts.com/api/v2/track/...\"\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#frontend-issues","title":"Frontend Issues","text":""},{"location":"development/troubleshooting/#datatables-not-loading","title":"DataTables Not Loading","text":"<p>Problem: DataTables component fails to load or display data.</p> <p>Solutions:</p> <ol> <li> <p>Check JavaScript Console: <pre><code># Open browser developer tools\n# Check for JavaScript errors\n</code></pre></p> </li> <li> <p>Verify API Endpoints: <pre><code># Test API endpoints\ncurl http://localhost:8000/api/product/\n</code></pre></p> </li> <li> <p>Check DataTables Configuration: <pre><code>// Ensure jQuery and DataTables are loaded\n// Check data format matches expected structure\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#flowbite-components-not-working","title":"Flowbite Components Not Working","text":"<p>Problem: Flowbite components (modals, dropdowns, etc.) not functioning.</p> <p>Solutions:</p> <ol> <li> <p>Include Flowbite JavaScript: <pre><code>&lt;script src=\"https://unpkg.com/flowbite@1.8.1/dist/flowbite.min.js\"&gt;&lt;/script&gt;\n</code></pre></p> </li> <li> <p>Check Component HTML: <pre><code>&lt;!-- Ensure proper data attributes --&gt;\n&lt;button data-modal-target=\"modal\" data-modal-toggle=\"modal\"&gt;\n</code></pre></p> </li> <li> <p>Initialize Components: <pre><code>// Initialize Flowbite components\nimport 'flowbite/dist/flowbite.js';\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"development/troubleshooting/#slow-database-queries","title":"Slow Database Queries","text":"<p>Problem: Application is slow due to inefficient database queries.</p> <p>Solutions:</p> <ol> <li> <p>Enable Django Debug Toolbar: <pre><code># settings.py (development only)\nINSTALLED_APPS = [\n    'debug_toolbar',\n]\n</code></pre></p> </li> <li> <p>Optimize Queries: <pre><code># Use select_related and prefetch_related\nqueryset = Model.objects.select_related('foreign_key').prefetch_related('many_to_many')\n</code></pre></p> </li> <li> <p>Add Database Indexes: <pre><code># models.py\nclass Meta:\n    indexes = [\n        models.Index(fields=['field1', 'field2']),\n    ]\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Problem: Application consumes too much memory.</p> <p>Solutions:</p> <ol> <li> <p>Monitor Memory Usage: <pre><code># Check process memory usage\nps aux | grep python\nhtop\n</code></pre></p> </li> <li> <p>Optimize Celery Workers: <pre><code># settings.py\nCELERY_WORKER_CONCURRENCY = 2\nCELERY_WORKER_MAX_TASKS_PER_CHILD = 1000\n</code></pre></p> </li> <li> <p>Implement Caching: <pre><code># Use Redis caching\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379/1',\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#security-issues","title":"Security Issues","text":""},{"location":"development/troubleshooting/#csrf-token-errors","title":"CSRF Token Errors","text":"<p>Problem: CSRF token validation fails.</p> <p>Solutions:</p> <ol> <li> <p>Include CSRF Token in Forms: <pre><code>{% csrf_token %}\n</code></pre></p> </li> <li> <p>Configure CSRF Settings: <pre><code># settings.py\nCSRF_COOKIE_SECURE = True  # HTTPS only\nCSRF_COOKIE_HTTPONLY = True\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#sslhttps-issues","title":"SSL/HTTPS Issues","text":"<p>Problem: SSL certificate problems or mixed content warnings.</p> <p>Solutions:</p> <ol> <li> <p>Check SSL Configuration: <pre><code># Test SSL certificate\nopenssl s_client -connect yourdomain.com:443\n</code></pre></p> </li> <li> <p>Configure Secure Settings: <pre><code># settings.py\nSECURE_SSL_REDIRECT = True\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"development/troubleshooting/#log-analysis","title":"Log Analysis","text":"<p>Enable Comprehensive Logging: <pre><code># settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': 'debug.log',\n        },\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file', 'console'],\n            'level': 'INFO',\n            'propagate': True,\n        },\n        'apps': {\n            'handlers': ['file', 'console'],\n            'level': 'DEBUG',\n            'propagate': True,\n        },\n    },\n}\n</code></pre></p>"},{"location":"development/troubleshooting/#health-checks","title":"Health Checks","text":"<p>Implement Health Check Endpoint: <pre><code># views.py\nfrom django.http import JsonResponse\nfrom django.db import connection\n\ndef health_check(request):\n    try:\n        with connection.cursor() as cursor:\n            cursor.execute(\"SELECT 1\")\n        return JsonResponse({'status': 'healthy'})\n    except Exception as e:\n        return JsonResponse({'status': 'unhealthy', 'error': str(e)}, status=503)\n</code></pre></p>"},{"location":"development/troubleshooting/#production-troubleshooting","title":"Production Troubleshooting","text":""},{"location":"development/troubleshooting/#deployment-issues","title":"Deployment Issues","text":"<p>Problem: Application fails to deploy or start in production.</p> <p>Solutions:</p> <ol> <li> <p>Check Environment Variables: <pre><code># Verify all required environment variables are set\necho $DATABASE_URL\necho $SECRET_KEY\necho $DEBUG\n</code></pre></p> </li> <li> <p>Check File Permissions: <pre><code># Ensure proper ownership\nsudo chown -R www-data:www-data /path/to/app\nsudo chmod -R 755 /path/to/app\n</code></pre></p> </li> <li> <p>Check Service Status: <pre><code># Check all services\nsudo systemctl status gunicorn\nsudo systemctl status celery\nsudo systemctl status nginx\nsudo systemctl status postgresql\n</code></pre></p> </li> </ol>"},{"location":"development/troubleshooting/#performance-monitoring","title":"Performance Monitoring","text":"<p>Set Up Monitoring: <pre><code># Install monitoring tools\nsudo apt install htop iotop nethogs\n\n# Monitor system resources\nhtop\niotop\nnethogs\n</code></pre></p>"},{"location":"development/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"development/troubleshooting/#debug-information-to-collect","title":"Debug Information to Collect","text":"<p>When reporting issues, include:</p> <ol> <li>Error Messages: Complete error messages and stack traces</li> <li>Environment: OS, Python version, Django version</li> <li>Configuration: Relevant settings.py configurations</li> <li>Logs: Application and system logs</li> <li>Steps to Reproduce: Detailed steps to reproduce the issue</li> </ol>"},{"location":"development/troubleshooting/#useful-commands","title":"Useful Commands","text":"<pre><code># Check Django configuration\npython manage.py check --deploy\n\n# Check database\npython manage.py dbshell\n\n# Check migrations\npython manage.py showmigrations\n\n# Check static files\npython manage.py collectstatic --dry-run\n\n# Check Celery\ncelery -A config inspect active\n\n# Check Redis\nredis-cli ping\n\n# Check system resources\nfree -h\ndf -h\nps aux | grep python\n</code></pre>"},{"location":"development/troubleshooting/#support-channels","title":"Support Channels","text":"<ol> <li>Documentation: Check this troubleshooting guide first</li> <li>GitHub Issues: Report bugs and feature requests</li> <li>Community Forums: Ask questions and get help</li> <li>Professional Support: Contact for commercial support</li> </ol>"},{"location":"development/troubleshooting/#conclusion","title":"Conclusion","text":"<p>This troubleshooting guide covers the most common issues you may encounter with MusicChartsAI. For issues not covered here, check the logs, enable debug mode, and gather as much information as possible before seeking additional help.</p> <p>Remember to always test solutions in a development environment before applying them to production systems.</p>"},{"location":"features/acrcloud-analysis/","title":"ACRCloud Analysis","text":""},{"location":"features/acrcloud-analysis/#overview","title":"Overview","text":"<p>The ACRCloud integration provides comprehensive music analysis and fraud detection capabilities for uploaded songs. The system uses ACRCloud's advanced audio fingerprinting, cover detection, and lyrics analysis to identify potential copyright issues and fraudulent content.</p>"},{"location":"features/acrcloud-analysis/#features","title":"Features","text":""},{"location":"features/acrcloud-analysis/#core-functionality","title":"Core Functionality","text":"<ul> <li>Audio Upload: Support for multiple audio formats (MP3, WAV, M4A, FLAC, AAC)</li> <li>FilePond Integration: Modern, drag-and-drop file upload interface</li> <li>Async Processing: Background analysis using Celery tasks</li> <li>Fraud Detection: Comprehensive analysis of audio fingerprints and cover songs</li> <li>Report Generation: Detailed analysis reports with risk assessment</li> <li>Admin Interface: Full administrative control using Jazzmin theme</li> <li>User Dashboard: Clean interface for users to upload and view results</li> </ul>"},{"location":"features/acrcloud-analysis/#analysis-types","title":"Analysis Types","text":"<ol> <li>Fingerprint Analysis: Identifies exact matches in the ACRCloud database</li> <li>Cover Detection: Detects cover versions of existing songs</li> <li>Lyrics Analysis: Analyzes lyrical content for similarities</li> <li>Fraud Detection: Combines all analyses to assess fraud risk</li> </ol>"},{"location":"features/acrcloud-analysis/#architecture","title":"Architecture","text":""},{"location":"features/acrcloud-analysis/#models","title":"Models","text":""},{"location":"features/acrcloud-analysis/#song","title":"Song","text":"<ul> <li>Stores uploaded audio files and metadata</li> <li>Tracks analysis status and file information</li> <li>Links to user who uploaded the song</li> </ul>"},{"location":"features/acrcloud-analysis/#analysis","title":"Analysis","text":"<ul> <li>Records ACRCloud analysis results</li> <li>Stores raw API responses</li> <li>Tracks analysis status and completion</li> </ul>"},{"location":"features/acrcloud-analysis/#analysisreport","title":"AnalysisReport","text":"<ul> <li>Detailed analysis findings</li> <li>Risk assessment and confidence scores</li> <li>Match results and recommendations</li> </ul>"},{"location":"features/acrcloud-analysis/#acrcloudconfig","title":"ACRCloudConfig","text":"<ul> <li>API configuration management</li> <li>Multiple environment support</li> <li>Secure credential storage</li> </ul>"},{"location":"features/acrcloud-analysis/#services","title":"Services","text":""},{"location":"features/acrcloud-analysis/#acrcloudservice","title":"ACRCloudService","text":"<ul> <li>Handles all ACRCloud API interactions</li> <li>File upload and processing</li> <li>Result processing and report generation</li> <li>Error handling and retry logic</li> </ul>"},{"location":"features/acrcloud-analysis/#tasks","title":"Tasks","text":""},{"location":"features/acrcloud-analysis/#celery-tasks","title":"Celery Tasks","text":"<ul> <li><code>analyze_song_task</code>: Main analysis processing</li> <li><code>send_analysis_complete_notification</code>: Email notifications</li> <li><code>cleanup_old_analyses</code>: Data cleanup</li> <li><code>batch_analyze_songs</code>: Batch processing</li> <li><code>retry_failed_analyses</code>: Retry failed analyses</li> </ul>"},{"location":"features/acrcloud-analysis/#setup-and-configuration","title":"Setup and Configuration","text":""},{"location":"features/acrcloud-analysis/#1-environment-variables","title":"1. Environment Variables","text":"<p>Add the following to your <code>.env</code> file:</p> <pre><code># ACRCloud Configuration\nACR_CLOUD_API_KEY=your_api_key\nACR_CLOUD_API_SECRET=your_api_secret\nACR_CLOUD_API_URL=https://api-&lt;region&gt;.acrcloud.com\n\n# Optional: Email notifications\nACRCLOUD_NOTIFICATION_EMAIL=admin@example.com\n</code></pre>"},{"location":"features/acrcloud-analysis/#2-database-configuration","title":"2. Database Configuration","text":"<p>The ACRCloud app requires the following database tables: - <code>acrcloud_song</code> - <code>acrcloud_analysis</code> - <code>acrcloud_analysisreport</code> - <code>acrcloud_acrcloudconfig</code></p> <p>Run migrations: <pre><code>python manage.py migrate acrcloud\n</code></pre></p>"},{"location":"features/acrcloud-analysis/#3-acrcloud-api-setup","title":"3. ACRCloud API Setup","text":"<ol> <li>Create an ACRCloud account</li> <li>Set up File Scanning container</li> <li>Get API credentials</li> <li>Configure in Django admin or via environment variables</li> </ol>"},{"location":"features/acrcloud-analysis/#4-celery-configuration","title":"4. Celery Configuration","text":"<p>Ensure Celery is properly configured for background task processing:</p> <pre><code># settings.py\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n</code></pre>"},{"location":"features/acrcloud-analysis/#usage","title":"Usage","text":""},{"location":"features/acrcloud-analysis/#user-workflow","title":"User Workflow","text":"<ol> <li>Upload Song: Users upload audio files via the FilePond interface</li> <li>Automatic Analysis: System automatically starts analysis in background</li> <li>Status Tracking: Users can monitor analysis progress</li> <li>View Results: Detailed reports show analysis findings and recommendations</li> </ol>"},{"location":"features/acrcloud-analysis/#admin-workflow","title":"Admin Workflow","text":"<ol> <li>Configuration: Set up ACRCloud API credentials</li> <li>Monitor: View all uploaded songs and analysis status</li> <li>Manage: Retry failed analyses, delete songs</li> <li>Reports: Access detailed analysis reports</li> </ol>"},{"location":"features/acrcloud-analysis/#api-endpoints","title":"API Endpoints","text":""},{"location":"features/acrcloud-analysis/#user-endpoints","title":"User Endpoints","text":"<ul> <li><code>GET /acrcloud/upload/</code> - Upload form</li> <li><code>GET /acrcloud/songs/</code> - List user's songs</li> <li><code>GET /acrcloud/song/&lt;id&gt;/</code> - Song details</li> <li><code>GET /acrcloud/analysis/&lt;id&gt;/</code> - Analysis report</li> </ul>"},{"location":"features/acrcloud-analysis/#api-endpoints_1","title":"API Endpoints","text":"<ul> <li><code>POST /acrcloud/api/upload/</code> - FilePond upload</li> <li><code>GET /acrcloud/api/song/&lt;id&gt;/status/</code> - Analysis status</li> </ul>"},{"location":"features/acrcloud-analysis/#action-endpoints","title":"Action Endpoints","text":"<ul> <li><code>POST /acrcloud/song/&lt;id&gt;/retry/</code> - Retry analysis</li> <li><code>POST /acrcloud/song/&lt;id&gt;/delete/</code> - Delete song</li> </ul>"},{"location":"features/acrcloud-analysis/#file-upload","title":"File Upload","text":""},{"location":"features/acrcloud-analysis/#supported-formats","title":"Supported Formats","text":"<ul> <li>MP3 (audio/mpeg)</li> <li>WAV (audio/wav)</li> <li>M4A (audio/mp4)</li> <li>FLAC (audio/flac)</li> <li>AAC (audio/aac)</li> </ul>"},{"location":"features/acrcloud-analysis/#file-size-limits","title":"File Size Limits","text":"<ul> <li>Maximum: 50MB per file</li> <li>Validation on both client and server side</li> </ul>"},{"location":"features/acrcloud-analysis/#filepond-configuration","title":"FilePond Configuration","text":"<pre><code>FilePond.create(document.querySelector('#audioFile'), {\n    server: {\n        url: '/acrcloud/api/upload/',\n        process: './',\n        revert: './',\n        restore: './',\n        load: './',\n        fetch: './'\n    },\n    acceptedFileTypes: ['audio/mpeg', 'audio/wav', 'audio/mp4', 'audio/flac', 'audio/aac'],\n    maxFileSize: '50MB'\n});\n</code></pre>"},{"location":"features/acrcloud-analysis/#analysis-process","title":"Analysis Process","text":""},{"location":"features/acrcloud-analysis/#1-file-upload","title":"1. File Upload","text":"<ul> <li>File validation (type, size)</li> <li>Temporary storage</li> <li>Database record creation</li> </ul>"},{"location":"features/acrcloud-analysis/#2-acrcloud-processing","title":"2. ACRCloud Processing","text":"<ul> <li>Upload to ACRCloud File Scanning</li> <li>Wait for processing completion</li> <li>Retrieve results</li> </ul>"},{"location":"features/acrcloud-analysis/#3-analysis-generation","title":"3. Analysis Generation","text":"<ul> <li>Process ACRCloud results</li> <li>Generate risk assessment</li> <li>Create detailed report</li> <li>Send notifications</li> </ul>"},{"location":"features/acrcloud-analysis/#4-report-storage","title":"4. Report Storage","text":"<ul> <li>Store analysis results</li> <li>Generate recommendations</li> <li>Update song status</li> </ul>"},{"location":"features/acrcloud-analysis/#risk-assessment","title":"Risk Assessment","text":""},{"location":"features/acrcloud-analysis/#risk-levels","title":"Risk Levels","text":"<ul> <li>Low: No significant matches found</li> <li>Medium: Similar content detected</li> <li>High: Cover song or high similarity</li> <li>Critical: Exact match detected</li> </ul>"},{"location":"features/acrcloud-analysis/#match-types","title":"Match Types","text":"<ul> <li>No Match: No significant matches</li> <li>Similar: Similar content detected</li> <li>Cover: Cover song detected</li> <li>Exact: Exact match detected</li> </ul>"},{"location":"features/acrcloud-analysis/#confidence-scoring","title":"Confidence Scoring","text":"<ul> <li>Based on ACRCloud similarity scores</li> <li>Weighted by match type and quality</li> <li>Range: 0-100%</li> </ul>"},{"location":"features/acrcloud-analysis/#webhook-implementation","title":"Webhook Implementation","text":"<p>The system uses webhook-based processing for real-time, asynchronous analysis:</p>"},{"location":"features/acrcloud-analysis/#webhook-flow","title":"Webhook Flow","text":"<ol> <li>File Upload: Upload file to ACRCloud with callback URL</li> <li>Asynchronous Processing: ACRCloud processes file in cloud infrastructure</li> <li>Webhook Callback: ACRCloud calls webhook when processing completes</li> <li>Result Processing: Background task processes results and updates database</li> </ol>"},{"location":"features/acrcloud-analysis/#configuration","title":"Configuration","text":"<pre><code># settings.py\nSITE_URL = os.environ.get('SITE_URL', 'http://localhost:8000')\n</code></pre>"},{"location":"features/acrcloud-analysis/#webhook-endpoint","title":"Webhook Endpoint","text":"<ul> <li>URL: <code>/acrcloud/webhook/file-scanning/</code></li> <li>Security: Logs all webhook calls with IP and payload</li> <li>Processing: Queues background task to retrieve results</li> </ul>"},{"location":"features/acrcloud-analysis/#security-considerations","title":"Security Considerations","text":""},{"location":"features/acrcloud-analysis/#file-upload-security","title":"File Upload Security","text":"<ul> <li>File type validation</li> <li>File size limits</li> <li>Virus scanning (recommended)</li> <li>Secure file storage</li> </ul>"},{"location":"features/acrcloud-analysis/#api-security","title":"API Security","text":"<ul> <li>CSRF protection</li> <li>User authentication</li> <li>Rate limiting (recommended)</li> <li>Input validation</li> </ul>"},{"location":"features/acrcloud-analysis/#data-privacy","title":"Data Privacy","text":"<ul> <li>User data isolation</li> <li>Secure credential storage</li> <li>Audit logging</li> <li>Data retention policies</li> </ul>"},{"location":"features/acrcloud-analysis/#testing-and-development","title":"Testing and Development","text":""},{"location":"features/acrcloud-analysis/#mock-analysis-service","title":"Mock Analysis Service","text":"<p>For testing without ACRCloud credentials, the system includes a mock analysis service:</p>"},{"location":"features/acrcloud-analysis/#testing-commands","title":"Testing Commands","text":"<pre><code># Synchronous mock analysis (immediate results)\npython manage.py sync_mock_analysis --all\npython manage.py sync_mock_analysis --song-id &lt;song_id&gt;\n\n# Asynchronous mock analysis (requires Celery)\npython manage.py test_mock_analysis --all\npython manage.py test_mock_analysis --song-id &lt;song_id&gt;\n</code></pre>"},{"location":"features/acrcloud-analysis/#mock-results-include","title":"Mock Results Include","text":"<ul> <li>Risk assessment (low, medium, high, critical)</li> <li>Match types (no_match, similar, cover, exact)</li> <li>Confidence scores (0-100%)</li> <li>Fingerprint and cover detection results</li> <li>Metadata detection (genre, language, ISRC)</li> <li>Fraud detection indicators</li> </ul>"},{"location":"features/acrcloud-analysis/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"features/acrcloud-analysis/#health-checks","title":"Health Checks","text":"<ul> <li>ACRCloud API connectivity</li> <li>Celery worker status</li> <li>Database connectivity</li> <li>File storage availability</li> </ul>"},{"location":"features/acrcloud-analysis/#logging","title":"Logging","text":"<ul> <li>Analysis progress tracking</li> <li>Error logging and alerting</li> <li>Performance monitoring</li> <li>User activity logging</li> </ul>"},{"location":"features/acrcloud-analysis/#cleanup-tasks","title":"Cleanup Tasks","text":"<ul> <li>Old analysis data cleanup</li> <li>Temporary file cleanup</li> <li>Failed analysis retry</li> <li>Database optimization</li> </ul>"},{"location":"features/acrcloud-analysis/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/acrcloud-analysis/#common-issues","title":"Common Issues","text":""},{"location":"features/acrcloud-analysis/#upload-failures","title":"Upload Failures","text":"<ul> <li>Check file format and size</li> <li>Verify ACRCloud API credentials</li> <li>Check Celery worker status</li> <li>Review error logs</li> </ul>"},{"location":"features/acrcloud-analysis/#analysis-failures","title":"Analysis Failures","text":"<ul> <li>Verify ACRCloud API connectivity</li> <li>Check file format compatibility</li> <li>Review ACRCloud quotas</li> <li>Check error logs</li> </ul>"},{"location":"features/acrcloud-analysis/#performance-issues","title":"Performance Issues","text":"<ul> <li>Monitor Celery worker count</li> <li>Check database performance</li> <li>Review file storage capacity</li> <li>Optimize analysis settings</li> </ul>"},{"location":"features/acrcloud-analysis/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging: <pre><code>LOGGING = {\n    'loggers': {\n        'acrcloud': {\n            'level': 'DEBUG',\n            'handlers': ['console'],\n        },\n    },\n}\n</code></pre></p>"},{"location":"features/acrcloud-analysis/#implementation-status","title":"Implementation Status","text":""},{"location":"features/acrcloud-analysis/#completed-features","title":"\u2705 Completed Features","text":""},{"location":"features/acrcloud-analysis/#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li>\u2705 Database Models: Song, Analysis, AnalysisReport, ACRCloudConfig</li> <li>\u2705 Admin Interface: Complete Jazzmin-themed administration</li> <li>\u2705 User Interface: Dashboard-styled upload and viewing pages</li> <li>\u2705 API Integration: Full ACRCloud service integration</li> <li>\u2705 Background Processing: Celery task system</li> <li>\u2705 File Handling: FilePond integration with proper file management</li> </ul>"},{"location":"features/acrcloud-analysis/#user-experience","title":"User Experience","text":"<ul> <li>\u2705 Modern Upload: Drag-and-drop FilePond interface</li> <li>\u2705 Real-time Status: Live analysis progress tracking</li> <li>\u2705 Comprehensive Reports: Detailed fraud detection results</li> <li>\u2705 Search &amp; Filter: Advanced song management</li> <li>\u2705 Responsive Design: Works on all devices</li> <li>\u2705 Dark Mode: Full dark mode support</li> </ul>"},{"location":"features/acrcloud-analysis/#technical-features","title":"Technical Features","text":"<ul> <li>\u2705 Security: File validation, user isolation, CSRF protection</li> <li>\u2705 Error Handling: Comprehensive error management and retry logic</li> <li>\u2705 Logging: Detailed logging for debugging and monitoring</li> <li>\u2705 Testing: Mock services for development and testing</li> <li>\u2705 Documentation: Complete setup and usage guides</li> </ul>"},{"location":"features/acrcloud-analysis/#analysis-capabilities","title":"Analysis Capabilities","text":"<ul> <li>\u2705 Fingerprint Analysis: Exact match detection</li> <li>\u2705 Cover Detection: Cover song identification</li> <li>\u2705 Lyrics Analysis: Lyrical content comparison</li> <li>\u2705 Risk Assessment: 4-level risk classification system</li> <li>\u2705 Fraud Detection: Comprehensive fraud indicators</li> <li>\u2705 Confidence Scoring: Percentage-based confidence metrics</li> </ul>"},{"location":"features/acrcloud-analysis/#production-readiness","title":"\ud83c\udfaf Production Readiness","text":"<p>The ACRCloud integration is production-ready with: - Complete feature implementation - Comprehensive testing capabilities - Robust error handling - Security best practices - Detailed documentation - Mock testing for development</p>"},{"location":"features/acrcloud-analysis/#future-enhancements","title":"Future Enhancements","text":""},{"location":"features/acrcloud-analysis/#planned-features","title":"Planned Features","text":"<ul> <li>Real-time analysis progress</li> <li>Batch upload processing</li> <li>Advanced filtering options</li> <li>Export functionality</li> <li>API rate limiting</li> <li>Enhanced webhook support</li> </ul>"},{"location":"features/acrcloud-analysis/#integration-opportunities","title":"Integration Opportunities","text":"<ul> <li>Music streaming platforms</li> <li>Copyright management systems</li> <li>Content management systems</li> <li>Analytics dashboards</li> </ul>"},{"location":"features/acrcloud-analysis/#support","title":"Support","text":"<p>For technical support or questions about the ACRCloud integration:</p> <ol> <li>Check the troubleshooting section</li> <li>Review error logs</li> <li>Contact system administrator</li> <li>Submit issue report</li> </ol>"},{"location":"features/background-tasks/","title":"Background Tasks System","text":""},{"location":"features/background-tasks/#overview","title":"Overview","text":"<p>The Background Tasks System in MusicChartsAI provides comprehensive asynchronous task processing using Celery. This system handles all time-consuming operations including data synchronization, API calls, file processing, and analytics calculations without blocking the main application.</p>"},{"location":"features/background-tasks/#architecture","title":"Architecture","text":""},{"location":"features/background-tasks/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    A[Django Application] --&gt; B[Celery Task Queue]\n    B --&gt; C[Redis Message Broker]\n    C --&gt; D[Celery Workers]\n    D --&gt; E[Task Execution]\n    E --&gt; F[Database Updates]\n    E --&gt; G[External API Calls]\n    E --&gt; H[File Processing]\n\n    I[Task Monitor] --&gt; B\n    J[Admin Interface] --&gt; I\n    K[API Endpoints] --&gt; I</code></pre>"},{"location":"features/background-tasks/#task-categories","title":"Task Categories","text":"<ol> <li>Data Synchronization Tasks</li> <li>Chart ranking synchronization</li> <li>Track metadata updates</li> <li>Audience data fetching</li> <li> <p>Platform data refresh</p> </li> <li> <p>Analysis Tasks</p> </li> <li>ACRCloud audio analysis</li> <li>Fraud detection processing</li> <li>Chart trend calculations</li> <li> <p>Performance analytics</p> </li> <li> <p>System Tasks</p> </li> <li>Database maintenance</li> <li>Log cleanup</li> <li>Backup operations</li> <li>Health checks</li> </ol>"},{"location":"features/background-tasks/#celery-configuration","title":"Celery Configuration","text":""},{"location":"features/background-tasks/#basic-setup","title":"Basic Setup","text":"<p>The Celery configuration is located in <code>config/celery.py</code>:</p> <pre><code>import os\nfrom celery import Celery\n\n# Set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napp = Celery('config')\n\n# Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Load task modules from all registered Django apps.\napp.autodiscover_tasks()\n</code></pre>"},{"location":"features/background-tasks/#settings-configuration","title":"Settings Configuration","text":"<p>Key Celery settings in <code>config/settings.py</code>:</p> <pre><code># Celery Configuration\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\nCELERY_RESULT_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\n\n# Task Configuration\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes\nCELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes\nCELERY_WORKER_PREFETCH_MULTIPLIER = 1\n\n# Result Configuration\nCELERY_RESULT_BACKEND = \"django-db\"\nCELERY_RESULT_EXTENDED = True\nCELERY_RESULT_EXPIRES = 60 * 60 * 24 * 30  # 30 days\n\n# Serialization\nCELERY_ACCEPT_CONTENT = [\"json\"]\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\n\n# Concurrency Limits\nCELERY_WORKER_CONCURRENCY = 4\nCELERY_TASK_ANNOTATIONS = {\n    'apps.soundcharts.tasks.sync_chart_rankings_task': {'rate_limit': '2/m'},\n    'apps.soundcharts.tasks.fetch_track_metadata_task': {'rate_limit': '2/m'},\n    'apps.acrcloud.tasks.analyze_song_task': {'rate_limit': '1/m'},\n}\n</code></pre>"},{"location":"features/background-tasks/#task-management","title":"Task Management","text":""},{"location":"features/background-tasks/#task-scripts-directory","title":"Task Scripts Directory","text":"<p>Custom task scripts are stored in the <code>tasks_scripts/</code> directory:</p> <pre><code>tasks_scripts/\n\u251c\u2500\u2500 check-db-health.py          # Database health monitoring\n\u251c\u2500\u2500 check-disk-free.py         # Disk space monitoring\n\u251c\u2500\u2500 clean-database.py          # Database cleanup operations\n\u2514\u2500\u2500 backup-database.py         # Database backup tasks\n</code></pre>"},{"location":"features/background-tasks/#creating-custom-tasks","title":"Creating Custom Tasks","text":""},{"location":"features/background-tasks/#example-database-backup-task","title":"Example: Database Backup Task","text":"<pre><code># tasks_scripts/backup_database.py\nimport os\nimport shutil\nfrom datetime import datetime\nfrom django.conf import settings\n\ndef main():\n    \"\"\"Create a database backup with timestamp.\"\"\"\n    try:\n        # Get database file path\n        db_path = settings.DATABASES['default']['NAME']\n\n        # Create backup directory if it doesn't exist\n        backup_dir = \"db_backups\"\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        # Generate backup filename with timestamp\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        backup_filename = f\"db_backup_{timestamp}.sqlite3\"\n        backup_path = os.path.join(backup_dir, backup_filename)\n\n        # Create backup\n        shutil.copy2(db_path, backup_path)\n\n        print(f\"Database backup created: {backup_path}\")\n        return 0\n\n    except Exception as e:\n        print(f\"Backup failed: {str(e)}\")\n        return 1\n\nif __name__ == \"__main__\":\n    exit(main())\n</code></pre>"},{"location":"features/background-tasks/#example-data-cleanup-task","title":"Example: Data Cleanup Task","text":"<pre><code># tasks_scripts/cleanup_old_data.py\nfrom datetime import datetime, timedelta\nfrom django.utils import timezone\nfrom apps.soundcharts.models import ChartRanking, TrackAudienceTimeSeries\n\ndef main():\n    \"\"\"Clean up old data to maintain database performance.\"\"\"\n    try:\n        # Calculate cutoff date (90 days ago)\n        cutoff_date = timezone.now() - timedelta(days=90)\n\n        # Clean up old chart rankings\n        old_rankings = ChartRanking.objects.filter(\n            fetched_at__lt=cutoff_date\n        )\n        rankings_count = old_rankings.count()\n        old_rankings.delete()\n\n        # Clean up old audience data\n        old_audience = TrackAudienceTimeSeries.objects.filter(\n            fetched_at__lt=cutoff_date\n        )\n        audience_count = old_audience.count()\n        old_audience.delete()\n\n        print(f\"Cleaned up {rankings_count} old chart rankings\")\n        print(f\"Cleaned up {audience_count} old audience records\")\n        return 0\n\n    except Exception as e:\n        print(f\"Cleanup failed: {str(e)}\")\n        return 1\n\nif __name__ == \"__main__\":\n    exit(main())\n</code></pre>"},{"location":"features/background-tasks/#core-task-implementations","title":"Core Task Implementations","text":""},{"location":"features/background-tasks/#chart-synchronization-tasks","title":"Chart Synchronization Tasks","text":""},{"location":"features/background-tasks/#main-sync-task","title":"Main Sync Task","text":"<pre><code># apps/soundcharts/tasks.py\nfrom celery import shared_task\nfrom django.utils import timezone\nfrom .models import ChartSyncSchedule, ChartSyncExecution\nfrom .services import SoundchartsService\n\n@shared_task(bind=True, max_retries=3)\ndef sync_chart_rankings_task(self, schedule_id, execution_id):\n    \"\"\"Sync chart rankings for a specific schedule.\"\"\"\n    try:\n        # Get schedule and execution records\n        schedule = ChartSyncSchedule.objects.get(id=schedule_id)\n        execution = ChartSyncExecution.objects.get(id=execution_id)\n\n        # Update execution status\n        execution.status = 'running'\n        execution.started_at = timezone.now()\n        execution.save()\n\n        # Initialize service\n        service = SoundchartsService()\n\n        # Determine missing periods\n        missing_periods = schedule.get_missing_periods()\n\n        # Process each missing period\n        rankings_created = 0\n        tracks_created = 0\n\n        for period in missing_periods:\n            result = service.fetch_chart_rankings(\n                chart_id=schedule.chart.soundcharts_id,\n                start_date=period['start'],\n                end_date=period['end']\n            )\n\n            rankings_created += result['rankings_created']\n            tracks_created += result['tracks_created']\n\n        # Mark execution as completed\n        execution.mark_completed(\n            rankings_created=rankings_created,\n            tracks_created=tracks_created\n        )\n\n        # Update schedule\n        schedule.last_sync_at = timezone.now()\n        schedule.calculate_next_sync()\n        schedule.total_executions += 1\n        schedule.successful_executions += 1\n        schedule.save()\n\n        return {\n            'status': 'success',\n            'rankings_created': rankings_created,\n            'tracks_created': tracks_created\n        }\n\n    except Exception as exc:\n        # Handle retries\n        execution.mark_failed(str(exc))\n        schedule.failed_executions += 1\n        schedule.save()\n\n        # Retry with exponential backoff\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n</code></pre>"},{"location":"features/background-tasks/#scheduled-sync-processor","title":"Scheduled Sync Processor","text":"<pre><code>@shared_task\ndef process_scheduled_chart_syncs():\n    \"\"\"Process all due chart sync schedules.\"\"\"\n    from django.utils import timezone\n\n    # Find due schedules\n    due_schedules = ChartSyncSchedule.objects.filter(\n        is_active=True,\n        next_sync_at__lte=timezone.now()\n    )\n\n    for schedule in due_schedules:\n        # Create execution record\n        execution = ChartSyncExecution.objects.create(\n            schedule=schedule,\n            status='pending'\n        )\n\n        # Queue sync task\n        sync_chart_rankings_task.delay(schedule.id, execution.id)\n\n        # Update next sync time\n        schedule.calculate_next_sync()\n        schedule.save()\n\n    return f\"Processed {due_schedules.count()} due schedules\"\n</code></pre>"},{"location":"features/background-tasks/#acrcloud-analysis-tasks","title":"ACRCloud Analysis Tasks","text":""},{"location":"features/background-tasks/#audio-analysis-task","title":"Audio Analysis Task","text":"<pre><code># apps/acrcloud/tasks.py\nfrom celery import shared_task\nfrom .models import Song, Analysis\nfrom .services import ACRCloudService\n\n@shared_task(bind=True, max_retries=3)\ndef analyze_song_task(self, song_id):\n    \"\"\"Analyze uploaded song using ACRCloud API.\"\"\"\n    try:\n        song = Song.objects.get(id=song_id)\n\n        # Create analysis record\n        analysis = Analysis.objects.create(\n            song=song,\n            status='processing'\n        )\n\n        # Initialize service\n        service = ACRCloudService()\n\n        # Perform analysis\n        result = service.analyze_audio(song.audio_file.path)\n\n        # Update analysis record\n        analysis.status = 'completed'\n        analysis.raw_response = result\n        analysis.save()\n\n        # Generate analysis report\n        service.generate_analysis_report(analysis)\n\n        # Send notification\n        send_analysis_complete_notification.delay(song.id, analysis.id)\n\n        return {\n            'status': 'success',\n            'analysis_id': analysis.id,\n            'song_id': song.id\n        }\n\n    except Exception as exc:\n        # Handle retries\n        if analysis:\n            analysis.status = 'failed'\n            analysis.error_message = str(exc)\n            analysis.save()\n\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n\n@shared_task\ndef send_analysis_complete_notification(song_id, analysis_id):\n    \"\"\"Send notification when analysis is complete.\"\"\"\n    # Implementation for email/SMS notifications\n    pass\n</code></pre>"},{"location":"features/background-tasks/#metadata-fetching-tasks","title":"Metadata Fetching Tasks","text":""},{"location":"features/background-tasks/#track-metadata-task","title":"Track Metadata Task","text":"<pre><code># apps/soundcharts/tasks.py\n@shared_task(bind=True, max_retries=3)\ndef fetch_track_metadata_task(self, track_uuid):\n    \"\"\"Fetch and update track metadata from Soundcharts API.\"\"\"\n    try:\n        from .models import Track\n        from .services import SoundchartsService\n\n        track = Track.objects.get(uuid=track_uuid)\n        service = SoundchartsService()\n\n        # Fetch metadata\n        metadata = service.fetch_track_metadata(track_uuid)\n\n        # Update track\n        track.title = metadata.get('title', track.title)\n        track.artist_name = metadata.get('artist_name', track.artist_name)\n        track.album_name = metadata.get('album_name', track.album_name)\n        track.release_date = metadata.get('release_date', track.release_date)\n        track.genre = metadata.get('genre', track.genre)\n        track.metadata_updated_at = timezone.now()\n        track.save()\n\n        return {\n            'status': 'success',\n            'track_uuid': track_uuid,\n            'metadata_updated': True\n        }\n\n    except Exception as exc:\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n</code></pre>"},{"location":"features/background-tasks/#task-monitoring-and-management","title":"Task Monitoring and Management","text":""},{"location":"features/background-tasks/#admin-interface","title":"Admin Interface","text":"<p>The Django admin provides comprehensive task management:</p>"},{"location":"features/background-tasks/#task-execution-monitoring","title":"Task Execution Monitoring","text":"<ul> <li>Real-time Status: Live task status updates</li> <li>Execution History: Complete task execution logs</li> <li>Error Tracking: Detailed error messages and stack traces</li> <li>Performance Metrics: Task duration and resource usage</li> </ul>"},{"location":"features/background-tasks/#task-management-actions","title":"Task Management Actions","text":"<ul> <li>Start Tasks: Execute custom scripts from admin</li> <li>Cancel Tasks: Stop running tasks gracefully</li> <li>Retry Failed Tasks: Restart failed executions</li> <li>Bulk Operations: Manage multiple tasks simultaneously</li> </ul>"},{"location":"features/background-tasks/#api-endpoints","title":"API Endpoints","text":""},{"location":"features/background-tasks/#task-status-api","title":"Task Status API","text":"<pre><code># apps/tasks/views.py\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsStaffUser\nfrom rest_framework.response import Response\nfrom celery.result import AsyncResult\n\n@api_view(['GET'])\n@permission_classes([IsStaffUser])\ndef task_status(request, task_id):\n    \"\"\"Get the status of a specific task.\"\"\"\n    result = AsyncResult(task_id)\n\n    return Response({\n        'task_id': task_id,\n        'status': result.status,\n        'result': result.result if result.ready() else None,\n        'traceback': result.traceback if result.failed() else None\n    })\n</code></pre>"},{"location":"features/background-tasks/#task-queue-api","title":"Task Queue API","text":"<pre><code>@api_view(['GET'])\n@permission_classes([IsStaffUser])\ndef task_queue_status(request):\n    \"\"\"Get current task queue status.\"\"\"\n    from celery import current_app\n\n    # Get active tasks\n    active_tasks = current_app.control.inspect().active()\n\n    # Get scheduled tasks\n    scheduled_tasks = current_app.control.inspect().scheduled()\n\n    return Response({\n        'active_tasks': active_tasks,\n        'scheduled_tasks': scheduled_tasks,\n        'worker_count': len(active_tasks.get('celery@worker', [])),\n    })\n</code></pre>"},{"location":"features/background-tasks/#task-scheduling","title":"Task Scheduling","text":""},{"location":"features/background-tasks/#celery-beat-configuration","title":"Celery Beat Configuration","text":"<p>For periodic tasks, configure Celery Beat:</p> <pre><code># config/settings.py\nfrom celery.schedules import crontab\n\nCELERY_BEAT_SCHEDULE = {\n    'process-scheduled-syncs': {\n        'task': 'apps.soundcharts.tasks.process_scheduled_chart_syncs',\n        'schedule': crontab(minute=0),  # Every hour\n    },\n    'cleanup-old-data': {\n        'task': 'apps.soundcharts.tasks.cleanup_old_data_task',\n        'schedule': crontab(hour=2, minute=0),  # Daily at 2 AM\n    },\n    'health-check': {\n        'task': 'apps.tasks.tasks.system_health_check',\n        'schedule': crontab(minute='*/15'),  # Every 15 minutes\n    },\n}\n</code></pre>"},{"location":"features/background-tasks/#custom-scheduling","title":"Custom Scheduling","text":""},{"location":"features/background-tasks/#dynamic-task-scheduling","title":"Dynamic Task Scheduling","text":"<pre><code># apps/soundcharts/tasks.py\n@shared_task\ndef schedule_chart_sync(chart_id, frequency='weekly'):\n    \"\"\"Schedule a chart sync task.\"\"\"\n    from .models import ChartSyncSchedule\n\n    schedule = ChartSyncSchedule.objects.create(\n        chart_id=chart_id,\n        sync_frequency=frequency,\n        is_active=True\n    )\n\n    # Calculate next sync time\n    schedule.calculate_next_sync()\n    schedule.save()\n\n    return f\"Scheduled sync for chart {chart_id}\"\n</code></pre>"},{"location":"features/background-tasks/#error-handling-and-retry-logic","title":"Error Handling and Retry Logic","text":""},{"location":"features/background-tasks/#retry-configuration","title":"Retry Configuration","text":"<pre><code># apps/soundcharts/tasks.py\n@shared_task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 60})\ndef robust_api_call_task(self, api_endpoint, data):\n    \"\"\"Task with automatic retry on failure.\"\"\"\n    try:\n        # API call implementation\n        response = make_api_call(api_endpoint, data)\n        return response\n\n    except Exception as exc:\n        # Log the error\n        logger.error(f\"API call failed: {exc}\")\n\n        # Retry with exponential backoff\n        raise self.retry(exc=exc, countdown=60 * (2 ** self.request.retries))\n</code></pre>"},{"location":"features/background-tasks/#error-notifications","title":"Error Notifications","text":"<pre><code>@shared_task\ndef notify_task_failure(task_name, error_message, user_id):\n    \"\"\"Send notification when a task fails.\"\"\"\n    from django.core.mail import send_mail\n    from django.contrib.auth.models import User\n\n    user = User.objects.get(id=user_id)\n\n    send_mail(\n        subject=f'Task Failed: {task_name}',\n        message=f'Task {task_name} failed with error: {error_message}',\n        from_email='noreply@musicchartsai.com',\n        recipient_list=[user.email],\n    )\n</code></pre>"},{"location":"features/background-tasks/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/background-tasks/#task-optimization-strategies","title":"Task Optimization Strategies","text":"<ol> <li>Batch Processing: Group similar operations together</li> <li>Connection Pooling: Reuse database connections</li> <li>Caching: Cache frequently accessed data</li> <li>Resource Limits: Set appropriate concurrency limits</li> </ol>"},{"location":"features/background-tasks/#example-batch-processing","title":"Example: Batch Processing","text":"<pre><code>@shared_task\ndef batch_process_tracks(track_ids):\n    \"\"\"Process multiple tracks in a single task.\"\"\"\n    from .models import Track\n    from .services import SoundchartsService\n\n    service = SoundchartsService()\n    results = []\n\n    # Process tracks in batches\n    for i in range(0, len(track_ids), 10):\n        batch = track_ids[i:i+10]\n        batch_results = service.batch_fetch_metadata(batch)\n        results.extend(batch_results)\n\n    return results\n</code></pre>"},{"location":"features/background-tasks/#resource-management","title":"Resource Management","text":"<pre><code># config/settings.py\nCELERY_WORKER_CONCURRENCY = 4\nCELERY_WORKER_MAX_TASKS_PER_CHILD = 1000\nCELERY_WORKER_DISABLE_RATE_LIMITS = False\n\n# Memory management\nCELERY_WORKER_MEMORY_LIMIT = 2000000  # 2GB\nCELERY_WORKER_MAX_MEMORY_PER_CHILD = 200000  # 200MB\n</code></pre>"},{"location":"features/background-tasks/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"features/background-tasks/#task-logging","title":"Task Logging","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\n@shared_task\ndef logged_task(task_data):\n    \"\"\"Task with comprehensive logging.\"\"\"\n    logger.info(f\"Starting task with data: {task_data}\")\n\n    try:\n        # Task implementation\n        result = process_data(task_data)\n        logger.info(f\"Task completed successfully: {result}\")\n        return result\n\n    except Exception as exc:\n        logger.error(f\"Task failed: {exc}\", exc_info=True)\n        raise\n</code></pre>"},{"location":"features/background-tasks/#health-monitoring","title":"Health Monitoring","text":"<pre><code>@shared_task\ndef system_health_check():\n    \"\"\"Monitor system health and performance.\"\"\"\n    import psutil\n    from django.db import connection\n\n    # Check database connection\n    try:\n        connection.ensure_connection()\n        db_status = \"healthy\"\n    except Exception as e:\n        db_status = f\"unhealthy: {e}\"\n\n    # Check system resources\n    cpu_percent = psutil.cpu_percent()\n    memory_percent = psutil.virtual_memory().percent\n    disk_percent = psutil.disk_usage('/').percent\n\n    health_data = {\n        'timestamp': timezone.now().isoformat(),\n        'database': db_status,\n        'cpu_percent': cpu_percent,\n        'memory_percent': memory_percent,\n        'disk_percent': disk_percent,\n    }\n\n    # Log health data\n    logger.info(f\"System health check: {health_data}\")\n\n    return health_data\n</code></pre>"},{"location":"features/background-tasks/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"features/background-tasks/#production-configuration","title":"Production Configuration","text":"<pre><code># Production settings\nCELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379')\nCELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379')\n\n# Security\nCELERY_TASK_ALWAYS_EAGER = False  # Never run tasks synchronously in production\nCELERY_TASK_EAGER_PROPAGATES = True\n\n# Performance\nCELERY_WORKER_CONCURRENCY = int(os.environ.get('CELERY_WORKER_CONCURRENCY', 4))\nCELERY_WORKER_PREFETCH_MULTIPLIER = 1\n</code></pre>"},{"location":"features/background-tasks/#docker-configuration","title":"Docker Configuration","text":"<pre><code># Dockerfile for Celery worker\nFROM python:3.13-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"celery\", \"-A\", \"config\", \"worker\", \"-l\", \"info\"]\n</code></pre>"},{"location":"features/background-tasks/#supervisor-configuration","title":"Supervisor Configuration","text":"<pre><code>[program:celery-worker]\ncommand=/path/to/venv/bin/celery -A config worker -l info\ndirectory=/path/to/project\nuser=www-data\nnumprocs=1\nstdout_logfile=/var/log/celery/worker.log\nstderr_logfile=/var/log/celery/worker.log\nautostart=true\nautorestart=true\nstartsecs=10\nstopwaitsecs=600\nkillasgroup=true\npriority=998\n</code></pre>"},{"location":"features/background-tasks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/background-tasks/#common-issues","title":"Common Issues","text":"<ol> <li>Tasks Not Executing</li> <li>Check Celery worker status</li> <li>Verify Redis connection</li> <li> <p>Check task queue status</p> </li> <li> <p>Memory Issues</p> </li> <li>Monitor worker memory usage</li> <li>Adjust worker concurrency</li> <li> <p>Implement task cleanup</p> </li> <li> <p>Database Locks</p> </li> <li>Use database connection pooling</li> <li>Implement retry logic</li> <li>Monitor database performance</li> </ol>"},{"location":"features/background-tasks/#debug-commands","title":"Debug Commands","text":"<pre><code># Check Celery status\ncelery -A config inspect active\n\n# Check scheduled tasks\ncelery -A config inspect scheduled\n\n# Check worker stats\ncelery -A config inspect stats\n\n# Purge task queue\ncelery -A config purge\n</code></pre>"},{"location":"features/background-tasks/#best-practices","title":"Best Practices","text":""},{"location":"features/background-tasks/#task-design","title":"Task Design","text":"<ol> <li>Idempotent Tasks: Tasks should be safe to retry</li> <li>Small Tasks: Break large operations into smaller tasks</li> <li>Error Handling: Implement comprehensive error handling</li> <li>Resource Cleanup: Clean up resources after task completion</li> </ol>"},{"location":"features/background-tasks/#monitoring","title":"Monitoring","text":"<ol> <li>Task Metrics: Track task execution times and success rates</li> <li>Resource Usage: Monitor CPU, memory, and disk usage</li> <li>Queue Length: Monitor task queue length and processing rate</li> <li>Error Rates: Track and alert on error rates</li> </ol>"},{"location":"features/background-tasks/#security","title":"Security","text":"<ol> <li>Task Authentication: Secure task execution</li> <li>Data Protection: Protect sensitive data in tasks</li> <li>Access Control: Limit task execution permissions</li> <li>Audit Logging: Log all task executions</li> </ol> <p>The Background Tasks System provides a robust foundation for handling all asynchronous operations in MusicChartsAI. With comprehensive monitoring, error handling, and scalability features, it ensures reliable and efficient task processing for all platform operations.</p>"},{"location":"features/chart-management/","title":"Chart Management","text":""},{"location":"features/chart-management/#overview","title":"Overview","text":"<p>The Chart Management system provides comprehensive tools for managing music charts, including automated synchronization, health monitoring, performance tracking, and advanced admin interfaces. The system ensures reliable data collection from multiple music platforms while providing detailed insights into chart performance and data quality.</p>"},{"location":"features/chart-management/#features","title":"Features","text":""},{"location":"features/chart-management/#core-functionality","title":"Core Functionality","text":"<ul> <li>Automated Sync Scheduling: Intelligent scheduling based on chart frequency</li> <li>Health Monitoring: Real-time chart update status and performance tracking</li> <li>Error Handling: Comprehensive retry mechanisms with exponential backoff</li> <li>Performance Metrics: Detailed sync success rates, timing, and data quality metrics</li> <li>Admin Interface: Enhanced navigation and management tools</li> <li>Historical Data Sync: Complete historical data synchronization with gap detection</li> </ul>"},{"location":"features/chart-management/#advanced-features","title":"Advanced Features","text":"<ul> <li>Track Metadata Integration: Automatic track metadata fetching during sync</li> <li>On-Demand Audience Data: Smart audience data fetching when needed</li> <li>Multi-Platform Support: Unified management across all music platforms</li> <li>Execution Tracking: Detailed execution history and performance analytics</li> <li>Native Admin Tables: Professional admin interface with sorting and filtering</li> </ul>"},{"location":"features/chart-management/#chart-sync-system","title":"Chart Sync System","text":""},{"location":"features/chart-management/#enhanced-sync-features","title":"Enhanced Sync Features","text":""},{"location":"features/chart-management/#immediate-vs-scheduled-sync","title":"Immediate vs Scheduled Sync","text":"<p>When adding a chart to the sync schedule, users can choose between:</p> <ol> <li>Scheduled Sync (default): Chart syncs according to its frequency schedule</li> <li>Immediate Sync: Chart starts syncing immediately with all historical data</li> </ol>"},{"location":"features/chart-management/#complete-historical-data-sync","title":"Complete Historical Data Sync","text":"<p>The system intelligently syncs all missing chart rankings based on chart frequency:</p> <ul> <li>Daily Charts: Syncs one ranking for each day</li> <li>Weekly Charts: Syncs one ranking for each week  </li> <li>Monthly Charts: Syncs one ranking for each month</li> </ul> <p>Historical sync features: - Goes back up to 1 year to find missing data - Identifies gaps in existing rankings - Creates specific sync tasks for missing periods - Ensures complete data consistency</p>"},{"location":"features/chart-management/#track-metadata-integration","title":"Track Metadata Integration","text":"<p>During chart sync, the system automatically:</p> <ol> <li>Fetches Track Metadata: For all new tracks found in chart rankings</li> <li>Updates Existing Tracks: If track information has changed</li> <li>Queues Metadata Tasks: Uses existing bulk metadata fetch system</li> <li>Tracks Metadata Age: Only fetches metadata if older than 30 days</li> </ol>"},{"location":"features/chart-management/#on-demand-audience-data-fetching","title":"On-Demand Audience Data Fetching","text":"<p>Audience data is fetched on-demand when accessing song audience views:</p> <ol> <li>Automatic Detection: System checks if audience data is stale or missing</li> <li>Background Fetching: Triggers audience fetch task in background</li> <li>Multi-Platform Support: Fetches audience data for all supported platforms</li> <li>Smart Caching: Only fetches if data is older than 7 days</li> </ol>"},{"location":"features/chart-management/#architecture","title":"Architecture","text":""},{"location":"features/chart-management/#core-models","title":"Core Models","text":""},{"location":"features/chart-management/#chartsyncschedule","title":"ChartSyncSchedule","text":"<p>Manages scheduled chart synchronization tasks.</p> <p>Key Fields: - <code>chart</code>: Foreign key to Chart model (unique constraint) - <code>is_active</code>: Boolean flag to enable/disable sync - <code>sync_frequency</code>: How often to sync (daily, weekly, monthly, custom) - <code>custom_interval_hours</code>: Custom interval in hours - <code>last_sync_at</code>: Timestamp of last successful sync - <code>next_sync_at</code>: When the next sync should occur - <code>total_executions</code>: Total number of sync attempts - <code>successful_executions</code>: Number of successful syncs - <code>failed_executions</code>: Number of failed syncs - <code>sync_immediately</code>: Whether to start sync immediately - <code>sync_historical_data</code>: Whether to sync all historical data - <code>fetch_track_metadata</code>: Whether to fetch track metadata during sync</p> <p>Key Methods: - <code>calculate_next_sync()</code>: Calculates next sync time based on frequency - <code>success_rate</code>: Property returning success rate as percentage - <code>is_overdue</code>: Property indicating if sync is overdue</p>"},{"location":"features/chart-management/#chartsyncexecution","title":"ChartSyncExecution","text":"<p>Tracks individual chart sync execution attempts.</p> <p>Key Fields: - <code>schedule</code>: Foreign key to ChartSyncSchedule - <code>status</code>: Execution status (pending, running, completed, failed, cancelled) - <code>started_at</code>: When execution started - <code>completed_at</code>: When execution completed - <code>error_message</code>: Error details if failed - <code>rankings_created</code>: Number of chart rankings created - <code>rankings_updated</code>: Number of chart rankings updated - <code>tracks_created</code>: Number of tracks created - <code>tracks_updated</code>: Number of tracks updated - <code>celery_task_id</code>: Celery task identifier - <code>retry_count</code>: Number of retry attempts - <code>max_retries</code>: Maximum retries allowed</p> <p>Key Methods: - <code>mark_completed()</code>: Mark execution as completed with results - <code>mark_failed()</code>: Mark execution as failed with error message - <code>duration</code>: Property returning execution duration in seconds</p>"},{"location":"features/chart-management/#admin-interface","title":"Admin Interface","text":""},{"location":"features/chart-management/#chart-admin-enhancements","title":"Chart Admin Enhancements","text":"<p>The Chart admin interface includes:</p> <ol> <li>Sync Status Column: Shows current sync status for each chart</li> <li>\u2705 Active: Chart is actively syncing</li> <li>\u26a0 Overdue: Chart sync is overdue</li> <li>\u23f8 Inactive: Chart sync is paused</li> <li> <p>Not Scheduled: Chart is not in sync schedule</p> </li> <li> <p>Sync Actions: Bulk actions for managing sync schedules</p> </li> <li>Add to Sync Schedule</li> <li>Remove from Sync Schedule</li> <li> <p>Trigger Manual Sync</p> </li> <li> <p>Quick Links: Direct links to manage sync schedules</p> </li> </ol>"},{"location":"features/chart-management/#chart-sync-schedule-admin","title":"Chart Sync Schedule Admin","text":"<p>Dedicated admin interface for managing sync schedules:</p> <p>List View Features: - Chart name and platform - Sync frequency and status - Last sync and next sync times - Success rate with color coding - Overdue status indicators - Total execution counts</p> <p>Detail View Features: - Complete schedule configuration - Execution history inline - Statistics and performance metrics - Error tracking and debugging</p> <p>Actions: - Activate/Deactivate schedules - Trigger manual syncs - Bulk operations</p>"},{"location":"features/chart-management/#chart-ranking-admin-dashboard","title":"Chart Ranking Admin Dashboard","text":""},{"location":"features/chart-management/#native-admin-table-implementation","title":"Native Admin Table Implementation","text":"<p>A proxy model <code>ChartRankingEntrySummary</code> provides a native Django admin table:</p> <p>Features: - Native Django admin styling: Uses built-in admin templates and CSS - Custom list display: Shows position, track info, trend, weeks, streams, and previous position - Filtering by ranking: Automatically filters entries for a specific chart ranking - Enhanced summary information: Shows comprehensive chart metadata - Entry statistics: Displays counts of new entries, moving up/down, and no change - Smart pagination: Shows up to 100 entries per page - Read-only access: Entries are managed through the import process</p> <p>Key Benefits: - Native look and feel matching other Django admin tables - Built-in sorting, filtering, and search functionality - Consistent styling with the overall admin interface - Better performance using Django's optimized admin queryset handling - Comprehensive information display with chart metadata</p>"},{"location":"features/chart-management/#celery-task-integration","title":"Celery Task Integration","text":""},{"location":"features/chart-management/#automatic-task-execution","title":"Automatic Task Execution","text":"<p>The system includes multiple mechanisms to ensure scheduled tasks are executed:</p> <ol> <li>Celery Beat Configuration (Primary Method)</li> <li>Configured with <code>CELERY_BEAT_SCHEDULE</code></li> <li>Runs <code>process_scheduled_chart_syncs</code> every 5 minutes</li> <li> <p>Automatically finds and processes due schedules</p> </li> <li> <p>Django Management Command (Backup Method)</p> </li> <li>Command: <code>python manage.py process_chart_syncs</code></li> <li>Can be run manually or via cron</li> <li> <p>Useful for debugging or manual execution</p> </li> <li> <p>Model-Level Scheduling (Automatic Setup)</p> </li> <li>When a new <code>ChartSyncSchedule</code> is created, it ensures the periodic task is scheduled</li> <li>Prevents missing periodic task configuration</li> </ol>"},{"location":"features/chart-management/#starting-the-system","title":"Starting the System","text":"<p>To run the complete chart sync system:</p> <pre><code># Terminal 1: Start Celery Worker\ncelery -A config worker -l info\n\n# Terminal 2: Start Celery Beat (for periodic tasks)\ncelery -A config beat -l info\n\n# Terminal 3: Start Django (if not already running)\npython manage.py runserver\n</code></pre>"},{"location":"features/chart-management/#task-configuration","title":"Task Configuration","text":"<p>Celery Beat Schedule: <pre><code>CELERY_BEAT_SCHEDULE = {\n    'process-chart-sync-schedules': {\n        'task': 'apps.soundcharts.tasks.process_scheduled_chart_syncs',\n        'schedule': 300.0,  # Run every 5 minutes\n    },\n}\n</code></pre></p> <p>Task Flow: 1. Celery Beat runs <code>process_scheduled_chart_syncs</code> every 5 minutes 2. Task queries for active schedules where <code>next_sync_at &lt;= now</code> 3. For each due schedule, creates a <code>ChartSyncExecution</code> record 4. Queues <code>sync_chart_rankings_task</code> with the execution ID 5. Updates execution status and Celery task ID 6. Worker processes the sync task asynchronously</p>"},{"location":"features/chart-management/#api-endpoints","title":"API Endpoints","text":""},{"location":"features/chart-management/#chart-sync-schedules","title":"Chart Sync Schedules","text":"<p>GET /api/sync/schedules/ - Returns all chart sync schedules - Includes chart details, status, and statistics</p> <p>POST /api/sync/schedules/ - Creates a new sync schedule - Requires <code>chart_id</code> in request body - Optional: <code>is_active</code>, <code>sync_frequency</code>, <code>custom_interval_hours</code></p>"},{"location":"features/chart-management/#chart-sync-schedule-detail","title":"Chart Sync Schedule Detail","text":"<p>GET /api/sync/schedules/{schedule_id}/ - Returns detailed schedule information - Includes recent execution history</p> <p>PUT /api/sync/schedules/{schedule_id}/ - Updates schedule configuration - Supports partial updates</p> <p>DELETE /api/sync/schedules/{schedule_id}/ - Removes sync schedule</p>"},{"location":"features/chart-management/#chart-sync-trigger","title":"Chart Sync Trigger","text":"<p>POST /api/sync/trigger/ - Triggers manual sync for a chart - Requires <code>chart_id</code> in request body - Returns execution details</p>"},{"location":"features/chart-management/#chart-sync-status","title":"Chart Sync Status","text":"<p>GET /api/sync/status/{chart_id}/ - Returns sync status for a specific chart - Includes schedule details and latest execution</p>"},{"location":"features/chart-management/#configuration","title":"Configuration","text":""},{"location":"features/chart-management/#sync-frequency-options","title":"Sync Frequency Options","text":"<ol> <li>Daily: Syncs every 24 hours</li> <li>Weekly: Syncs every 7 days</li> <li>Monthly: Syncs every 30 days</li> <li>Custom: Syncs at custom interval (in hours)</li> </ol>"},{"location":"features/chart-management/#automatic-frequency-detection","title":"Automatic Frequency Detection","text":"<p>When creating a sync schedule, the system automatically detects the chart's frequency: - If chart frequency is 'daily', 'weekly', or 'monthly', it uses that - Otherwise, defaults to 'weekly' - Users can override the detected frequency</p>"},{"location":"features/chart-management/#missing-data-detection","title":"Missing Data Detection","text":"<p>The system intelligently detects missing ranking periods: - Analyzes existing chart rankings - Identifies gaps based on chart frequency - Creates specific sync tasks for missing periods - Ensures data consistency</p>"},{"location":"features/chart-management/#error-handling","title":"Error Handling","text":""},{"location":"features/chart-management/#retry-mechanism","title":"Retry Mechanism","text":"<ul> <li>Automatic retries on task failure (max 3 attempts)</li> <li>Exponential backoff between retries</li> <li>Detailed error logging and tracking</li> </ul>"},{"location":"features/chart-management/#error-tracking","title":"Error Tracking","text":"<ul> <li>Failed executions are logged with error messages</li> <li>Error statistics are maintained per schedule</li> <li>Admin interface shows error details for debugging</li> </ul>"},{"location":"features/chart-management/#graceful-degradation","title":"Graceful Degradation","text":"<ul> <li>Individual chart failures don't affect other charts</li> <li>Partial failures are tracked and reported</li> <li>System continues processing other schedules</li> </ul>"},{"location":"features/chart-management/#monitoring-and-reporting","title":"Monitoring and Reporting","text":""},{"location":"features/chart-management/#success-metrics","title":"Success Metrics","text":"<ul> <li>Success rate per schedule</li> <li>Total executions and success counts</li> <li>Average execution duration</li> <li>Data freshness indicators</li> </ul>"},{"location":"features/chart-management/#alert-system","title":"Alert System","text":"<ul> <li>Overdue sync detection</li> <li>Failed execution alerts</li> <li>Performance degradation warnings</li> </ul>"},{"location":"features/chart-management/#admin-notifications","title":"Admin Notifications","text":"<ul> <li>Django admin messages for batch operations</li> <li>Success/failure notifications</li> <li>Progress updates for long-running operations</li> </ul>"},{"location":"features/chart-management/#usage-examples","title":"Usage Examples","text":""},{"location":"features/chart-management/#adding-a-chart-to-sync-schedule","title":"Adding a Chart to Sync Schedule","text":"<pre><code># Via Admin Interface\n1. Go to Charts admin\n2. Select chart(s) to sync\n3. Choose \"Add to Sync Schedule\" action\n4. Configure sync frequency if needed\n\n# Via API\nPOST /api/sync/schedules/\n{\n    \"chart_id\": 123,\n    \"sync_frequency\": \"weekly\",\n    \"is_active\": true\n}\n</code></pre>"},{"location":"features/chart-management/#triggering-manual-sync","title":"Triggering Manual Sync","text":"<pre><code># Via Admin Interface\n1. Go to Charts admin\n2. Select chart(s) to sync\n3. Choose \"Trigger Manual Sync\" action\n\n# Via API\nPOST /api/sync/trigger/\n{\n    \"chart_id\": 123\n}\n</code></pre>"},{"location":"features/chart-management/#monitoring-sync-status","title":"Monitoring Sync Status","text":"<pre><code># Via Admin Interface\n1. Go to Chart Sync Schedules admin\n2. View schedule list with status indicators\n3. Click on individual schedules for details\n\n# Via API\nGET /api/sync/status/123/\n</code></pre>"},{"location":"features/chart-management/#best-practices","title":"Best Practices","text":""},{"location":"features/chart-management/#schedule-management","title":"Schedule Management","text":"<ol> <li>Start with Weekly: Begin with weekly syncs for most charts</li> <li>Monitor Performance: Watch success rates and adjust frequency</li> <li>Handle Failures: Investigate failed syncs promptly</li> <li>Regular Cleanup: Remove inactive schedules periodically</li> </ol>"},{"location":"features/chart-management/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Batch Operations: Use bulk actions when possible</li> <li>Monitor Concurrency: Ensure Celery workers can handle load</li> <li>Database Maintenance: Regular cleanup of old execution records</li> <li>API Rate Limits: Respect Soundcharts API limits</li> </ol>"},{"location":"features/chart-management/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Check Logs: Review Celery and Django logs for errors</li> <li>Verify API Keys: Ensure Soundcharts API credentials are valid</li> <li>Monitor Celery: Check Celery worker status and queue</li> <li>Database Health: Monitor database performance and connections</li> </ol>"},{"location":"features/chart-management/#future-enhancements","title":"Future Enhancements","text":""},{"location":"features/chart-management/#planned-features","title":"Planned Features","text":"<ol> <li>Subscription-based Access: Different sync limits per user subscription</li> <li>Advanced Scheduling: Cron-like scheduling expressions</li> <li>Data Retention: Configurable retention periods for execution history</li> <li>Webhook Integration: Real-time notifications for sync events</li> <li>Analytics Dashboard: Advanced reporting and analytics</li> </ol>"},{"location":"features/chart-management/#scalability-considerations","title":"Scalability Considerations","text":"<ol> <li>Horizontal Scaling: Support for multiple Celery workers</li> <li>Database Optimization: Indexing and query optimization</li> <li>Caching: Redis-based caching for frequently accessed data</li> <li>Load Balancing: Distribution of sync tasks across workers</li> </ol>"},{"location":"features/chart-management/#security-considerations","title":"Security Considerations","text":""},{"location":"features/chart-management/#access-control","title":"Access Control","text":"<ul> <li>Admin-only access to sync management</li> <li>Staff member requirement for API endpoints</li> <li>Future: Subscription-based access control</li> </ul>"},{"location":"features/chart-management/#data-protection","title":"Data Protection","text":"<ul> <li>Secure API key storage</li> <li>Encrypted communication with Soundcharts API</li> <li>Audit logging for all sync operations</li> </ul>"},{"location":"features/chart-management/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Built-in concurrency limits</li> <li>API rate limit respect</li> <li>Graceful handling of quota exceeded errors</li> </ul>"},{"location":"features/chart-management/#implementation-status","title":"Implementation Status","text":""},{"location":"features/chart-management/#completed-features","title":"\u2705 Completed Features","text":"<ul> <li>Core Models: ChartSyncSchedule and ChartSyncExecution</li> <li>Admin Interface: Enhanced chart admin with sync management</li> <li>Celery Integration: Automated task processing and scheduling</li> <li>API Endpoints: RESTful API for sync management</li> <li>Error Handling: Comprehensive retry mechanisms and error tracking</li> <li>Monitoring: Performance metrics and health monitoring</li> <li>Historical Sync: Complete historical data synchronization</li> <li>Track Integration: Automatic track metadata fetching</li> <li>Native Admin Tables: Professional admin interface</li> </ul>"},{"location":"features/chart-management/#production-ready","title":"\ud83c\udfaf Production Ready","text":"<p>The Chart Management system is production-ready with: - Complete feature implementation - Robust error handling and monitoring - Security best practices - Performance optimization - Comprehensive documentation - Testing and debugging tools</p>"},{"location":"features/chart-management/#support-and-documentation","title":"Support and Documentation","text":"<p>For technical support or questions about Chart Management:</p> <ol> <li>Check the troubleshooting section for common issues</li> <li>Review error logs and monitoring data</li> <li>Use debug tools for performance analysis</li> <li>Contact system administrator for assistance</li> <li>Submit issue reports for bug tracking</li> </ol>"},{"location":"features/dynamic-tables-api/","title":"Dynamic Tables &amp; API","text":""},{"location":"features/dynamic-tables-api/#overview","title":"Overview","text":"<p>Dynamic Tables and API provide flexible data management and programmatic access to MusicChartsAI data.</p>"},{"location":"features/dynamic-tables-api/#features","title":"Features","text":"<ul> <li>Configurable Tables: Flexible data presentation</li> <li>RESTful API: Programmatic data access</li> <li>Custom Filtering: Advanced search capabilities</li> <li>Export Functions: Multiple data formats</li> </ul>"},{"location":"features/dynamic-tables-api/#api-endpoints","title":"API Endpoints","text":"<p>API documentation will be added when features are complete.</p>"},{"location":"features/dynamic-tables-api/#usage","title":"Usage","text":"<p>See Quick Start Guide for getting started.</p> <p>This section will be expanded with detailed API documentation.</p>"},{"location":"features/overview/","title":"Features Overview","text":""},{"location":"features/overview/#platform-capabilities","title":"Platform Capabilities","text":"<p>MusicChartsAI provides comprehensive music analytics and chart management capabilities through several integrated systems:</p>"},{"location":"features/overview/#core-features","title":"Core Features","text":""},{"location":"features/overview/#music-chart-management","title":"\ud83c\udfb5 Music Chart Management","text":"<ul> <li>Multi-Platform Support: Spotify, Apple Music, YouTube, and more</li> <li>Automated Synchronization: Scheduled chart data updates</li> <li>Historical Data: Complete chart ranking history</li> <li>Real-time Monitoring: Live sync status and health metrics</li> </ul>"},{"location":"features/overview/#audience-analytics","title":"\ud83d\udcca Audience Analytics","text":"<ul> <li>Time-Series Data: Track audience growth over time</li> <li>Multi-Platform Comparison: Compare performance across platforms</li> <li>Interactive Charts: Dynamic visualizations with Chart.js</li> <li>Data Export: CSV and JSON export capabilities</li> </ul>"},{"location":"features/overview/#audio-analysis","title":"\ud83d\udd0d Audio Analysis","text":"<ul> <li>Fraud Detection: ACRCloud-powered copyright detection</li> <li>Cover Detection: Identify cover versions of existing songs</li> <li>Lyrics Analysis: Content similarity analysis</li> <li>Risk Assessment: Automated risk scoring and classification</li> </ul>"},{"location":"features/overview/#background-processing","title":"\u2699\ufe0f Background Processing","text":"<ul> <li>Celery Integration: Asynchronous task processing</li> <li>Task Monitoring: Real-time task status and progress</li> <li>Error Handling: Comprehensive retry mechanisms</li> <li>Scalable Architecture: Horizontal scaling support</li> </ul>"},{"location":"features/overview/#dynamic-data-management","title":"\ud83c\udf9b\ufe0f Dynamic Data Management","text":"<ul> <li>Flexible Tables: Configurable data visualization</li> <li>RESTful API: Programmatic access to data</li> <li>Custom Filters: Advanced data filtering capabilities</li> <li>Export Functions: Multiple export formats</li> </ul>"},{"location":"features/overview/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    A[Frontend Dashboard] --&gt; B[Django Views]\n    B --&gt; C[Django Models]\n    C --&gt; D[Database]\n\n    E[Celery Workers] --&gt; F[Background Tasks]\n    F --&gt; G[Soundcharts API]\n    F --&gt; H[ACRCloud API]\n\n    I[Admin Interface] --&gt; B\n    J[REST API] --&gt; B\n\n    K[Redis] --&gt; E\n    L[File Storage] --&gt; C</code></pre>"},{"location":"features/overview/#feature-modules","title":"Feature Modules","text":""},{"location":"features/overview/#soundcharts-integration","title":"Soundcharts Integration","text":"<ul> <li>Chart Data Fetching: Automated chart ranking retrieval</li> <li>Track Metadata: Complete track information management</li> <li>Audience Data: Time-series audience analytics</li> <li>Platform Management: Multi-platform chart support</li> </ul>"},{"location":"features/overview/#acrcloud-analysis","title":"ACRCloud Analysis","text":"<ul> <li>Audio Upload: Support for multiple audio formats</li> <li>Fingerprint Analysis: Exact match detection</li> <li>Cover Detection: Cover version identification</li> <li>Fraud Assessment: Risk scoring and classification</li> </ul>"},{"location":"features/overview/#dynamic-tables-api","title":"Dynamic Tables &amp; API","text":"<ul> <li>Configurable Tables: Flexible data presentation</li> <li>RESTful Endpoints: Programmatic data access</li> <li>Custom Filtering: Advanced search capabilities</li> <li>Export Functions: Multiple data formats</li> </ul>"},{"location":"features/overview/#chart-management","title":"Chart Management","text":"<ul> <li>Sync Scheduling: Automated data synchronization</li> <li>Health Monitoring: Chart update status tracking</li> <li>Error Handling: Comprehensive retry mechanisms</li> <li>Performance Metrics: Sync success rates and timing</li> </ul>"},{"location":"features/overview/#user-management","title":"User Management","text":"<ul> <li>Authentication: Secure user sessions</li> <li>Role-based Access: Admin and user permissions</li> <li>Profile Management: User account administration</li> <li>Security Features: CSRF protection and validation</li> </ul>"},{"location":"features/overview/#background-tasks","title":"Background Tasks","text":"<ul> <li>Celery Integration: Asynchronous task processing</li> <li>Task Monitoring: Real-time status tracking</li> <li>Error Recovery: Automatic retry mechanisms</li> <li>Resource Management: Memory and CPU optimization</li> </ul>"},{"location":"features/overview/#integration-points","title":"Integration Points","text":""},{"location":"features/overview/#external-apis","title":"External APIs","text":"<ul> <li>Soundcharts API: Chart data and metadata</li> <li>ACRCloud API: Audio analysis and fraud detection</li> <li>Future Integrations: Additional music services</li> </ul>"},{"location":"features/overview/#internal-systems","title":"Internal Systems","text":"<ul> <li>Django Admin: Administrative interface</li> <li>REST API: Programmatic access</li> <li>Celery Tasks: Background processing</li> <li>File Storage: Media and document management</li> </ul>"},{"location":"features/overview/#performance-features","title":"Performance Features","text":""},{"location":"features/overview/#scalability","title":"Scalability","text":"<ul> <li>Horizontal Scaling: Multiple worker support</li> <li>Database Optimization: Efficient query patterns</li> <li>Caching: Redis-based performance enhancement</li> <li>Load Balancing: Distributed processing</li> </ul>"},{"location":"features/overview/#monitoring","title":"Monitoring","text":"<ul> <li>Health Checks: System status monitoring</li> <li>Performance Metrics: Response time tracking</li> <li>Error Logging: Comprehensive error tracking</li> <li>Resource Usage: CPU and memory monitoring</li> </ul>"},{"location":"features/overview/#security-features","title":"Security Features","text":""},{"location":"features/overview/#data-protection","title":"Data Protection","text":"<ul> <li>API Security: Token-based authentication</li> <li>File Validation: Secure file upload handling</li> <li>CSRF Protection: Cross-site request forgery prevention</li> <li>Input Sanitization: Data validation and cleaning</li> </ul>"},{"location":"features/overview/#access-control","title":"Access Control","text":"<ul> <li>User Authentication: Secure login system</li> <li>Role-based Permissions: Granular access control</li> <li>Session Management: Secure session handling</li> <li>Audit Logging: User action tracking</li> </ul>"},{"location":"features/overview/#future-enhancements","title":"Future Enhancements","text":""},{"location":"features/overview/#planned-features","title":"Planned Features","text":"<ul> <li>Real-time Updates: WebSocket-based live data</li> <li>Advanced Analytics: Machine learning insights</li> <li>Mobile App: Native mobile application</li> <li>API Marketplace: Third-party integrations</li> </ul>"},{"location":"features/overview/#scalability-improvements","title":"Scalability Improvements","text":"<ul> <li>Microservices: Service-oriented architecture</li> <li>Container Orchestration: Kubernetes deployment</li> <li>Advanced Caching: Multi-layer caching strategy</li> <li>Database Sharding: Horizontal database scaling</li> </ul> <p>Ready to explore specific features? Check out our detailed guides: - Soundcharts Integration - ACRCloud Analysis - Background Tasks - Dynamic Tables &amp; API</p>"},{"location":"features/soundcharts-integration/","title":"Soundcharts Integration","text":""},{"location":"features/soundcharts-integration/#overview","title":"Overview","text":"<p>The Soundcharts integration provides comprehensive music chart data management, including automated synchronization, track metadata management, audience analytics, and a powerful dashboard interface. The system transforms raw chart data into actionable insights through real-time analytics and interactive visualizations.</p>"},{"location":"features/soundcharts-integration/#features","title":"Features","text":""},{"location":"features/soundcharts-integration/#core-functionality","title":"Core Functionality","text":"<ul> <li>Chart Data Synchronization: Automated fetching of chart rankings from multiple platforms</li> <li>Track Metadata Management: Complete track information with artist relationships</li> <li>Audience Analytics: Time-series audience data across platforms</li> <li>Multi-Platform Support: Spotify, Apple Music, YouTube, and other streaming platforms</li> <li>Real-time Dashboard: Comprehensive analytics interface with interactive charts</li> <li>Admin Interface: Enhanced navigation and management tools</li> </ul>"},{"location":"features/soundcharts-integration/#data-management","title":"Data Management","text":"<ul> <li>Automated Sync: Background task processing for chart data updates</li> <li>Data Validation: Comprehensive validation and error handling</li> <li>Historical Tracking: Complete chart ranking history and trends</li> <li>Platform Health: Monitoring of data source reliability and performance</li> </ul>"},{"location":"features/soundcharts-integration/#architecture","title":"Architecture","text":""},{"location":"features/soundcharts-integration/#core-models","title":"Core Models","text":""},{"location":"features/soundcharts-integration/#chart","title":"Chart","text":"<ul> <li>Platform-specific chart definitions</li> <li>Chart metadata and configuration</li> <li>Health monitoring and status tracking</li> </ul>"},{"location":"features/soundcharts-integration/#chartranking","title":"ChartRanking","text":"<ul> <li>Individual chart snapshots with timestamps</li> <li>Platform and chart associations</li> <li>Fetch status and error tracking</li> </ul>"},{"location":"features/soundcharts-integration/#chartrankingentry","title":"ChartRankingEntry","text":"<ul> <li>Individual song positions within rankings</li> <li>Track references and position data</li> <li>Trend calculations and comparisons</li> </ul>"},{"location":"features/soundcharts-integration/#track","title":"Track","text":"<ul> <li>Complete track metadata and information</li> <li>Artist relationships and associations</li> <li>Audience data and analytics</li> </ul>"},{"location":"features/soundcharts-integration/#platform","title":"Platform","text":"<ul> <li>Platform definitions and metadata</li> <li>API configuration and endpoints</li> <li>Audience metric specifications</li> </ul>"},{"location":"features/soundcharts-integration/#data-flow","title":"Data Flow","text":"<pre><code>SoundCharts API \u2192 Chart Sync System \u2192 Database Models \u2192 Dashboard Analytics\n</code></pre>"},{"location":"features/soundcharts-integration/#dashboard-implementation","title":"Dashboard Implementation","text":""},{"location":"features/soundcharts-integration/#real-time-analytics","title":"Real-time Analytics","text":"<p>The Soundcharts Dashboard provides comprehensive analytics through a modern interface:</p>"},{"location":"features/soundcharts-integration/#weekly-rankings-fetched","title":"Weekly Rankings Fetched","text":"<ul> <li>Purpose: Shows total chart rankings fetched over the last 7 days</li> <li>Calculation: Daily counts of <code>ChartRanking.objects.filter(fetched_at__date=day.date())</code></li> <li>Visualization: Interactive area chart with trend indicators</li> <li>Comparison: Current week vs previous week with percentage change</li> </ul>"},{"location":"features/soundcharts-integration/#top-platforms-statistics","title":"Top Platforms Statistics","text":"<ul> <li>Purpose: Identifies most active music platforms by ranking volume</li> <li>Calculation: Groups charts by platform, counts rankings in the last month</li> <li>Display: Tabbed interface with direct admin navigation links</li> <li>Performance: Platform-specific analytics and health metrics</li> </ul>"},{"location":"features/soundcharts-integration/#top-performing-tracks","title":"Top Performing Tracks","text":"<ul> <li>Purpose: Shows tracks appearing in the most chart rankings</li> <li>Calculation: Counts chart appearances per track via relationships</li> <li>Display: Track name, artist, and total chart appearances</li> <li>Trending: Real-time identification of popular tracks</li> </ul>"},{"location":"features/soundcharts-integration/#chart-health-metrics","title":"Chart Health Metrics","text":"<ul> <li>Active Charts: Number of charts receiving new rankings</li> <li>Health Percentage: Percentage of total charts actively updated</li> <li>System Status: Overall data collection health monitoring</li> </ul>"},{"location":"features/soundcharts-integration/#interactive-features","title":"Interactive Features","text":""},{"location":"features/soundcharts-integration/#apexcharts-integration","title":"ApexCharts Integration","text":"<ul> <li>Chart Type: Area charts with gradient fills</li> <li>Data Points: 7 days of daily ranking counts</li> <li>Styling: Blue gradient matching Flowbite theme</li> <li>Responsive: Auto-adjusts to container size</li> <li>Interactive: Hover effects and data point details</li> </ul>"},{"location":"features/soundcharts-integration/#navigation-flow","title":"Navigation Flow","text":"<ol> <li>Dashboard Overview \u2192 Chart Analytics</li> <li>Platform Performance \u2192 Detailed Platform Views</li> <li>Track Analysis \u2192 Individual Track Details</li> <li>Admin Integration \u2192 Direct Management Access</li> </ol>"},{"location":"features/soundcharts-integration/#audience-data-system","title":"Audience Data System","text":""},{"location":"features/soundcharts-integration/#time-series-analytics","title":"Time-Series Analytics","text":"<p>The system provides comprehensive audience analytics with time-series data:</p>"},{"location":"features/soundcharts-integration/#trackaudiencetimeseries-model","title":"TrackAudienceTimeSeries Model","text":"<pre><code>class TrackAudienceTimeSeries(models.Model):\n    track = models.ForeignKey(Track, on_delete=models.CASCADE)\n    platform = models.ForeignKey(Platform, on_delete=models.CASCADE)\n    date = models.DateField()\n    audience_value = models.BigIntegerField()\n    platform_identifier = models.CharField(max_length=255)\n    fetched_at = models.DateTimeField(auto_now_add=True)\n    api_data = models.JSONField(default=dict)\n</code></pre>"},{"location":"features/soundcharts-integration/#chart-data-api-endpoints","title":"Chart Data API Endpoints","text":"<p>Single Platform: <pre><code>GET /soundcharts/audience/chart/{track_uuid}/{platform_slug}/\n</code></pre></p> <p>Multi-Platform Comparison: <pre><code>GET /soundcharts/audience/chart/{track_uuid}/\n</code></pre></p> <p>Query Parameters: - <code>start_date</code>: Filter data from this date (YYYY-MM-DD) - <code>end_date</code>: Filter data until this date (YYYY-MM-DD) - <code>limit</code>: Maximum number of data points to return</p>"},{"location":"features/soundcharts-integration/#data-processing","title":"Data Processing","text":""},{"location":"features/soundcharts-integration/#audiencedataprocessor","title":"AudienceDataProcessor","text":"<ul> <li>Processes API responses and stores time-series data</li> <li>Handles bulk operations and data validation</li> <li>Provides error handling and retry mechanisms</li> <li>Supports force refresh and incremental updates</li> </ul>"},{"location":"features/soundcharts-integration/#management-commands","title":"Management Commands","text":"<pre><code># Process specific track\npython manage.py fetch_audience_data --track-uuid &lt;uuid&gt; --platform spotify\n\n# Process all tracks\npython manage.py fetch_audience_data --all-tracks --platform spotify --limit 50\n\n# Process stale tracks\npython manage.py fetch_audience_data --limit 100\n</code></pre>"},{"location":"features/soundcharts-integration/#admin-interface-enhancements","title":"Admin Interface Enhancements","text":""},{"location":"features/soundcharts-integration/#navigation-improvements","title":"Navigation Improvements","text":""},{"location":"features/soundcharts-integration/#chart-rankings-tab-navigation","title":"Chart Rankings Tab Navigation","text":"<ul> <li>Enhanced Links: Clickable \"View Details\" buttons for each ranking</li> <li>Direct Navigation: Links to specific <code>ChartRanking</code> change views</li> <li>Improved UX: Seamless navigation between related data</li> </ul>"},{"location":"features/soundcharts-integration/#track-links-in-chart-ranking-entries","title":"Track Links in Chart Ranking Entries","text":"<ul> <li>Track Navigation: Clickable track names in ranking entries</li> <li>Direct Access: Navigation to individual track details</li> <li>Context Preservation: Maintains navigation context</li> </ul>"},{"location":"features/soundcharts-integration/#audience-data-fetch-integration","title":"Audience Data Fetch Integration","text":"<ul> <li>Admin Actions: Fetch audience data directly from track admin</li> <li>Platform Selection: Choose specific platforms for data fetching</li> <li>Force Refresh: Option to update existing data</li> <li>Real-time Feedback: Success/error messages and status updates</li> </ul>"},{"location":"features/soundcharts-integration/#enhanced-features","title":"Enhanced Features","text":""},{"location":"features/soundcharts-integration/#track-management","title":"Track Management","text":"<ul> <li>Metadata Fetching: Update track information from APIs</li> <li>Audience Analytics: Fetch and display audience data</li> <li>Platform Integration: Multi-platform data management</li> <li>Bulk Operations: Process multiple tracks simultaneously</li> </ul>"},{"location":"features/soundcharts-integration/#chart-management","title":"Chart Management","text":"<ul> <li>Health Monitoring: Track chart sync status and health</li> <li>Platform Analytics: Platform-specific performance metrics</li> <li>Error Tracking: Monitor and resolve sync issues</li> <li>Historical Data: Access to complete ranking history</li> </ul>"},{"location":"features/soundcharts-integration/#api-integration","title":"API Integration","text":""},{"location":"features/soundcharts-integration/#soundcharts-api","title":"SoundCharts API","text":"<ul> <li>Authentication: Secure API key management</li> <li>Rate Limiting: Respectful API usage and quota management</li> <li>Error Handling: Comprehensive error handling and retry logic</li> <li>Data Validation: Input validation and data integrity checks</li> </ul>"},{"location":"features/soundcharts-integration/#external-platform-apis","title":"External Platform APIs","text":"<ul> <li>Spotify: Track metadata and audience data</li> <li>Apple Music: Chart rankings and analytics</li> <li>YouTube: Video performance metrics</li> <li>Other Platforms: Extensible architecture for new platforms</li> </ul>"},{"location":"features/soundcharts-integration/#data-synchronization","title":"Data Synchronization","text":""},{"location":"features/soundcharts-integration/#automated-sync-system","title":"Automated Sync System","text":"<ul> <li>Background Processing: Celery-based task processing</li> <li>Scheduled Updates: Regular chart data synchronization</li> <li>Error Recovery: Automatic retry mechanisms for failed syncs</li> <li>Health Monitoring: Real-time sync status and performance tracking</li> </ul>"},{"location":"features/soundcharts-integration/#chart-sync-process","title":"Chart Sync Process","text":"<ol> <li>API Request: Fetch latest chart data from SoundCharts API</li> <li>Data Validation: Validate and clean incoming data</li> <li>Database Update: Store new rankings and update existing records</li> <li>Relationship Management: Maintain track and platform relationships</li> <li>Status Updates: Update sync status and health metrics</li> </ol>"},{"location":"features/soundcharts-integration/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/soundcharts-integration/#database-optimization","title":"Database Optimization","text":"<ul> <li>Indexing: Optimized indexes for common query patterns</li> <li>Query Optimization: Efficient queries with <code>select_related()</code> and <code>prefetch_related()</code></li> <li>Data Partitioning: Consider date-based partitioning for large datasets</li> </ul>"},{"location":"features/soundcharts-integration/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Redis Integration: Cache frequently accessed chart data</li> <li>API Response Caching: Cache external API responses</li> <li>Dashboard Data: Cache dashboard analytics for improved performance</li> </ul>"},{"location":"features/soundcharts-integration/#background-processing","title":"Background Processing","text":"<ul> <li>Celery Workers: Distributed task processing</li> <li>Task Queuing: Priority-based task queuing</li> <li>Resource Management: Efficient resource utilization</li> </ul>"},{"location":"features/soundcharts-integration/#security-considerations","title":"Security Considerations","text":""},{"location":"features/soundcharts-integration/#api-security","title":"API Security","text":"<ul> <li>Authentication: Secure API key storage and management</li> <li>Rate Limiting: Prevent API abuse and quota exhaustion</li> <li>Input Validation: Comprehensive input validation and sanitization</li> <li>Error Handling: Secure error messages without sensitive information</li> </ul>"},{"location":"features/soundcharts-integration/#data-privacy","title":"Data Privacy","text":"<ul> <li>User Isolation: Proper data isolation between users</li> <li>Audit Logging: Comprehensive audit trails for all operations</li> <li>Data Retention: Configurable data retention policies</li> <li>Access Control: Role-based access control for admin functions</li> </ul>"},{"location":"features/soundcharts-integration/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"features/soundcharts-integration/#health-checks","title":"Health Checks","text":"<ul> <li>API Connectivity: Monitor external API availability</li> <li>Database Performance: Track database query performance</li> <li>Sync Status: Monitor chart synchronization health</li> <li>System Resources: Monitor system resource utilization</li> </ul>"},{"location":"features/soundcharts-integration/#logging-and-debugging","title":"Logging and Debugging","text":"<ul> <li>Comprehensive Logging: Detailed logs for all operations</li> <li>Error Tracking: Track and analyze error patterns</li> <li>Performance Monitoring: Monitor system performance metrics</li> <li>Debug Tools: Django Debug Toolbar and custom debugging tools</li> </ul>"},{"location":"features/soundcharts-integration/#maintenance-tasks","title":"Maintenance Tasks","text":"<ul> <li>Data Cleanup: Regular cleanup of old or invalid data</li> <li>Index Maintenance: Regular database index optimization</li> <li>API Quota Management: Monitor and manage API usage</li> <li>Backup Procedures: Regular data backup and recovery procedures</li> </ul>"},{"location":"features/soundcharts-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/soundcharts-integration/#common-issues","title":"Common Issues","text":""},{"location":"features/soundcharts-integration/#sync-failures","title":"Sync Failures","text":"<ul> <li>API Errors: Check API credentials and connectivity</li> <li>Rate Limits: Monitor API usage and implement proper rate limiting</li> <li>Data Validation: Review data validation and error logs</li> <li>Network Issues: Check network connectivity and timeout settings</li> </ul>"},{"location":"features/soundcharts-integration/#performance-issues","title":"Performance Issues","text":"<ul> <li>Database Queries: Optimize slow queries and add missing indexes</li> <li>Memory Usage: Monitor memory usage and optimize data processing</li> <li>API Response Times: Monitor external API performance</li> <li>Background Tasks: Check Celery worker status and performance</li> </ul>"},{"location":"features/soundcharts-integration/#data-inconsistencies","title":"Data Inconsistencies","text":"<ul> <li>Validation Errors: Review data validation rules and error logs</li> <li>Relationship Issues: Check foreign key relationships and constraints</li> <li>Duplicate Data: Implement proper duplicate detection and handling</li> <li>Data Integrity: Regular data integrity checks and repairs</li> </ul>"},{"location":"features/soundcharts-integration/#debug-tools","title":"Debug Tools","text":"<ul> <li>Django Debug Toolbar: Query analysis and performance monitoring</li> <li>Management Commands: Custom commands for data validation and repair</li> <li>Logging Configuration: Comprehensive logging for troubleshooting</li> <li>Test Suite: Automated tests for functionality verification</li> </ul>"},{"location":"features/soundcharts-integration/#future-enhancements","title":"Future Enhancements","text":""},{"location":"features/soundcharts-integration/#planned-features","title":"Planned Features","text":"<ul> <li>Real-time Updates: WebSocket integration for live data updates</li> <li>Advanced Analytics: Machine learning-powered insights and predictions</li> <li>Data Export: CSV/Excel export functionality for analytics</li> <li>Custom Dashboards: User-configurable dashboard layouts</li> <li>Mobile Support: Mobile-optimized interfaces and APIs</li> </ul>"},{"location":"features/soundcharts-integration/#integration-opportunities","title":"Integration Opportunities","text":"<ul> <li>Third-party APIs: Integration with additional music platforms</li> <li>Analytics Platforms: Integration with business intelligence tools</li> <li>Notification Systems: Real-time alerts for important events</li> <li>Data Warehousing: Long-term data storage and analysis capabilities</li> </ul>"},{"location":"features/soundcharts-integration/#implementation-status","title":"Implementation Status","text":""},{"location":"features/soundcharts-integration/#completed-features","title":"\u2705 Completed Features","text":"<ul> <li>Core Models: Complete data model implementation</li> <li>Dashboard Interface: Real-time analytics dashboard</li> <li>Admin Enhancements: Improved navigation and management tools</li> <li>Audience Analytics: Time-series audience data system</li> <li>API Integration: Full SoundCharts API integration</li> <li>Background Processing: Celery-based task processing</li> <li>Data Validation: Comprehensive data validation and error handling</li> </ul>"},{"location":"features/soundcharts-integration/#production-ready","title":"\ud83c\udfaf Production Ready","text":"<p>The Soundcharts integration is production-ready with: - Complete feature implementation - Robust error handling and monitoring - Security best practices - Performance optimization - Comprehensive documentation - Testing and debugging tools</p>"},{"location":"features/soundcharts-integration/#support-and-documentation","title":"Support and Documentation","text":"<p>For technical support or questions about the Soundcharts integration:</p> <ol> <li>Check the troubleshooting section for common issues</li> <li>Review error logs and monitoring data</li> <li>Use debug tools for performance analysis</li> <li>Contact system administrator for assistance</li> <li>Submit issue reports for bug tracking</li> </ol>"},{"location":"features/user-management/","title":"User Management","text":""},{"location":"features/user-management/#overview","title":"Overview","text":"<p>User management provides authentication, authorization, and user administration capabilities.</p>"},{"location":"features/user-management/#features","title":"Features","text":"<ul> <li>Authentication: Secure user sessions</li> <li>Role-based Access: Admin and user permissions</li> <li>Profile Management: User account administration</li> <li>Security Features: CSRF protection and validation</li> </ul>"},{"location":"features/user-management/#usage","title":"Usage","text":"<p>See Quick Start Guide for getting started.</p> <p>This section will be expanded with detailed user management information.</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":""},{"location":"getting-started/configuration/#overview","title":"Overview","text":"<p>This guide covers the configuration of MusicChartsAI, including API keys, environment variables, and system settings.</p>"},{"location":"getting-started/configuration/#environment-configuration","title":"Environment Configuration","text":""},{"location":"getting-started/configuration/#required-environment-variables","title":"Required Environment Variables","text":"<p>Create a <code>.env</code> file in your project root with these variables:</p> <pre><code># Django Settings\nSECRET_KEY=your-secret-key-here\nDEBUG=False\nALLOWED_HOSTS=your-domain.com,localhost\n\n# Database Configuration\nDATABASE_URL=postgresql://user:password@localhost:5432/musicchartsai\n\n# Celery Configuration\nCELERY_BROKER=redis://localhost:6379\nREDIS_URL=redis://localhost:6379\n\n# API Keys\nSOUNDCHARTS_APP_ID=your-soundcharts-app-id\nSOUNDCHARTS_API_KEY=your-soundcharts-api-key\nSOUNDCHARTS_API_URL=https://customer.api.soundcharts.com\n\nACR_CLOUD_API_KEY=your-acrcloud-api-key\nACR_CLOUD_API_SECRET=your-acrcloud-api-secret\nACR_CLOUD_API_URL=your-acrcloud-api-url\n</code></pre>"},{"location":"getting-started/configuration/#api-configuration","title":"API Configuration","text":""},{"location":"getting-started/configuration/#soundcharts-api-setup","title":"Soundcharts API Setup","text":"<ol> <li>Get API Credentials:</li> <li>Visit Soundcharts Developer Portal</li> <li>Create an account and request API access</li> <li> <p>Obtain your <code>APP_ID</code> and <code>API_KEY</code></p> </li> <li> <p>Configure in Django:    <pre><code># config/settings.py\nSOUNDCHARTS_APP_ID = os.getenv(\"SOUNDCHARTS_APP_ID\")\nSOUNDCHARTS_API_KEY = os.getenv(\"SOUNDCHARTS_API_KEY\")\nSOUNDCHARTS_API_URL = os.getenv(\"SOUNDCHARTS_API_URL\", \"https://customer.api.soundcharts.com\")\n</code></pre></p> </li> </ol>"},{"location":"getting-started/configuration/#acrcloud-api-setup","title":"ACRCloud API Setup","text":"<ol> <li>Get API Credentials:</li> <li>Visit ACRCloud Console</li> <li>Create a project and get API credentials</li> <li> <p>Obtain <code>API_KEY</code>, <code>API_SECRET</code>, and <code>API_URL</code></p> </li> <li> <p>Configure in Django:    <pre><code># config/settings.py\nACR_CLOUD_API_KEY = os.getenv(\"ACR_CLOUD_API_KEY\")\nACR_CLOUD_API_SECRET = os.getenv(\"ACR_CLOUD_API_SECRET\")\nACR_CLOUD_API_URL = os.getenv(\"ACR_CLOUD_API_URL\")\n</code></pre></p> </li> </ol>"},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":""},{"location":"getting-started/configuration/#sqlite-default","title":"SQLite (Default)","text":"<p>No additional configuration needed for development.</p>"},{"location":"getting-started/configuration/#postgresql-production","title":"PostgreSQL (Production)","text":"<pre><code># Install PostgreSQL\nsudo apt install postgresql postgresql-contrib\n\n# Create database\nsudo -u postgres createdb musicchartsai\nsudo -u postgres createuser --interactive\n\n# Update settings\nDATABASE_URL=postgresql://username:password@localhost:5432/musicchartsai\n</code></pre>"},{"location":"getting-started/configuration/#celery-configuration","title":"Celery Configuration","text":""},{"location":"getting-started/configuration/#redis-setup","title":"Redis Setup","text":"<pre><code># Install Redis\nsudo apt install redis-server\n\n# Start Redis\nsudo systemctl start redis\nsudo systemctl enable redis\n\n# Test connection\nredis-cli ping\n</code></pre>"},{"location":"getting-started/configuration/#celery-worker-configuration","title":"Celery Worker Configuration","text":"<pre><code># config/settings.py\nCELERY_BROKER_URL = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\nCELERY_RESULT_BACKEND = os.environ.get(\"CELERY_BROKER\", \"redis://localhost:6379\")\nCELERY_TASK_TRACK_STARTED = True\nCELERY_TASK_TIME_LIMIT = 30 * 60\n</code></pre>"},{"location":"getting-started/configuration/#email-configuration","title":"Email Configuration","text":""},{"location":"getting-started/configuration/#smtp-setup","title":"SMTP Setup","text":"<pre><code># Add to .env\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n</code></pre>"},{"location":"getting-started/configuration/#file-storage-configuration","title":"File Storage Configuration","text":""},{"location":"getting-started/configuration/#local-storage-default","title":"Local Storage (Default)","text":"<p>Files stored in <code>media/</code> directory.</p>"},{"location":"getting-started/configuration/#aws-s3-production","title":"AWS S3 (Production)","text":"<pre><code># Add to .env\nAWS_ACCESS_KEY_ID=your-access-key\nAWS_SECRET_ACCESS_KEY=your-secret-key\nAWS_STORAGE_BUCKET_NAME=your-bucket-name\nAWS_S3_REGION_NAME=us-east-1\n</code></pre>"},{"location":"getting-started/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"getting-started/configuration/#production-settings","title":"Production Settings","text":"<pre><code># config/settings.py\nSECURE_SSL_REDIRECT = True\nSECURE_HSTS_SECONDS = 31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nSECURE_BROWSER_XSS_FILTER = True\nX_FRAME_OPTIONS = 'DENY'\n</code></pre>"},{"location":"getting-started/configuration/#logging-configuration","title":"Logging Configuration","text":""},{"location":"getting-started/configuration/#development-logging","title":"Development Logging","text":"<pre><code># config/settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': 'INFO',\n    },\n}\n</code></pre>"},{"location":"getting-started/configuration/#production-logging","title":"Production Logging","text":"<pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': '/var/log/musicchartsai.log',\n        },\n    },\n    'root': {\n        'handlers': ['file'],\n        'level': 'INFO',\n    },\n}\n</code></pre>"},{"location":"getting-started/configuration/#verification","title":"Verification","text":""},{"location":"getting-started/configuration/#test-configuration","title":"Test Configuration","text":"<pre><code># Test database connection\npython manage.py dbshell\n\n# Test Celery connection\ncelery -A config inspect active\n\n# Test API connections\npython manage.py shell\n&gt;&gt;&gt; from apps.soundcharts.services import SoundchartsService\n&gt;&gt;&gt; service = SoundchartsService()\n&gt;&gt;&gt; service.test_connection()\n</code></pre>"},{"location":"getting-started/configuration/#configuration-checklist","title":"Configuration Checklist","text":"<ul> <li> Environment variables set</li> <li> Database connection working</li> <li> Redis/Celery running</li> <li> API keys configured</li> <li> Email settings tested</li> <li> File storage configured</li> <li> Security settings applied</li> <li> Logging configured</li> </ul>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<ol> <li>Database Connection Failed</li> <li>Check database credentials</li> <li>Ensure database server is running</li> <li> <p>Verify network connectivity</p> </li> <li> <p>Celery Worker Not Starting</p> </li> <li>Check Redis connection</li> <li>Verify Celery configuration</li> <li> <p>Check worker logs</p> </li> <li> <p>API Calls Failing</p> </li> <li>Verify API keys are correct</li> <li>Check API endpoint URLs</li> <li> <p>Test network connectivity</p> </li> <li> <p>File Upload Issues</p> </li> <li>Check file permissions</li> <li>Verify storage configuration</li> <li>Check disk space</li> </ol> <p>Next Steps: Quick Start Guide or Feature Overview</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing MusicChartsAI, ensure you have the following prerequisites:</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.13 or higher</li> <li>Node.js: 22.0.0 or higher</li> <li>Redis: 7.0 or higher (for Celery message broker)</li> <li>Database: SQLite (default), PostgreSQL, or MySQL</li> <li>Operating System: Linux, macOS, or Windows</li> </ul>"},{"location":"getting-started/installation/#required-tools","title":"Required Tools","text":"<ul> <li>Git: For cloning the repository</li> <li>pip: Python package manager</li> <li>npm: Node.js package manager</li> <li>Virtual Environment: Python virtual environment (recommended)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-local-development-setup","title":"Method 1: Local Development Setup","text":""},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/your-repo/musicchartsai.git\ncd musicchartsai\n</code></pre>"},{"location":"getting-started/installation/#step-2-create-virtual-environment","title":"Step 2: Create Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On Linux/macOS:\nsource venv/bin/activate\n# On Windows:\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"getting-started/installation/#step-3-install-python-dependencies","title":"Step 3: Install Python Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#step-4-install-nodejs-dependencies","title":"Step 4: Install Node.js Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"getting-started/installation/#step-5-environment-configuration","title":"Step 5: Environment Configuration","text":"<pre><code># Copy environment template\ncp env.sample .env\n\n# Edit environment variables\nnano .env  # or use your preferred editor\n</code></pre>"},{"location":"getting-started/installation/#step-6-database-setup","title":"Step 6: Database Setup","text":"<pre><code># Create and apply migrations\npython manage.py makemigrations\npython manage.py migrate\n\n# Create superuser\npython manage.py createsuperuser\n\n# Collect static files\npython manage.py collectstatic --no-input\n</code></pre>"},{"location":"getting-started/installation/#step-7-start-services","title":"Step 7: Start Services","text":"<pre><code># Terminal 1: Start Redis\nredis-server\n\n# Terminal 2: Start Celery worker\ncelery -A config worker -l info -B\n\n# Terminal 3: Start Django development server\npython manage.py runserver\n\n# Terminal 4: Start frontend build (development)\nnpm run dev\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-setup","title":"Method 2: Docker Setup","text":""},{"location":"getting-started/installation/#step-1-clone-repository","title":"Step 1: Clone Repository","text":"<pre><code>git clone https://github.com/your-repo/musicchartsai.git\ncd musicchartsai\n</code></pre>"},{"location":"getting-started/installation/#step-2-environment-configuration","title":"Step 2: Environment Configuration","text":"<pre><code>cp env.sample .env\n# Edit .env file with your configuration\n</code></pre>"},{"location":"getting-started/installation/#step-3-build-and-start-services","title":"Step 3: Build and Start Services","text":"<pre><code># Build and start all services\ndocker-compose up --build\n\n# Or start specific services\ndocker-compose up appseed-app\ndocker-compose up celery\ndocker-compose up redis\n</code></pre>"},{"location":"getting-started/installation/#step-4-database-setup","title":"Step 4: Database Setup","text":"<pre><code># Run migrations\ndocker-compose exec appseed-app python manage.py migrate\n\n# Create superuser\ndocker-compose exec appseed-app python manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/installation/#method-3-production-deployment","title":"Method 3: Production Deployment","text":""},{"location":"getting-started/installation/#using-render-one-click-deploy","title":"Using Render (One-Click Deploy)","text":""},{"location":"getting-started/installation/#manual-production-setup","title":"Manual Production Setup","text":""},{"location":"getting-started/installation/#prerequisites-for-production","title":"Prerequisites for Production","text":"<ul> <li>Linux Server: Ubuntu 20.04+ or CentOS 8+</li> <li>Domain Name: Configured DNS pointing to your server</li> <li>SSL Certificate: For HTTPS (Let's Encrypt recommended)</li> <li>Process Manager: PM2 or Supervisor for process management</li> </ul>"},{"location":"getting-started/installation/#step-1-server-setup","title":"Step 1: Server Setup","text":"<pre><code># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install required packages\nsudo apt install -y python3.13 python3.13-venv python3.13-dev \\\n    nodejs npm redis-server postgresql postgresql-contrib \\\n    nginx git build-essential\n\n# Install pyenv (optional, for Python version management)\ncurl https://pyenv.run | bash\n</code></pre>"},{"location":"getting-started/installation/#step-2-application-setup","title":"Step 2: Application Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/your-repo/musicchartsai.git\ncd musicchartsai\n\n# Create virtual environment\npython3.13 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\nnpm install\n</code></pre>"},{"location":"getting-started/installation/#step-3-database-configuration","title":"Step 3: Database Configuration","text":"<pre><code># Configure PostgreSQL\nsudo -u postgres createuser --interactive\nsudo -u postgres createdb musicchartsai\n\n# Update settings for production\n# Edit config/settings.py to use PostgreSQL\n</code></pre>"},{"location":"getting-started/installation/#step-4-production-build","title":"Step 4: Production Build","text":"<pre><code># Build frontend assets\nnpm run build\n\n# Collect static files\npython manage.py collectstatic --no-input\n\n# Run migrations\npython manage.py migrate\n</code></pre>"},{"location":"getting-started/installation/#step-5-process-management","title":"Step 5: Process Management","text":"<pre><code># Install Supervisor\nsudo apt install supervisor\n\n# Create supervisor configuration\nsudo nano /etc/supervisor/conf.d/musicchartsai.conf\n</code></pre> <p>Supervisor configuration:</p> <pre><code>[program:musicchartsai]\ncommand=/path/to/musicchartsai/venv/bin/gunicorn config.wsgi:application\ndirectory=/path/to/musicchartsai\nuser=www-data\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/musicchartsai.log\n\n[program:celery-worker]\ncommand=/path/to/musicchartsai/venv/bin/celery -A config worker -l info\ndirectory=/path/to/musicchartsai\nuser=www-data\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/celery-worker.log\n\n[program:celery-beat]\ncommand=/path/to/musicchartsai/venv/bin/celery -A config beat -l info\ndirectory=/path/to/musicchartsai\nuser=www-data\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/celery-beat.log\n</code></pre>"},{"location":"getting-started/installation/#step-6-nginx-configuration","title":"Step 6: Nginx Configuration","text":"<pre><code># Create Nginx configuration\nsudo nano /etc/nginx/sites-available/musicchartsai\n</code></pre> <p>Nginx configuration:</p> <pre><code>server {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static/ {\n        alias /path/to/musicchartsai/staticfiles/;\n    }\n\n    location /media/ {\n        alias /path/to/musicchartsai/media/;\n    }\n}\n</code></pre> <pre><code># Enable site\nsudo ln -s /etc/nginx/sites-available/musicchartsai /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"getting-started/installation/#environment-configuration","title":"Environment Configuration","text":""},{"location":"getting-started/installation/#required-environment-variables","title":"Required Environment Variables","text":"<p>Create a <code>.env</code> file in the project root with the following variables:</p> <pre><code># Django Settings\nSECRET_KEY=your-secret-key-here\nDEBUG=False\nALLOWED_HOSTS=your-domain.com,localhost\n\n# Database Configuration\nDATABASE_URL=postgresql://user:password@localhost:5432/musicchartsai\n\n# Celery Configuration\nCELERY_BROKER=redis://localhost:6379\nREDIS_URL=redis://localhost:6379\n\n# API Keys\nSOUNDCHARTS_APP_ID=your-soundcharts-app-id\nSOUNDCHARTS_API_KEY=your-soundcharts-api-key\nSOUNDCHARTS_API_URL=https://customer.api.soundcharts.com\n\nACR_CLOUD_API_KEY=your-acrcloud-api-key\nACR_CLOUD_API_SECRET=your-acrcloud-api-secret\nACR_CLOUD_API_URL=your-acrcloud-api-url\n\n# Email Configuration (Optional)\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n\n# File Storage (Optional)\nAWS_ACCESS_KEY_ID=your-aws-access-key\nAWS_SECRET_ACCESS_KEY=your-aws-secret-key\nAWS_STORAGE_BUCKET_NAME=your-s3-bucket\nAWS_S3_REGION_NAME=us-east-1\n</code></pre>"},{"location":"getting-started/installation/#optional-environment-variables","title":"Optional Environment Variables","text":"<pre><code># Logging\nLOG_LEVEL=INFO\nLOG_FILE=/var/log/musicchartsai.log\n\n# Security\nSECURE_SSL_REDIRECT=True\nSECURE_HSTS_SECONDS=31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS=True\nSECURE_HSTS_PRELOAD=True\n\n# Performance\nCACHE_URL=redis://localhost:6379/1\nSESSION_ENGINE=django.contrib.sessions.backends.cache\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#check-installation","title":"Check Installation","text":"<p>After installation, verify everything is working:</p>"},{"location":"getting-started/installation/#1-django-server","title":"1. Django Server","text":"<pre><code>python manage.py runserver\n# Visit http://localhost:8000\n</code></pre>"},{"location":"getting-started/installation/#2-celery-worker","title":"2. Celery Worker","text":"<pre><code>celery -A config worker -l info\n# Should show worker started successfully\n</code></pre>"},{"location":"getting-started/installation/#3-redis-connection","title":"3. Redis Connection","text":"<pre><code>redis-cli ping\n# Should return PONG\n</code></pre>"},{"location":"getting-started/installation/#4-database-connection","title":"4. Database Connection","text":"<pre><code>python manage.py dbshell\n# Should connect to database successfully\n</code></pre>"},{"location":"getting-started/installation/#5-static-files","title":"5. Static Files","text":"<pre><code>python manage.py collectstatic --no-input\n# Should collect all static files without errors\n</code></pre>"},{"location":"getting-started/installation/#test-api-endpoints","title":"Test API Endpoints","text":"<pre><code># Test Soundcharts API\ncurl -H \"Authorization: Bearer your-api-key\" \\\n     https://customer.api.soundcharts.com/api/v2/track/7d534228-5165-11e9-9375-549f35161576\n\n# Test ACRCloud API\ncurl -X POST \"your-acrcloud-api-url\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"api_key\": \"your-api-key\"}'\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#1-python-version-issues","title":"1. Python Version Issues","text":"<pre><code># Check Python version\npython --version\n\n# If wrong version, use pyenv\npyenv install 3.13.0\npyenv local 3.13.0\n</code></pre>"},{"location":"getting-started/installation/#2-nodejs-version-issues","title":"2. Node.js Version Issues","text":"<pre><code># Check Node.js version\nnode --version\n\n# If wrong version, use nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nnvm install 22.0.0\nnvm use 22.0.0\n</code></pre>"},{"location":"getting-started/installation/#3-redis-connection-issues","title":"3. Redis Connection Issues","text":"<pre><code># Check Redis status\nsudo systemctl status redis\n\n# Start Redis if not running\nsudo systemctl start redis\nsudo systemctl enable redis\n</code></pre>"},{"location":"getting-started/installation/#4-database-migration-issues","title":"4. Database Migration Issues","text":"<pre><code># Reset migrations (development only)\nrm apps/*/migrations/0*.py\npython manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"getting-started/installation/#5-static-files-issues","title":"5. Static Files Issues","text":"<pre><code># Check static files configuration\npython manage.py findstatic admin/css/base.css\n\n# Rebuild static files\nrm -rf staticfiles/\npython manage.py collectstatic --no-input\n</code></pre>"},{"location":"getting-started/installation/#6-celery-worker-issues","title":"6. Celery Worker Issues","text":"<pre><code># Check Celery status\ncelery -A config inspect active\n\n# Restart Celery worker\npkill -f celery\ncelery -A config worker -l info -B\n</code></pre>"},{"location":"getting-started/installation/#log-files","title":"Log Files","text":"<p>Check these log files for errors:</p> <ul> <li>Django: <code>logs/django.log</code></li> <li>Celery: <code>logs/celery.log</code></li> <li>Nginx: <code>/var/log/nginx/error.log</code></li> <li>System: <code>/var/log/syslog</code></li> </ul>"},{"location":"getting-started/installation/#performance-issues","title":"Performance Issues","text":""},{"location":"getting-started/installation/#1-slow-database-queries","title":"1. Slow Database Queries","text":"<pre><code># Enable query logging\n# Add to settings.py:\nLOGGING = {\n    'version': 1,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django.db.backends': {\n            'level': 'DEBUG',\n            'handlers': ['console'],\n        },\n    },\n}\n</code></pre>"},{"location":"getting-started/installation/#2-memory-issues","title":"2. Memory Issues","text":"<pre><code># Monitor memory usage\nhtop\nfree -h\n\n# Optimize Celery worker memory\n# Add to settings.py:\nCELERY_WORKER_MAX_MEMORY_PER_CHILD = 200000  # 200MB\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configuration Guide - Configure API keys and settings</li> <li>Quick Start Guide - Run your first data sync</li> <li>Feature Documentation - Learn about platform features</li> <li>Admin Guide - Set up administrative functions</li> </ol>"},{"location":"getting-started/installation/#support","title":"Support","text":"<p>If you encounter issues during installation:</p> <ol> <li>Check the logs for specific error messages</li> <li>Verify prerequisites are installed correctly</li> <li>Review environment variables are set properly</li> <li>Check network connectivity for API access</li> <li>Join our community for additional support</li> </ol> <p>Ready to configure your installation? Check out the Configuration Guide next!</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":""},{"location":"getting-started/quick-start/#overview","title":"Overview","text":"<p>Welcome to MusicChartsAI! This quick start guide will help you get up and running with the music analytics platform in minutes. Whether you're setting up for development or production, this guide covers all the essential steps.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/quick-start/#system-requirements","title":"System Requirements","text":"<p>Development Environment: - Python 3.11+  - Node.js 18+ - PostgreSQL 13+ - Redis 6+ - Git</p> <p>Production Environment: - Ubuntu 22.04 LTS (recommended) - 2GB RAM minimum (4GB recommended) - 20GB free disk space - Domain name (for production deployment)</p>"},{"location":"getting-started/quick-start/#required-accounts","title":"Required Accounts","text":"<p>External Services: - ACRCloud Account - For audio analysis and fraud detection - SoundCharts Account - For music chart data - GitHub Account - For code repository and CI/CD - Render Account - For cloud deployment (optional)</p>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd rocket-django-main\n\n# Create Python virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install Python dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/quick-start/#2-frontend-setup","title":"2. Frontend Setup","text":"<pre><code># Install Node.js dependencies\nnpm install\n\n# Build frontend assets\nnpm run build\n</code></pre>"},{"location":"getting-started/quick-start/#3-database-setup","title":"3. Database Setup","text":"<pre><code># Create PostgreSQL database\nsudo -u postgres psql\nCREATE DATABASE musiccharts_db;\nCREATE USER musiccharts_user WITH PASSWORD 'your_secure_password';\nGRANT ALL PRIVILEGES ON DATABASE musiccharts_db TO musiccharts_user;\nALTER USER musiccharts_user CREATEDB;\n\\q\n\n# Install and start Redis\nsudo apt install redis-server\nsudo systemctl start redis\nsudo systemctl enable redis\n</code></pre>"},{"location":"getting-started/quick-start/#4-environment-configuration","title":"4. Environment Configuration","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Django Configuration\nDEBUG=True\nSECRET_KEY=your-very-secure-secret-key-here\nALLOWED_HOSTS=localhost,127.0.0.1\n\n# Database Configuration\nDB_ENGINE=postgresql\nDB_HOST=localhost\nDB_NAME=musiccharts_db\nDB_USERNAME=musiccharts_user\nDB_PASS=your_secure_password\nDB_PORT=5432\n\n# Redis Configuration\nCELERY_BROKER=redis://localhost:6379\nCELERY_RESULT_BACKEND=redis://localhost:6379\n\n# ACRCloud Configuration\nACR_CLOUD_API_KEY=your_acr_cloud_key\nACR_CLOUD_API_SECRET=your_acr_cloud_secret\nACR_CLOUD_API_URL=https://api-eu-west-1.acrcloud.com\n\n# SoundCharts Configuration\nSOUNDCHARTS_APP_ID=your_soundcharts_app_id\nSOUNDCHARTS_API_KEY=your_soundcharts_api_key\n\n# Email Configuration (Optional)\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n\n# Site Configuration\nSITE_URL=http://localhost:8000\n</code></pre>"},{"location":"getting-started/quick-start/#5-database-migration","title":"5. Database Migration","text":"<pre><code># Run Django migrations\npython manage.py migrate\n\n# Create superuser\npython manage.py createsuperuser\n\n# Collect static files\npython manage.py collectstatic --noinput\n</code></pre>"},{"location":"getting-started/quick-start/#running-the-application","title":"Running the Application","text":""},{"location":"getting-started/quick-start/#development-mode","title":"Development Mode","text":"<p>Option 1: Using Django Development Server</p> <pre><code># Start Django development server\npython manage.py runserver\n\n# In separate terminals, start Celery services\ncelery -A config worker --loglevel=info\ncelery -A config beat --loglevel=info\n</code></pre> <p>Option 2: Using Service Management Script</p> <pre><code># Make script executable\nchmod +x scripts/start_services.sh\n\n# Start all services\n./scripts/start_services.sh start\n\n# Check status\n./scripts/start_services.sh status\n\n# View logs\n./scripts/start_services.sh logs\n</code></pre>"},{"location":"getting-started/quick-start/#production-mode","title":"Production Mode","text":"<p>Using Systemd Services:</p> <pre><code># Enable and start services\nsudo systemctl enable musiccharts-gunicorn\nsudo systemctl enable musiccharts-celery\nsudo systemctl enable musiccharts-celerybeat\n\nsudo systemctl start musiccharts-gunicorn\nsudo systemctl start musiccharts-celery\nsudo systemctl start musiccharts-celerybeat\n\n# Check status\nsudo systemctl status musiccharts-gunicorn\nsudo systemctl status musiccharts-celery\nsudo systemctl status musiccharts-celerybeat\n</code></pre>"},{"location":"getting-started/quick-start/#initial-configuration","title":"Initial Configuration","text":""},{"location":"getting-started/quick-start/#1-access-admin-interface","title":"1. Access Admin Interface","text":"<p>Navigate to <code>http://localhost:8000/admin/</code> and log in with your superuser credentials.</p>"},{"location":"getting-started/quick-start/#2-configure-acrcloud","title":"2. Configure ACRCloud","text":"<ol> <li>Go to ACR Cloud \u2192 ACRCloud Config</li> <li>Click Add ACRCloud Config</li> <li>Enter your ACRCloud credentials:</li> <li>API Key: Your ACRCloud API key</li> <li>API Secret: Your ACRCloud API secret</li> <li>API URL: <code>https://api-eu-west-1.acrcloud.com</code></li> <li>Save the configuration</li> </ol>"},{"location":"getting-started/quick-start/#3-configure-soundcharts","title":"3. Configure SoundCharts","text":"<ol> <li>Go to Soundcharts \u2192 Charts</li> <li>Click Import from API button</li> <li>Configure import parameters:</li> <li>Limit: Number of charts to import (start with 10)</li> <li>Offset: Starting position (0 for first batch)</li> <li>Click Fetch Charts to import initial chart data</li> </ol>"},{"location":"getting-started/quick-start/#4-test-audio-analysis","title":"4. Test Audio Analysis","text":"<ol> <li>Go to ACR Cloud \u2192 Analyses</li> <li>Click Add Analysis</li> <li>Upload a sample audio file</li> <li>Verify the analysis completes successfully</li> </ol>"},{"location":"getting-started/quick-start/#key-features-overview","title":"Key Features Overview","text":""},{"location":"getting-started/quick-start/#1-music-chart-management","title":"1. Music Chart Management","text":"<ul> <li>Chart Import: Import charts from SoundCharts API</li> <li>Rankings Sync: Automated synchronization of chart rankings</li> <li>Historical Data: Complete historical chart data</li> <li>Multi-platform Support: Support for Spotify, Apple Music, YouTube, etc.</li> </ul>"},{"location":"getting-started/quick-start/#2-audio-analysis","title":"2. Audio Analysis","text":"<ul> <li>Fraud Detection: Identify potential fraudulent content</li> <li>Cover Detection: Detect cover songs and remixes</li> <li>Lyrics Analysis: Analyze song lyrics for content</li> <li>Audio Fingerprinting: Create unique audio fingerprints</li> </ul>"},{"location":"getting-started/quick-start/#3-analytics-dashboard","title":"3. Analytics Dashboard","text":"<ul> <li>Real-time Charts: Interactive charts with ApexCharts</li> <li>Audience Analytics: Track audience growth over time</li> <li>Platform Comparison: Compare performance across platforms</li> <li>Trend Analysis: Identify trending songs and artists</li> </ul>"},{"location":"getting-started/quick-start/#4-admin-interface","title":"4. Admin Interface","text":"<ul> <li>Custom Ordering: Business-logic based admin organization</li> <li>Bulk Operations: Efficient bulk data management</li> <li>Progress Tracking: Real-time progress monitoring</li> <li>Error Handling: Comprehensive error reporting</li> </ul>"},{"location":"getting-started/quick-start/#common-tasks","title":"Common Tasks","text":""},{"location":"getting-started/quick-start/#import-chart-data","title":"Import Chart Data","text":"<pre><code># Import charts from SoundCharts API\npython manage.py import_charts --limit 50\n\n# Sync chart rankings\npython manage.py sync_chart_rankings --chart-id 1\n\n# Create sync schedule\npython manage.py create_sync_schedule --chart-id 1 --frequency daily\n</code></pre>"},{"location":"getting-started/quick-start/#fetch-track-metadata","title":"Fetch Track Metadata","text":"<pre><code># Fetch metadata for specific track\npython manage.py fetch_track_metadata --track-uuid &lt;uuid&gt;\n\n# Bulk metadata fetch\npython manage.py fetch_track_metadata --bulk\n\n# Fetch all tracks metadata\npython manage.py fetch_track_metadata --all\n</code></pre>"},{"location":"getting-started/quick-start/#manage-background-tasks","title":"Manage Background Tasks","text":"<pre><code># Check Celery status\ncelery -A config inspect active\n\n# Monitor task execution\ncelery -A config events\n\n# Purge task queue\ncelery -A config purge\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>1. Database Connection Error: <pre><code># Check PostgreSQL status\nsudo systemctl status postgresql\n\n# Test database connection\npython manage.py dbshell\n</code></pre></p> <p>2. Redis Connection Error: <pre><code># Check Redis status\nsudo systemctl status redis\n\n# Test Redis connection\nredis-cli ping\n</code></pre></p> <p>3. Static Files Not Loading: <pre><code># Collect static files\npython manage.py collectstatic --noinput\n\n# Check file permissions\nls -la staticfiles/\n</code></pre></p> <p>4. Celery Tasks Not Processing: <pre><code># Check Celery worker status\nps aux | grep celery\n\n# Restart Celery services\nsudo systemctl restart musiccharts-celery\nsudo systemctl restart musiccharts-celerybeat\n</code></pre></p>"},{"location":"getting-started/quick-start/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed error information:</p> <pre><code># In .env file\nDEBUG=True\n</code></pre>"},{"location":"getting-started/quick-start/#log-files","title":"Log Files","text":"<p>Application Logs: <pre><code># View Django logs\ntail -f logs/django.log\n\n# View Celery logs\ntail -f logs/celery-worker.log\ntail -f logs/celery-beat.log\n\n# View system logs\nsudo journalctl -u musiccharts-gunicorn -f\n</code></pre></p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quick-start/#1-explore-the-documentation","title":"1. Explore the Documentation","text":"<ul> <li>Features: Learn about advanced features and capabilities</li> <li>API Reference: Understand the REST API endpoints</li> <li>Deployment: Set up production deployment</li> <li>Troubleshooting: Resolve common issues</li> </ul>"},{"location":"getting-started/quick-start/#2-customize-the-application","title":"2. Customize the Application","text":"<ul> <li>Admin Interface: Customize admin ordering and functionality</li> <li>Charts: Create custom charts and visualizations</li> <li>Data Models: Extend models for your specific needs</li> <li>API Integration: Add new API integrations</li> </ul>"},{"location":"getting-started/quick-start/#3-production-deployment","title":"3. Production Deployment","text":"<ul> <li>Server Setup: Configure production server</li> <li>SSL Configuration: Set up HTTPS</li> <li>Monitoring: Implement monitoring and alerting</li> <li>Backup Strategy: Create backup and recovery procedures</li> </ul>"},{"location":"getting-started/quick-start/#4-advanced-configuration","title":"4. Advanced Configuration","text":"<ul> <li>Performance Tuning: Optimize database and application performance</li> <li>Security: Implement security best practices</li> <li>Scaling: Plan for horizontal scaling</li> <li>CI/CD: Set up automated deployment pipelines</li> </ul>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":""},{"location":"getting-started/quick-start/#documentation-resources","title":"Documentation Resources","text":"<ul> <li>Development Guide: Comprehensive development documentation</li> <li>API Documentation: Complete API reference</li> <li>Deployment Guide: Production deployment instructions</li> <li>Troubleshooting Guide: Common issues and solutions</li> </ul>"},{"location":"getting-started/quick-start/#support-channels","title":"Support Channels","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Community Forums: Ask questions and get help</li> <li>Professional Support: Contact for commercial support</li> </ul>"},{"location":"getting-started/quick-start/#useful-commands","title":"Useful Commands","text":"<pre><code># Check Django configuration\npython manage.py check\n\n# Check database\npython manage.py dbshell\n\n# Check migrations\npython manage.py showmigrations\n\n# Check static files\npython manage.py collectstatic --dry-run\n\n# Check Celery\ncelery -A config inspect active\n\n# Check Redis\nredis-cli ping\n\n# Check system resources\nfree -h\ndf -h\nps aux | grep python\n</code></pre>"},{"location":"getting-started/quick-start/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully set up MusicChartsAI. The platform is now ready for music data analysis, chart management, and audio processing. </p> <p>Key next steps: 1. Configure External Services: Set up ACRCloud and SoundCharts integrations 2. Import Initial Data: Import charts and track data 3. Explore Features: Test audio analysis and analytics dashboard 4. Customize: Adapt the platform to your specific needs 5. Deploy: Set up production deployment when ready</p> <p>For detailed information about specific features and advanced configuration, refer to the comprehensive documentation in the <code>docs_site/</code> directory.</p>"}]}